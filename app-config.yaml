app:
  title: Tensure Backstage App
  listen:
    host: 0.0.0.0
    port: 7007
  baseUrl: ${BACKSTAGE_HOST}
organization:
  name: Tensure

backend:
  auth:
    keys:
      - secret: ${BACKSTAGE_BACKEND_AUTH}
  baseUrl: ${BACKSTAGE_HOST}
  listen:
    port: 7007
    host: 0.0.0.0

  csp:
    connect-src: ["'self'", 'http:', 'https:']

  cors:
    origin: ${BACKSTAGE_HOST}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true

  database:
    client: pg
    connection:
      host: ${BACKSTAGE_DB_CLOUD_SQL_IP}
      port: 5432
      user: backstage
      password: ${BACKSTAGE_DB_PASSWORD}

integrations:
  github:
    - host: github.com
      token: ${BACKSTAGE_GITHUB_KEY}

auth:
  environment: production
  providers:
    github:
      production:
        clientId: ${BACKSTAGE_GITHUB_CLIENT_ID}
        clientSecret: ${BACKSTAGE_GITHUB_CLIENT_SECRET}
    google:
      production:
        clientId: ${BACKSTAGE_CLIENT_ID}
        clientSecret: ${BACKSTAGE_CLIENT_SECRET}
        ## uncomment to set lifespan of user session
        # sessionDuration: { hours: 24 } # supports `ms` library format (e.g. '24h', '2 days'), ISO duration, "human duration" as used in code
        signIn:
          resolvers:
            # See https://backstage.io/docs/auth/google/provider#resolvers for more resolvers
            - resolver: emailMatchingUserEntityProfileEmail

proxy:
  '/argocd/api':
    target: https://${ARGO_CD_HOST_NAME}/api/v1/
    changeOrigin: true
    # only if your argocd api has self-signed cert
    secure: true
    headers:
      Cookie:
        $env: ${ARGOCD_AUTH_TOKEN}
  '/grafana/api':
    # May be a public or an internal DNS
    target: ${GRAFANA_HOST_NAME}
    headers:
      Authorization: ${GRAFANA_BEARER_TOKEN} 

grafana:
  # Publicly accessible domain
  domain: ${GRAFANA_HOST_NAME}
  # Is unified alerting enabled in Grafana?
  # See: https://grafana.com/blog/2021/06/14/the-new-unified-alerting-system-for-grafana-everything-you-need-to-know/
  # Optional. Default: false
  unifiedAlerting: false

techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'googleGcs'
    googleGcs:
      bucketName: ${TECHDOCS_GCS_BUCKET_NAME}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Template, User, Group, Component, System, API, Resource, Location]
  locations:
    - type: file
      target: /app/entities/org.yaml

    - type: url
      target: https://github.com/VamsiKrishna082/backstage-templates/blob/main/template.yaml


    useUrlReadersSearch: true

kubernetes:
  frontend:
    podDelete:
      enabled: true
  serviceLocatorMethod:
    type: 'singleTenant'
  clusterLocatorMethods:
    - type: 'gke'
      projectId: 'vamsi-krishna-sandbox'
      skipTLSVerify: true
      skipMetricsLookup: true
      exposeDashboard: true
    - type: 'gke'
      projectId: 'apps-2b4b'
      skipTLSVerify: true
      skipMetricsLookup: true
      exposeDashboard: true 

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true



