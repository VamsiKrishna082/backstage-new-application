{"version":3,"file":"CostInsightsApi.esm.js","sources":["../../src/api/CostInsightsApi.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Cost,\n  Entity,\n  Group,\n  Project,\n  Maybe,\n  MetricData,\n} from '@backstage-community/plugin-cost-insights-common';\n\nimport { Alert } from '../types';\nimport { createApiRef } from '@backstage/core-plugin-api';\n\n/** @public */\nexport type ProductInsightsOptions = {\n  /**\n   * The product from the cost-insights configuration in app-config.yaml\n   */\n  product: string;\n\n  /**\n   * The group id from getUserGroups or query parameters\n   */\n  group: string;\n\n  /**\n   * An ISO 8601 repeating interval string, such as R2/P3M/2020-09-01\n   */\n  intervals: string;\n\n  /**\n   * (optional) The project id from getGroupProjects or query parameters\n   */\n  project: Maybe<string>;\n};\n\n/** @public */\nexport type CostInsightsApi = {\n  /**\n   * Get the most current date for which billing data is complete, in YYYY-MM-DD format. This helps\n   * define the intervals used in other API methods to avoid showing incomplete cost. The costs for\n   * today, for example, will not be complete. This ideally comes from the cloud provider.\n   */\n  getLastCompleteBillingDate(): Promise<string>;\n\n  /**\n   * Get a list of groups the given user belongs to. These may be LDAP groups or similar\n   * organizational groups. Cost Insights is designed to show costs based on group membership;\n   * if a user has multiple groups, they are able to switch between groups to see costs for each.\n   *\n   * This method should be removed once the Backstage identity plugin provides the same concept.\n   *\n   * @param userId - The login id for the current user\n   */\n  getUserGroups(userId: string): Promise<Group[]>;\n\n  /**\n   * Get a list of cloud billing entities that belong to this group (projects in GCP, AWS has a\n   * similar concept in billing accounts). These act as filters for the displayed costs, users can\n   * choose whether they see all costs for a group, or those from a particular owned project.\n   *\n   * @param group - The group id from getUserGroups or query parameters\n   */\n  getGroupProjects(group: string): Promise<Project[]>;\n\n  /**\n   * Get daily cost aggregations for a given catalog entity and interval time frame.\n   *\n   * The return type includes an array of daily cost aggregations as well as statistics about the\n   * change in cost over the intervals. Calculating these statistics requires us to bucket costs\n   * into two or more time periods, hence a repeating interval format rather than just a start and\n   * end date.\n   *\n   * The rate of change in this comparison allows teams to reason about their cost growth (or\n   * reduction) and compare it to metrics important to the business.\n   *\n   * Note: implementing this is only required when using the `EntityCostInsightsContent` extension.\n   *\n   * @param catalogEntityRef - A reference to the catalog entity, as described in\n   *   https://backstage.io/docs/features/software-catalog/references\n   * @param intervals - An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01\n   *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\n   */\n  getCatalogEntityDailyCost?(\n    catalogEntityRef: string,\n    intervals: string,\n  ): Promise<Cost>;\n\n  /**\n   * Get daily cost aggregations for a given group and interval time frame.\n   *\n   * The return type includes an array of daily cost aggregations as well as statistics about the\n   * change in cost over the intervals. Calculating these statistics requires us to bucket costs\n   * into two or more time periods, hence a repeating interval format rather than just a start and\n   * end date.\n   *\n   * The rate of change in this comparison allows teams to reason about their cost growth (or\n   * reduction) and compare it to metrics important to the business.\n   *\n   * @param group - The group id from getUserGroups or query parameters\n   * @param intervals - An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01\n   *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\n   */\n  getGroupDailyCost(group: string, intervals: string): Promise<Cost>;\n\n  /**\n   * Get daily cost aggregations for a given billing entity (project in GCP, AWS has a similar\n   * concept in billing accounts) and interval time frame.\n   *\n   * The return type includes an array of daily cost aggregations as well as statistics about the\n   * change in cost over the intervals. Calculating these statistics requires us to bucket costs\n   * into two or more time periods, hence a repeating interval format rather than just a start and\n   * end date.\n   *\n   * The rate of change in this comparison allows teams to reason about the project's cost growth\n   * (or reduction) and compare it to metrics important to the business.\n   *\n   * @param project - The project id from getGroupProjects or query parameters\n   * @param intervals - An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01\n   *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\n   */\n  getProjectDailyCost(project: string, intervals: string): Promise<Cost>;\n\n  /**\n   * Get aggregations for a particular metric and interval time frame. Teams\n   * can see metrics important to their business in comparison to the growth\n   * (or reduction) of a project or group's daily costs.\n   *\n   * @param metric - A metric from the cost-insights configuration in app-config.yaml.\n   * @param intervals - An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01\n   *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\n   */\n  getDailyMetricData(metric: string, intervals: string): Promise<MetricData>;\n\n  /**\n   * Get cost aggregations for a particular cloud product and interval time frame. This includes\n   * total cost for the product, as well as a breakdown of particular entities that incurred cost\n   * in this product. The type of entity depends on the product - it may be deployed services,\n   * storage buckets, managed database instances, etc.\n   *\n   * If project is supplied, this should only return product costs for the given billing entity\n   * (project in GCP).\n   *\n   * The time period is supplied as a Duration rather than intervals, since this is always expected\n   * to return data for two bucketed time period (e.g. month vs month, or quarter vs quarter).\n   *\n   * @param options - Options to use when fetching insights for a particular cloud product and\n   *                interval time frame.\n   */\n  getProductInsights(options: ProductInsightsOptions): Promise<Entity>;\n\n  /**\n   * Get current cost alerts for a given group. These show up as Action Items for the group on the\n   * Cost Insights page. Alerts may include cost-saving recommendations, such as infrastructure\n   * migrations, or cost-related warnings, such as an unexpected billing anomaly.\n   */\n  getAlerts(group: string): Promise<Alert[]>;\n};\n\n/** @public */\nexport const costInsightsApiRef = createApiRef<CostInsightsApi>({\n  id: 'plugin.costinsights.service',\n});\n"],"names":[],"mappings":";;AA+KO,MAAM,qBAAqB,YAA8B,CAAA;AAAA,EAC9D,EAAI,EAAA;AACN,CAAC;;;;"}