import React, { useState, useRef, useEffect } from 'react';
import { capitalize } from '@material-ui/core/utils';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Divider from '@material-ui/core/Divider';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import IconButton from '@material-ui/core/IconButton';
import DialogContent from '@material-ui/core/DialogContent';
import Typography from '@material-ui/core/Typography';
import CloseIcon from '@material-ui/icons/Close';
import { useAlertDialogStyles } from '../../utils/styles.esm.js';
import { choose, formOf } from '../../utils/alerts.esm.js';

const DEFAULT_FORM_ID = "alert-form";
const AlertDialog = ({
  open,
  group,
  alert,
  status,
  onClose,
  onSubmit
}) => {
  const classes = useAlertDialogStyles();
  const [isSubmitDisabled, setSubmitDisabled] = useState(true);
  const formRef = useRef(null);
  useEffect(() => {
    setSubmitDisabled(open);
  }, [open]);
  function disableSubmit(isDisabled) {
    setSubmitDisabled(isDisabled);
  }
  function onDialogClose() {
    onClose();
    setSubmitDisabled(true);
  }
  const [action, actioned] = choose(
    status,
    [
      ["snooze", "snoozed"],
      ["accept", "accepted"],
      ["dismiss", "dismissed"]
    ],
    ["", ""]
  );
  const TransitionProps = {
    mountOnEnter: true,
    unmountOnExit: true,
    onEntered() {
      if (formRef.current) {
        formRef.current.id = DEFAULT_FORM_ID;
      }
    }
  };
  const Form = formOf(alert, status);
  return /* @__PURE__ */ React.createElement(
    Dialog,
    {
      open,
      onClose: onDialogClose,
      scroll: "body",
      maxWidth: "lg",
      TransitionProps
    },
    /* @__PURE__ */ React.createElement(Box, { display: "flex", justifyContent: "flex-end" }, /* @__PURE__ */ React.createElement(
      IconButton,
      {
        className: classes.icon,
        disableRipple: true,
        "aria-label": "Close",
        onClick: onDialogClose
      },
      /* @__PURE__ */ React.createElement(CloseIcon, null)
    )),
    /* @__PURE__ */ React.createElement(DialogContent, { className: classes.content }, /* @__PURE__ */ React.createElement(Box, { mb: 1.5 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, /* @__PURE__ */ React.createElement("b", null, capitalize(action), " this action item?")), /* @__PURE__ */ React.createElement(Typography, { variant: "h6", color: "textSecondary" }, /* @__PURE__ */ React.createElement("b", null, "This action item will be ", actioned, " for all of ", group, "."))), /* @__PURE__ */ React.createElement(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        bgcolor: "alertBackground",
        p: 2,
        mb: 1.5,
        borderRadius: 4
      },
      /* @__PURE__ */ React.createElement(Typography, null, /* @__PURE__ */ React.createElement("b", null, alert?.title)),
      /* @__PURE__ */ React.createElement(Typography, { color: "textSecondary" }, alert?.subtitle)
    ), Form && /* @__PURE__ */ React.createElement(
      Form,
      {
        ref: formRef,
        alert,
        onSubmit,
        disableSubmit
      }
    )),
    /* @__PURE__ */ React.createElement(Divider, null),
    /* @__PURE__ */ React.createElement(DialogActions, { className: classes.actions, disableSpacing: true }, Form ? /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "submit",
        color: "primary",
        variant: "contained",
        "aria-label": action,
        form: DEFAULT_FORM_ID,
        disabled: isSubmitDisabled
      },
      capitalize(action)
    ) : /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "button",
        color: "primary",
        variant: "contained",
        "aria-label": action,
        onClick: () => onSubmit(null)
      },
      capitalize(action)
    ))
  );
};

export { AlertDialog };
//# sourceMappingURL=AlertDialog.esm.js.map
