import React, { useState, useEffect } from 'react';
import pluralize from 'pluralize';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import Snackbar from '@material-ui/core/Snackbar';
import Alert from '@material-ui/lab/Alert';
import { AlertDialog } from './AlertDialog.esm.js';
import { AlertStatusSummary } from './AlertStatusSummary.esm.js';
import { AlertStatusSummaryButton } from './AlertStatusSummaryButton.esm.js';
import { AlertInsightsHeader } from './AlertInsightsHeader.esm.js';
import { AlertInsightsSection } from './AlertInsightsSection.esm.js';
import '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import { useLoading } from '../../hooks/useLoading.esm.js';
import { useScroll, ScrollType } from '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import { DefaultLoadingAction } from '../../utils/loading.esm.js';
import { AlertStatus } from '../../types/Alert.esm.js';
import { isStatusSnoozed, isStatusAccepted, isStatusDismissed, sumOfAllAlerts } from '../../utils/alerts.esm.js';
import { ScrollAnchor } from '../../utils/scroll.esm.js';

const mapLoadingToAlerts = ({ dispatch }) => (isLoading) => dispatch({ [DefaultLoadingAction.CostInsightsAlerts]: isLoading });
const AlertInsights = ({
  group,
  active,
  snoozed,
  accepted,
  dismissed,
  onChange
}) => {
  const [scroll] = useScroll();
  const [alert, setAlert] = useState(null);
  const dispatchLoadingAlerts = useLoading(mapLoadingToAlerts);
  const [status, setStatus] = useState(null);
  const [data, setData] = useState(void 0);
  const [error, setError] = useState(null);
  const [isDialogOpen, setDialogOpen] = useState(false);
  const [isSummaryOpen, setSummaryOpen] = useState(false);
  const [isSnackbarOpen, setSnackbarOpen] = useState(false);
  useEffect(() => {
    async function callAlertHook(options2, callback) {
      setAlert(null);
      setStatus(null);
      setData(void 0);
      setDialogOpen(false);
      dispatchLoadingAlerts(true);
      try {
        const alerts = await callback(options2);
        onChange(alerts);
      } catch (e) {
        setError(e);
      } finally {
        dispatchLoadingAlerts(false);
      }
    }
    const options = { data, group };
    const onSnoozed = alert?.onSnoozed?.bind(alert);
    const onAccepted = alert?.onAccepted?.bind(alert);
    const onDismissed = alert?.onDismissed?.bind(alert);
    if (data !== void 0) {
      if (isStatusSnoozed(status) && onSnoozed) {
        callAlertHook(options, onSnoozed);
      } else if (isStatusAccepted(status) && onAccepted) {
        callAlertHook(options, onAccepted);
      } else if (isStatusDismissed(status) && onDismissed) {
        callAlertHook(options, onDismissed);
      }
    }
  }, [group, data, alert, status, onChange, dispatchLoadingAlerts]);
  useEffect(() => {
    if (scroll === ScrollType.AlertSummary) {
      setSummaryOpen(true);
    }
  }, [scroll]);
  useEffect(() => {
    setDialogOpen(!!status);
  }, [status]);
  useEffect(() => {
    setSnackbarOpen(!!error);
  }, [error]);
  function onSnooze(alertToSnooze) {
    setAlert(alertToSnooze);
    setStatus(AlertStatus.Snoozed);
  }
  function onAccept(alertToAccept) {
    setAlert(alertToAccept);
    setStatus(AlertStatus.Accepted);
  }
  function onDismiss(alertToDismiss) {
    setAlert(alertToDismiss);
    setStatus(AlertStatus.Dismissed);
  }
  function onSnackbarClose() {
    setError(null);
  }
  function onDialogClose() {
    setAlert(null);
    setStatus(null);
  }
  function onDialogFormSubmit(formData) {
    setData(formData);
  }
  function onSummaryButtonClick() {
    setSummaryOpen((prevOpen) => !prevOpen);
  }
  const total = [accepted, snoozed, dismissed].reduce(sumOfAllAlerts, 0);
  const isAlertStatusSummaryDisplayed = !!total;
  const isAlertInsightSectionDisplayed = !!active.length;
  return /* @__PURE__ */ React.createElement(Grid, { container: true, direction: "column", spacing: 2 }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(
    AlertInsightsHeader,
    {
      title: "Your team's action items",
      subtitle: isAlertInsightSectionDisplayed ? "This section outlines suggested action items your team can address to improve cloud costs." : "All of your team's action items are hidden. Maybe it's time to give them another look?"
    }
  )), isAlertInsightSectionDisplayed && /* @__PURE__ */ React.createElement(Grid, { item: true, container: true, direction: "column", spacing: 4 }, active.map((activeAlert, index) => /* @__PURE__ */ React.createElement(Grid, { item: true, key: `alert-insights-section-${index}` }, /* @__PURE__ */ React.createElement(
    AlertInsightsSection,
    {
      alert: activeAlert,
      number: index + 1,
      onSnooze,
      onAccept,
      onDismiss
    }
  )))), isAlertStatusSummaryDisplayed && /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(Box, { position: "relative", display: "flex", justifyContent: "flex-end" }, /* @__PURE__ */ React.createElement(ScrollAnchor, { id: ScrollType.AlertSummary }), /* @__PURE__ */ React.createElement(AlertStatusSummaryButton, { onClick: onSummaryButtonClick }, pluralize("Hidden Action Item", total))), /* @__PURE__ */ React.createElement(
    AlertStatusSummary,
    {
      open: isSummaryOpen,
      snoozed,
      accepted,
      dismissed
    }
  )), /* @__PURE__ */ React.createElement(
    AlertDialog,
    {
      group,
      open: isDialogOpen,
      alert,
      status,
      onClose: onDialogClose,
      onSubmit: onDialogFormSubmit
    }
  ), /* @__PURE__ */ React.createElement(
    Snackbar,
    {
      open: isSnackbarOpen,
      autoHideDuration: 6e3,
      anchorOrigin: { vertical: "top", horizontal: "center" },
      onClose: onSnackbarClose
    },
    /* @__PURE__ */ React.createElement(Alert, { onClose: onSnackbarClose, severity: "error" }, error?.message)
  ));
};

export { AlertInsights };
//# sourceMappingURL=AlertInsights.esm.js.map
