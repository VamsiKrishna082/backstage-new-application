import React, { useState, useCallback } from 'react';
import { ResponsiveContainer, BarChart as BarChart$1, Tooltip, CartesianGrid, XAxis, YAxis, Bar } from 'recharts';
import Box from '@material-ui/core/Box';
import { useTheme } from '@material-ui/core/styles';
import { BarChartTick } from './BarChartTick.esm.js';
import { BarChartStepper } from './BarChartStepper.esm.js';
import { BarChartTooltip } from './BarChartTooltip.esm.js';
import { BarChartTooltipItem } from './BarChartTooltipItem.esm.js';
import { currencyFormatter } from '../../utils/formatters.esm.js';
import { DataKey } from '../../types/Alert.esm.js';
import { notEmpty } from '../../utils/assert.esm.js';
import { useBarChartStyles } from '../../utils/styles.esm.js';
import { resourceSort } from '../../utils/sort.esm.js';
import { isInvalid, tooltipItemOf, titleOf } from '../../utils/graphs.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';

const defaultTooltip = (baseCurrency) => {
  const tooltip = ({ label, payload = [] }) => {
    if (isInvalid({ label, payload })) return null;
    const title = titleOf(label);
    const items = payload.map(tooltipItemOf(baseCurrency)).filter(notEmpty);
    return /* @__PURE__ */ React.createElement(BarChartTooltip, { title }, items.map((item, index) => /* @__PURE__ */ React.createElement(BarChartTooltipItem, { key: `${item.label}-${index}`, item })));
  };
  return tooltip;
};
const BarChart = (props) => {
  const { baseCurrency } = useConfig();
  const {
    resources,
    responsive = true,
    displayAmount = 6,
    options = {},
    tooltip = defaultTooltip(baseCurrency),
    onClick,
    onMouseMove
  } = props;
  const theme = useTheme();
  const styles = useBarChartStyles(theme);
  const [activeChart, setActiveChart] = useState(false);
  const [stepWindow, setStepWindow] = useState(() => [0, displayAmount]);
  const data = Object.assign(
    {
      previousFill: theme.palette.lightBlue,
      currentFill: theme.palette.darkBlue,
      previousName: "Previous",
      currentName: "Current"
    },
    options
  );
  const [stepStart, stepEnd] = stepWindow;
  const steps = Math.ceil(resources.length / displayAmount);
  const disableStepper = resources.length <= displayAmount;
  const sortedResources = resources.sort(resourceSort).slice(stepStart, stepEnd);
  const globalResourcesMax = resources.reduce(
    (max, r) => Math.max(max, r.current, r.previous),
    0
  );
  const onStepChange = useCallback(
    (activeStep) => {
      const start = activeStep * displayAmount;
      const end = start + displayAmount;
      if (end > resources.length) {
        setStepWindow([start, resources.length]);
      } else {
        setStepWindow([start, end]);
      }
    },
    [setStepWindow, resources, displayAmount]
  );
  return /* @__PURE__ */ React.createElement(
    Box,
    {
      position: "relative",
      onMouseLeave: () => setActiveChart(false),
      onMouseEnter: () => setActiveChart(true),
      "data-testid": "bar-chart-wrapper"
    },
    /* @__PURE__ */ React.createElement(
      ResponsiveContainer,
      {
        height: styles.container.height,
        width: responsive ? "100%" : styles.container.width
      },
      /* @__PURE__ */ React.createElement(
        BarChart$1,
        {
          style: { cursor: onClick ? "pointer" : null },
          onClick,
          onMouseMove,
          data: sortedResources,
          margin: styles.barChart.margin,
          barSize: 45,
          "data-testid": "bar-chart"
        },
        tooltip && /* @__PURE__ */ React.createElement(
          Tooltip,
          {
            filterNull: true,
            cursor: styles.cursor,
            animationDuration: 100,
            content: tooltip
          }
        ),
        /* @__PURE__ */ React.createElement(
          CartesianGrid,
          {
            vertical: false,
            stroke: styles.cartesianGrid.stroke
          }
        ),
        /* @__PURE__ */ React.createElement(
          XAxis,
          {
            dataKey: DataKey.Name,
            tickLine: false,
            interval: 0,
            height: styles.xAxis.height,
            tick: BarChartTick
          }
        ),
        /* @__PURE__ */ React.createElement(
          YAxis,
          {
            tickFormatter: currencyFormatter(baseCurrency).format,
            domain: [() => 0, globalResourcesMax],
            tick: styles.axis
          }
        ),
        /* @__PURE__ */ React.createElement(
          Bar,
          {
            dataKey: DataKey.Previous,
            name: data.previousName,
            fill: data.previousFill,
            isAnimationActive: false
          }
        ),
        /* @__PURE__ */ React.createElement(
          Bar,
          {
            dataKey: DataKey.Current,
            name: data.currentName,
            fill: data.currentFill,
            isAnimationActive: false
          }
        )
      )
    ),
    !disableStepper && /* @__PURE__ */ React.createElement(
      BarChartStepper,
      {
        steps,
        disableScroll: !activeChart,
        onChange: onStepChange
      }
    )
  );
};

export { BarChart };
//# sourceMappingURL=BarChart.esm.js.map
