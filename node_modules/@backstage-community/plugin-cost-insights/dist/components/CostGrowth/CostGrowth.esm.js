import React from 'react';
import classnames from 'classnames';
import Typography from '@material-ui/core/Typography';
import '../../types/Alert.esm.js';
import { GrowthType } from '../../types/ChangeStatistic.esm.js';
import { CurrencyType } from '../../types/CurrencyType.esm.js';
import { rateOf } from '../../utils/currency.esm.js';
import { growthOf } from '../../utils/change.esm.js';
import { useCostGrowthStyles } from '../../utils/styles.esm.js';
import { formatCurrency, formatPercent } from '../../utils/formatters.esm.js';
import { indefiniteArticleOf } from '../../utils/grammar.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import { useCurrency } from '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import { notEmpty } from '../../utils/assert.esm.js';

const CostGrowth = (props) => {
  const { change, duration } = props;
  const styles = useCostGrowthStyles();
  const { engineerCost, engineerThreshold } = useConfig();
  const [currency] = useCurrency();
  const amount = Math.abs(change.amount);
  const ratio = Math.abs(change.ratio ?? NaN);
  const rate = rateOf(engineerCost, duration);
  const engineers = amount / rate;
  const converted = amount / (currency.rate ?? rate);
  const growth = notEmpty(change.ratio) ? growthOf({ ratio: change.ratio, amount: engineers }, engineerThreshold) : null;
  const classes = classnames({
    [styles.excess]: growth === GrowthType.Excess,
    [styles.savings]: growth === GrowthType.Savings
  });
  if (engineers < engineerThreshold) {
    return /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes }, "Negligible");
  }
  if (currency.kind === CurrencyType.USD) {
    if (isNaN(ratio)) {
      return /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes }, "~", currency.prefix, formatCurrency(converted));
    }
    return /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes }, formatPercent(ratio), " or ~", currency.prefix, formatCurrency(converted));
  }
  if (amount < 1) {
    return /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes }, "less than ", indefiniteArticleOf(["a", "an"], currency.unit));
  }
  if (isNaN(ratio)) {
    return /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes }, "~", formatCurrency(converted, currency.unit));
  }
  return /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes }, formatPercent(ratio), " or ~", formatCurrency(converted, currency.unit));
};

export { CostGrowth };
//# sourceMappingURL=CostGrowth.esm.js.map
