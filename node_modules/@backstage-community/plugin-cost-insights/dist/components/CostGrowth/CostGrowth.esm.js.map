{"version":3,"file":"CostGrowth.esm.js","sources":["../../../src/components/CostGrowth/CostGrowth.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nimport { CurrencyType, Duration, GrowthType } from '../../types';\nimport { ChangeStatistic } from '@backstage-community/plugin-cost-insights-common';\nimport { rateOf } from '../../utils/currency';\nimport { growthOf } from '../../utils/change';\nimport { useCostGrowthStyles as useStyles } from '../../utils/styles';\nimport { formatPercent, formatCurrency } from '../../utils/formatters';\nimport { indefiniteArticleOf } from '../../utils/grammar';\nimport { useConfig, useCurrency } from '../../hooks';\nimport { notEmpty } from '../../utils/assert';\n\n/** @public */\nexport type CostGrowthProps = {\n  change: ChangeStatistic;\n  duration: Duration;\n};\n\n/** @public */\nexport const CostGrowth = (props: CostGrowthProps) => {\n  const { change, duration } = props;\n\n  const styles = useStyles();\n  const { engineerCost, engineerThreshold } = useConfig();\n  const [currency] = useCurrency();\n\n  // Only display costs in absolute values\n  const amount = Math.abs(change.amount);\n  const ratio = Math.abs(change.ratio ?? NaN);\n\n  const rate = rateOf(engineerCost, duration);\n  const engineers = amount / rate;\n  const converted = amount / (currency.rate ?? rate);\n\n  // If a ratio cannot be calculated, don't format.\n  const growth = notEmpty(change.ratio)\n    ? growthOf({ ratio: change.ratio, amount: engineers }, engineerThreshold)\n    : null;\n  // Determine if growth is significant enough to highlight\n  const classes = classnames({\n    [styles.excess]: growth === GrowthType.Excess,\n    [styles.savings]: growth === GrowthType.Savings,\n  });\n\n  if (engineers < engineerThreshold) {\n    return (\n      <Typography component=\"span\" className={classes}>\n        Negligible\n      </Typography>\n    );\n  }\n\n  if (currency.kind === CurrencyType.USD) {\n    // Do not display percentage if ratio cannot be calculated\n    if (isNaN(ratio)) {\n      return (\n        <Typography component=\"span\" className={classes}>\n          ~{currency.prefix}\n          {formatCurrency(converted)}\n        </Typography>\n      );\n    }\n\n    return (\n      <Typography component=\"span\" className={classes}>\n        {formatPercent(ratio)} or ~{currency.prefix}\n        {formatCurrency(converted)}\n      </Typography>\n    );\n  }\n\n  if (amount < 1) {\n    return (\n      <Typography component=\"span\" className={classes}>\n        less than {indefiniteArticleOf(['a', 'an'], currency.unit)}\n      </Typography>\n    );\n  }\n\n  // Do not display percentage if ratio cannot be calculated\n  if (isNaN(ratio)) {\n    return (\n      <Typography component=\"span\" className={classes}>\n        ~{formatCurrency(converted, currency.unit)}\n      </Typography>\n    );\n  }\n\n  return (\n    <Typography component=\"span\" className={classes}>\n      {formatPercent(ratio)} or ~{formatCurrency(converted, currency.unit)}\n    </Typography>\n  );\n};\n"],"names":["useStyles"],"mappings":";;;;;;;;;;;;;;;;;;;;AAoCa,MAAA,UAAA,GAAa,CAAC,KAA2B,KAAA;AACpD,EAAM,MAAA,EAAE,MAAQ,EAAA,QAAA,EAAa,GAAA,KAAA;AAE7B,EAAA,MAAM,SAASA,mBAAU,EAAA;AACzB,EAAA,MAAM,EAAE,YAAA,EAAc,iBAAkB,EAAA,GAAI,SAAU,EAAA;AACtD,EAAM,MAAA,CAAC,QAAQ,CAAA,GAAI,WAAY,EAAA;AAG/B,EAAA,MAAM,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAO,MAAM,CAAA;AACrC,EAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAO,SAAS,GAAG,CAAA;AAE1C,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,YAAA,EAAc,QAAQ,CAAA;AAC1C,EAAA,MAAM,YAAY,MAAS,GAAA,IAAA;AAC3B,EAAM,MAAA,SAAA,GAAY,MAAU,IAAA,QAAA,CAAS,IAAQ,IAAA,IAAA,CAAA;AAG7C,EAAA,MAAM,MAAS,GAAA,QAAA,CAAS,MAAO,CAAA,KAAK,IAChC,QAAS,CAAA,EAAE,KAAO,EAAA,MAAA,CAAO,KAAO,EAAA,MAAA,EAAQ,SAAU,EAAA,EAAG,iBAAiB,CACtE,GAAA,IAAA;AAEJ,EAAA,MAAM,UAAU,UAAW,CAAA;AAAA,IACzB,CAAC,MAAA,CAAO,MAAM,GAAG,WAAW,UAAW,CAAA,MAAA;AAAA,IACvC,CAAC,MAAA,CAAO,OAAO,GAAG,WAAW,UAAW,CAAA;AAAA,GACzC,CAAA;AAED,EAAA,IAAI,YAAY,iBAAmB,EAAA;AACjC,IAAA,2CACG,UAAW,EAAA,EAAA,SAAA,EAAU,MAAO,EAAA,SAAA,EAAW,WAAS,YAEjD,CAAA;AAAA;AAIJ,EAAI,IAAA,QAAA,CAAS,IAAS,KAAA,YAAA,CAAa,GAAK,EAAA;AAEtC,IAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,MACE,uBAAA,KAAA,CAAA,aAAA,CAAC,UAAW,EAAA,EAAA,SAAA,EAAU,MAAO,EAAA,SAAA,EAAW,OAAS,EAAA,EAAA,GAAA,EAC7C,QAAS,CAAA,MAAA,EACV,cAAe,CAAA,SAAS,CAC3B,CAAA;AAAA;AAIJ,IAAA,uBACG,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,EAAW,SAAU,EAAA,MAAA,EAAO,WAAW,OACrC,EAAA,EAAA,aAAA,CAAc,KAAK,CAAA,EAAE,OAAM,EAAA,QAAA,CAAS,MACpC,EAAA,cAAA,CAAe,SAAS,CAC3B,CAAA;AAAA;AAIJ,EAAA,IAAI,SAAS,CAAG,EAAA;AACd,IAAA,uBACG,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,EAAW,SAAU,EAAA,MAAA,EAAO,WAAW,OAAS,EAAA,EAAA,YAAA,EACpC,mBAAoB,CAAA,CAAC,GAAK,EAAA,IAAI,CAAG,EAAA,QAAA,CAAS,IAAI,CAC3D,CAAA;AAAA;AAKJ,EAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,IACE,uBAAA,KAAA,CAAA,aAAA,CAAC,UAAW,EAAA,EAAA,SAAA,EAAU,MAAO,EAAA,SAAA,EAAW,OAAS,EAAA,EAAA,GAAA,EAC7C,cAAe,CAAA,SAAA,EAAW,QAAS,CAAA,IAAI,CAC3C,CAAA;AAAA;AAIJ,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,EAAW,SAAU,EAAA,MAAA,EAAO,WAAW,OACrC,EAAA,EAAA,aAAA,CAAc,KAAK,CAAA,EAAE,OAAM,EAAA,cAAA,CAAe,SAAW,EAAA,QAAA,CAAS,IAAI,CACrE,CAAA;AAEJ;;;;"}