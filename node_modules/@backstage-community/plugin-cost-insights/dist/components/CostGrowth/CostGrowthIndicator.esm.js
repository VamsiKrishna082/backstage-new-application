import React from 'react';
import classnames from 'classnames';
import Typography from '@material-ui/core/Typography';
import ArrowDropUp from '@material-ui/icons/ArrowDropUp';
import ArrowDropDown from '@material-ui/icons/ArrowDropDown';
import { growthOf } from '../../utils/change.esm.js';
import '../../types/Alert.esm.js';
import { GrowthType } from '../../types/ChangeStatistic.esm.js';
import { useCostGrowthStyles } from '../../utils/styles.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';

const CostGrowthIndicator = (props) => {
  const { engineerThreshold } = useConfig();
  const { change, formatter, className, ...extraProps } = props;
  const classes = useCostGrowthStyles();
  const growth = growthOf(change, engineerThreshold);
  const classNames = classnames(classes.indicator, className, {
    [classes.excess]: growth === GrowthType.Excess,
    [classes.savings]: growth === GrowthType.Savings
  });
  return /* @__PURE__ */ React.createElement(Typography, { className: classNames, component: "span", ...extraProps }, formatter ? formatter(change, { absolute: true }) : change.ratio, growth === GrowthType.Excess && /* @__PURE__ */ React.createElement(ArrowDropUp, { "aria-label": "excess" }), growth === GrowthType.Savings && /* @__PURE__ */ React.createElement(ArrowDropDown, { "aria-label": "savings" }));
};

export { CostGrowthIndicator };
//# sourceMappingURL=CostGrowthIndicator.esm.js.map
