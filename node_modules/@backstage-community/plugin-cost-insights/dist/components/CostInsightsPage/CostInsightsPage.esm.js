import React, { useState, useMemo, useCallback, useEffect } from 'react';
import Box from '@material-ui/core/Box';
import Collapse from '@material-ui/core/Collapse';
import Container from '@material-ui/core/Container';
import Divider from '@material-ui/core/Divider';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import Alert from '@material-ui/lab/Alert';
import { costInsightsApiRef } from '../../api/CostInsightsApi.esm.js';
import { ActionItems } from '../ActionItems/ActionItems.esm.js';
import 'classnames';
import '@material-ui/core/Card';
import '@material-ui/core/CardHeader';
import { useConfig } from '../../hooks/useConfig.esm.js';
import { useCurrency } from '../../hooks/useCurrency.esm.js';
import { useFilters } from '../../hooks/useFilters.esm.js';
import { useGroups } from '../../hooks/useGroups.esm.js';
import { useLoading } from '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import { useLastCompleteBillingDate } from '../../hooks/useLastCompleteBillingDate.esm.js';
import { useSubtleTypographyStyles } from '../../utils/styles.esm.js';
import { AlertInsights } from '../AlertInsights/AlertInsights.esm.js';
import { CostInsightsLayout } from '../CostInsightsLayout/CostInsightsLayout.esm.js';
import { CopyUrlToClipboard } from '../CopyUrlToClipboard/CopyUrlToClipboard.esm.js';
import { CurrencySelect } from '../CurrencySelect/CurrencySelect.esm.js';
import { WhyCostsMatter } from '../WhyCostsMatter/WhyCostsMatter.esm.js';
import { CostInsightsHeaderNoGroups, CostInsightsHeader } from '../CostInsightsHeader/CostInsightsHeader.esm.js';
import { CostInsightsNavigation } from '../CostInsightsNavigation/CostInsightsNavigation.esm.js';
import { CostOverviewCard } from '../CostOverviewCard/CostOverviewCard.esm.js';
import { ProductInsights } from '../ProductInsights/ProductInsights.esm.js';
import { mapLoadingToProps } from './selector.esm.js';
import { ProjectSelect } from '../ProjectSelect/ProjectSelect.esm.js';
import { intervalsOf } from '../../utils/duration.esm.js';
import { isAlertActive, isAlertSnoozed, isAlertAccepted, isAlertDismissed } from '../../utils/alerts.esm.js';
import { Progress } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';

const CostInsightsPage = () => {
  const classes = useSubtleTypographyStyles();
  const client = useApi(costInsightsApiRef);
  const config = useConfig();
  const groups = useGroups();
  const lastCompleteBillingDate = useLastCompleteBillingDate();
  const [alerts, setAlerts] = useState([]);
  const [currency, setCurrency] = useCurrency();
  const [projects, setProjects] = useState(null);
  const [products, setProducts] = useState(null);
  const [dailyCost, setDailyCost] = useState(null);
  const [metricData, setMetricData] = useState(null);
  const [error, setError] = useState(null);
  const { pageFilters, setPageFilters } = useFilters((p) => p);
  const active = useMemo(() => alerts.filter(isAlertActive), [alerts]);
  const snoozed = useMemo(() => alerts.filter(isAlertSnoozed), [alerts]);
  const accepted = useMemo(() => alerts.filter(isAlertAccepted), [alerts]);
  const dismissed = useMemo(() => alerts.filter(isAlertDismissed), [alerts]);
  const isProductsDisplayed = !!config.products?.length;
  const isActionItemsDisplayed = !!active.length;
  const isAlertInsightsDisplayed = !!alerts.length;
  const {
    loadingActions,
    loadingGroups,
    loadingBillingDate,
    loadingInitial,
    dispatchInitial,
    dispatchInsights,
    dispatchNone,
    dispatchReset
  } = useLoading(mapLoadingToProps);
  const dispatchLoadingInitial = useCallback(dispatchInitial, []);
  const dispatchLoadingInsights = useCallback(dispatchInsights, []);
  const dispatchLoadingNone = useCallback(dispatchNone, []);
  const dispatchLoadingReset = useCallback(dispatchReset, []);
  const setProject = (project) => setPageFilters({
    ...pageFilters,
    project: project === "all" ? null : project
  });
  useEffect(() => {
    async function getInsights() {
      setError(null);
      try {
        if (pageFilters.group) {
          dispatchLoadingInsights(true);
          const intervals = intervalsOf(
            pageFilters.duration,
            lastCompleteBillingDate
          );
          const [
            fetchedProjects,
            fetchedAlerts,
            fetchedMetricData,
            fetchedDailyCost
          ] = await Promise.all([
            client.getGroupProjects(pageFilters.group),
            client.getAlerts(pageFilters.group),
            pageFilters.metric ? client.getDailyMetricData(pageFilters.metric, intervals) : null,
            pageFilters.project ? client.getProjectDailyCost(pageFilters.project, intervals) : client.getGroupDailyCost(pageFilters.group, intervals)
          ]);
          setProjects(fetchedProjects);
          setAlerts(fetchedAlerts);
          setMetricData(fetchedMetricData);
          setDailyCost(fetchedDailyCost);
        } else {
          dispatchLoadingNone(loadingActions);
        }
      } catch (e) {
        setError(e);
        dispatchLoadingNone(loadingActions);
      } finally {
        dispatchLoadingInitial(false);
        dispatchLoadingInsights(false);
      }
    }
    if (!(loadingGroups && loadingBillingDate)) {
      getInsights();
    }
  }, [
    client,
    pageFilters,
    loadingActions,
    loadingGroups,
    loadingBillingDate,
    dispatchLoadingInsights,
    dispatchLoadingInitial,
    dispatchLoadingNone,
    lastCompleteBillingDate
  ]);
  if (loadingInitial) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.message);
  }
  if (!pageFilters.group) {
    return /* @__PURE__ */ React.createElement(CostInsightsLayout, { groups }, /* @__PURE__ */ React.createElement(Box, { textAlign: "right" }, /* @__PURE__ */ React.createElement(CopyUrlToClipboard, null)), /* @__PURE__ */ React.createElement(Container, { maxWidth: "lg" }, /* @__PURE__ */ React.createElement(CostInsightsHeaderNoGroups, null)), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(Container, { maxWidth: "lg" }, /* @__PURE__ */ React.createElement(WhyCostsMatter, null)));
  }
  if (!dailyCost) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, `Error: Could not fetch cost insights data for team ${pageFilters.group}`);
  }
  const onProjectSelect = (project) => {
    setProject(project);
    dispatchLoadingReset(loadingActions);
  };
  const CostOverviewBanner = () => /* @__PURE__ */ React.createElement(
    Box,
    {
      px: 3,
      pt: 6,
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      minHeight: 40
    },
    /* @__PURE__ */ React.createElement(Box, null, /* @__PURE__ */ React.createElement(Typography, { variant: "h4" }, "Cost Overview"), /* @__PURE__ */ React.createElement(Typography, { classes }, "Billing data as of ", lastCompleteBillingDate)),
    /* @__PURE__ */ React.createElement(Box, { display: "flex" }, /* @__PURE__ */ React.createElement(Box, { mr: 1 }, /* @__PURE__ */ React.createElement(
      CurrencySelect,
      {
        currency,
        currencies: config.currencies,
        onSelect: setCurrency
      }
    )), /* @__PURE__ */ React.createElement(
      ProjectSelect,
      {
        project: pageFilters.project,
        projects: projects || [],
        onSelect: onProjectSelect
      }
    ))
  );
  return /* @__PURE__ */ React.createElement(CostInsightsLayout, { groups }, /* @__PURE__ */ React.createElement(Grid, { container: true, wrap: "nowrap" }, (isProductsDisplayed || isActionItemsDisplayed) && /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(Box, { position: "sticky", top: 20 }, /* @__PURE__ */ React.createElement(
    CostInsightsNavigation,
    {
      products,
      alerts: active.length
    }
  ))), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(
    Box,
    {
      display: "flex",
      flexDirection: "row",
      justifyContent: "flex-end",
      mb: 2
    },
    /* @__PURE__ */ React.createElement(CopyUrlToClipboard, null)
  ), /* @__PURE__ */ React.createElement(Container, { maxWidth: "lg", disableGutters: true }, /* @__PURE__ */ React.createElement(Grid, { container: true, direction: "column" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(
    CostInsightsHeader,
    {
      groupId: pageFilters.group,
      groups,
      hasCostData: !!dailyCost.aggregation.length,
      alerts: active.length
    }
  )), /* @__PURE__ */ React.createElement(Collapse, { in: isActionItemsDisplayed, enter: false }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(Box, { px: 3, py: 6 }, /* @__PURE__ */ React.createElement(
    ActionItems,
    {
      active,
      snoozed,
      accepted,
      dismissed
    }
  ))), /* @__PURE__ */ React.createElement(Divider, null)), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(CostOverviewBanner, null)), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(Box, { px: 3, py: 6 }, !!dailyCost.aggregation.length && /* @__PURE__ */ React.createElement(
    CostOverviewCard,
    {
      dailyCostData: dailyCost,
      metricData
    }
  ), /* @__PURE__ */ React.createElement(WhyCostsMatter, null))), /* @__PURE__ */ React.createElement(Collapse, { in: isAlertInsightsDisplayed, enter: false }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(Box, { px: 6, py: 6, mx: -3, bgcolor: "alertBackground" }, /* @__PURE__ */ React.createElement(
    AlertInsights,
    {
      group: pageFilters.group,
      active,
      snoozed,
      accepted,
      dismissed,
      onChange: setAlerts
    }
  )))), !isAlertInsightsDisplayed && isProductsDisplayed && /* @__PURE__ */ React.createElement(Divider, null), isProductsDisplayed && /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(Box, { px: 3, py: 6 }, /* @__PURE__ */ React.createElement(
    ProductInsights,
    {
      group: pageFilters.group,
      project: pageFilters.project,
      products: config.products,
      onLoaded: setProducts
    }
  ))))))));
};

export { CostInsightsPage };
//# sourceMappingURL=CostInsightsPage.esm.js.map
