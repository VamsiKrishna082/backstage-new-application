{"version":3,"file":"CostInsightsPage.esm.js","sources":["../../../src/components/CostInsightsPage/CostInsightsPage.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { default as MaterialAlert } from '@material-ui/lab/Alert';\nimport { costInsightsApiRef } from '../../api';\nimport { ActionItems } from '../ActionItems';\nimport { AlertInsights } from '../AlertInsights';\nimport { CostInsightsLayout } from '../CostInsightsLayout';\nimport { CopyUrlToClipboard } from '../CopyUrlToClipboard';\nimport { CurrencySelect } from '../CurrencySelect';\nimport { WhyCostsMatter } from '../WhyCostsMatter';\nimport {\n  CostInsightsHeader,\n  CostInsightsHeaderNoGroups,\n} from '../CostInsightsHeader';\nimport { CostInsightsNavigation } from '../CostInsightsNavigation';\nimport { CostOverviewCard } from '../CostOverviewCard';\nimport { ProductInsights } from '../ProductInsights';\n/* https://github.com/backstage/backstage/issues/2574 */\n// import { CostInsightsSupportButton } from '../CostInsightsSupportButton';\nimport {\n  useConfig,\n  useCurrency,\n  useFilters,\n  useGroups,\n  useLastCompleteBillingDate,\n  useLoading,\n} from '../../hooks';\nimport { Alert } from '../../types';\nimport {\n  Cost,\n  Maybe,\n  MetricData,\n  Product,\n  Project,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { mapLoadingToProps } from './selector';\nimport { ProjectSelect } from '../ProjectSelect';\nimport { intervalsOf } from '../../utils/duration';\nimport { useSubtleTypographyStyles } from '../../utils/styles';\nimport {\n  isAlertActive,\n  isAlertAccepted,\n  isAlertDismissed,\n  isAlertSnoozed,\n} from '../../utils/alerts';\n\nimport { Progress } from '@backstage/core-components';\nimport { useApi } from '@backstage/core-plugin-api';\n\nexport const CostInsightsPage = () => {\n  const classes = useSubtleTypographyStyles();\n  const client = useApi(costInsightsApiRef);\n  const config = useConfig();\n  const groups = useGroups();\n  const lastCompleteBillingDate = useLastCompleteBillingDate();\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  const [currency, setCurrency] = useCurrency();\n  const [projects, setProjects] = useState<Maybe<Project[]>>(null);\n  const [products, setProducts] = useState<Maybe<Product[]>>(null);\n  const [dailyCost, setDailyCost] = useState<Maybe<Cost>>(null);\n  const [metricData, setMetricData] = useState<Maybe<MetricData>>(null);\n  const [error, setError] = useState<Maybe<Error>>(null);\n\n  const { pageFilters, setPageFilters } = useFilters(p => p);\n\n  const active = useMemo(() => alerts.filter(isAlertActive), [alerts]);\n  const snoozed = useMemo(() => alerts.filter(isAlertSnoozed), [alerts]);\n  const accepted = useMemo(() => alerts.filter(isAlertAccepted), [alerts]);\n  const dismissed = useMemo(() => alerts.filter(isAlertDismissed), [alerts]);\n\n  const isProductsDisplayed = !!config.products?.length;\n  const isActionItemsDisplayed = !!active.length;\n  const isAlertInsightsDisplayed = !!alerts.length;\n\n  const {\n    loadingActions,\n    loadingGroups,\n    loadingBillingDate,\n    loadingInitial,\n    dispatchInitial,\n    dispatchInsights,\n    dispatchNone,\n    dispatchReset,\n  } = useLoading(mapLoadingToProps);\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  // The dispatchLoading functions are derived from loading state using mapLoadingToProps, to\n  // provide nicer props for the component. These are re-derived whenever loading state changes,\n  // which causes an infinite loop as product panels load and re-trigger the useEffect below.\n  // Since the functions don't change, we can memoize - but we trigger the same loop if we satisfy\n  // exhaustive-deps by including the function itself in dependencies.\n\n  const dispatchLoadingInitial = useCallback(dispatchInitial, []);\n  const dispatchLoadingInsights = useCallback(dispatchInsights, []);\n  const dispatchLoadingNone = useCallback(dispatchNone, []);\n  const dispatchLoadingReset = useCallback(dispatchReset, []);\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  const setProject = (project: Maybe<string>) =>\n    setPageFilters({\n      ...pageFilters,\n      project: project === 'all' ? null : project,\n    });\n\n  useEffect(() => {\n    async function getInsights() {\n      setError(null);\n      try {\n        if (pageFilters.group) {\n          dispatchLoadingInsights(true);\n          const intervals = intervalsOf(\n            pageFilters.duration,\n            lastCompleteBillingDate,\n          );\n          const [\n            fetchedProjects,\n            fetchedAlerts,\n            fetchedMetricData,\n            fetchedDailyCost,\n          ] = await Promise.all([\n            client.getGroupProjects(pageFilters.group),\n            client.getAlerts(pageFilters.group),\n            pageFilters.metric\n              ? client.getDailyMetricData(pageFilters.metric, intervals)\n              : null,\n            pageFilters.project\n              ? client.getProjectDailyCost(pageFilters.project, intervals)\n              : client.getGroupDailyCost(pageFilters.group, intervals),\n          ]);\n          setProjects(fetchedProjects);\n          setAlerts(fetchedAlerts);\n          setMetricData(fetchedMetricData);\n          setDailyCost(fetchedDailyCost);\n        } else {\n          dispatchLoadingNone(loadingActions);\n        }\n      } catch (e) {\n        setError(e);\n        dispatchLoadingNone(loadingActions);\n      } finally {\n        dispatchLoadingInitial(false);\n        dispatchLoadingInsights(false);\n      }\n    }\n\n    // Wait for metadata to finish loading\n    if (!(loadingGroups && loadingBillingDate)) {\n      getInsights();\n    }\n  }, [\n    client,\n    pageFilters,\n    loadingActions,\n    loadingGroups,\n    loadingBillingDate,\n    dispatchLoadingInsights,\n    dispatchLoadingInitial,\n    dispatchLoadingNone,\n    lastCompleteBillingDate,\n  ]);\n\n  if (loadingInitial) {\n    return <Progress />;\n  }\n\n  if (error) {\n    return <MaterialAlert severity=\"error\">{error.message}</MaterialAlert>;\n  }\n\n  // Loaded but no groups found for the user\n  if (!pageFilters.group) {\n    return (\n      <CostInsightsLayout groups={groups}>\n        <Box textAlign=\"right\">\n          <CopyUrlToClipboard />\n          {/* <CostInsightsSupportButton /> */}\n        </Box>\n        <Container maxWidth=\"lg\">\n          <CostInsightsHeaderNoGroups />\n        </Container>\n        <Divider />\n        <Container maxWidth=\"lg\">\n          <WhyCostsMatter />\n        </Container>\n      </CostInsightsLayout>\n    );\n  }\n\n  if (!dailyCost) {\n    return (\n      <MaterialAlert severity=\"error\">{`Error: Could not fetch cost insights data for team ${pageFilters.group}`}</MaterialAlert>\n    );\n  }\n\n  const onProjectSelect = (project: Maybe<string>) => {\n    setProject(project);\n    dispatchLoadingReset(loadingActions);\n  };\n\n  const CostOverviewBanner = () => (\n    <Box\n      px={3}\n      pt={6}\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      minHeight={40}\n    >\n      <Box>\n        <Typography variant=\"h4\">Cost Overview</Typography>\n        <Typography classes={classes}>\n          Billing data as of {lastCompleteBillingDate}\n        </Typography>\n      </Box>\n      <Box display=\"flex\">\n        <Box mr={1}>\n          <CurrencySelect\n            currency={currency}\n            currencies={config.currencies}\n            onSelect={setCurrency}\n          />\n        </Box>\n        <ProjectSelect\n          project={pageFilters.project}\n          projects={projects || []}\n          onSelect={onProjectSelect}\n        />\n      </Box>\n    </Box>\n  );\n\n  return (\n    <CostInsightsLayout groups={groups}>\n      <Grid container wrap=\"nowrap\">\n        {(isProductsDisplayed || isActionItemsDisplayed) && (\n          <Grid item>\n            <Box position=\"sticky\" top={20}>\n              <CostInsightsNavigation\n                products={products}\n                alerts={active.length}\n              />\n            </Box>\n          </Grid>\n        )}\n        <Grid item xs>\n          <Box\n            display=\"flex\"\n            flexDirection=\"row\"\n            justifyContent=\"flex-end\"\n            mb={2}\n          >\n            <CopyUrlToClipboard />\n            {/* <CostInsightsSupportButton /> */}\n          </Box>\n          <Container maxWidth=\"lg\" disableGutters>\n            <Grid container direction=\"column\">\n              <Grid item xs>\n                <CostInsightsHeader\n                  groupId={pageFilters.group}\n                  groups={groups}\n                  hasCostData={!!dailyCost.aggregation.length}\n                  alerts={active.length}\n                />\n              </Grid>\n              <Collapse in={isActionItemsDisplayed} enter={false}>\n                <Grid item xs>\n                  <Box px={3} py={6}>\n                    <ActionItems\n                      active={active}\n                      snoozed={snoozed}\n                      accepted={accepted}\n                      dismissed={dismissed}\n                    />\n                  </Box>\n                </Grid>\n                <Divider />\n              </Collapse>\n              <Grid item xs>\n                <CostOverviewBanner />\n              </Grid>\n              <Grid item xs>\n                <Box px={3} py={6}>\n                  {!!dailyCost.aggregation.length && (\n                    <CostOverviewCard\n                      dailyCostData={dailyCost}\n                      metricData={metricData}\n                    />\n                  )}\n                  <WhyCostsMatter />\n                </Box>\n              </Grid>\n              <Collapse in={isAlertInsightsDisplayed} enter={false}>\n                <Grid item xs>\n                  <Box px={6} py={6} mx={-3} bgcolor=\"alertBackground\">\n                    <AlertInsights\n                      group={pageFilters.group}\n                      active={active}\n                      snoozed={snoozed}\n                      accepted={accepted}\n                      dismissed={dismissed}\n                      onChange={setAlerts}\n                    />\n                  </Box>\n                </Grid>\n              </Collapse>\n              {!isAlertInsightsDisplayed && isProductsDisplayed && <Divider />}\n              {isProductsDisplayed && (\n                <Grid item xs>\n                  <Box px={3} py={6}>\n                    <ProductInsights\n                      group={pageFilters.group}\n                      project={pageFilters.project}\n                      products={config.products}\n                      onLoaded={setProducts}\n                    />\n                  </Box>\n                </Grid>\n              )}\n            </Grid>\n          </Container>\n        </Grid>\n      </Grid>\n    </CostInsightsLayout>\n  );\n};\n"],"names":["MaterialAlert"],"mappings":"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"}