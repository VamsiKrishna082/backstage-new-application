import React, { useState } from 'react';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { mapFiltersToProps, mapLoadingToProps } from './selector.esm.js';
import '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import { useFilters } from '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import { useLoading } from '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import { useCostInsightsTabsStyles } from '../../utils/styles.esm.js';

const CostInsightsTabs = ({ groups }) => {
  const classes = useCostInsightsTabsStyles();
  const [index] = useState(0);
  const [groupMenuEl, setGroupMenuEl] = useState(null);
  const { group, setGroup } = useFilters(mapFiltersToProps);
  const { loadingActions, dispatchReset } = useLoading(mapLoadingToProps);
  const openGroupMenu = (e) => setGroupMenuEl(e.currentTarget);
  const closeGroupMenu = () => setGroupMenuEl(null);
  const updateGroupFilterAndCloseMenu = (g) => () => {
    dispatchReset(loadingActions);
    closeGroupMenu();
    setGroup(g);
  };
  const renderTabLabel = () => /* @__PURE__ */ React.createElement("div", { className: classes.tabLabel }, /* @__PURE__ */ React.createElement(Typography, { className: classes.tabLabelText, variant: "overline" }, `${groups.length} teams`), /* @__PURE__ */ React.createElement(ExpandMoreIcon, { fontSize: "small" }));
  const hasAtLeastTwoGroups = groups.length >= 2;
  if (!hasAtLeastTwoGroups) return null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Tabs,
    {
      className: `cost-insights-tabs ${classes.tabs}`,
      "data-testid": "cost-insights-tabs",
      classes: { indicator: classes.indicator },
      value: index
    },
    /* @__PURE__ */ React.createElement(
      Tab,
      {
        className: classes.tab,
        "data-testid": "cost-insights-groups-tab",
        key: "cost-insights-groups-tab",
        label: renderTabLabel(),
        onClick: openGroupMenu,
        component: "button"
      }
    )
  ), /* @__PURE__ */ React.createElement(
    Menu,
    {
      id: "group-menu",
      "data-testid": "group-menu",
      className: classes.menu,
      getContentAnchorEl: null,
      anchorEl: groupMenuEl,
      keepMounted: true,
      open: Boolean(groupMenuEl),
      onClose: closeGroupMenu,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "left"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "left"
      }
    },
    groups.map((g) => /* @__PURE__ */ React.createElement(
      MenuItem,
      {
        className: classes.menuItem,
        classes: { selected: classes.menuItemSelected },
        selected: g.id === group,
        key: g.id,
        "data-testid": g.id,
        onClick: updateGroupFilterAndCloseMenu(g)
      },
      g.name ?? g.id
    ))
  ));
};

export { CostInsightsTabs };
//# sourceMappingURL=CostInsightsTabs.esm.js.map
