{"version":3,"file":"CostOverviewBreakdownChart.esm.js","sources":["../../../src/components/CostOverviewCard/CostOverviewBreakdownChart.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useState } from 'react';\nimport { DateTime } from 'luxon';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport { emphasize } from '@material-ui/core/styles/colorManipulator';\nimport Typography from '@material-ui/core/Typography';\nimport { useTheme } from '@material-ui/core/styles';\nimport { default as FullScreenIcon } from '@material-ui/icons/Fullscreen';\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip as RechartsTooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { DEFAULT_DATE_FORMAT, CostInsightsTheme } from '../../types';\nimport { Cost } from '@backstage-community/plugin-cost-insights-common';\nimport {\n  BarChartLegend,\n  BarChartTooltip as Tooltip,\n  BarChartTooltipItem as TooltipItem,\n} from '../BarChart';\nimport {\n  formatGraphValue,\n  isInvalid,\n  overviewGraphTickFormatter,\n} from '../../utils/graphs';\nimport { useCostOverviewStyles as useStyles } from '../../utils/styles';\nimport { useConfig, useFilters, useLastCompleteBillingDate } from '../../hooks';\nimport { mapFiltersToProps } from './selector';\nimport { getPreviousPeriodTotalCost } from '../../utils/change';\nimport { formatPeriod } from '../../utils/formatters';\nimport { aggregationSum } from '../../utils/sum';\nimport { BarChartLegendOptions } from '../BarChart';\nimport { TooltipRenderer } from '../../types';\n\nexport type CostOverviewBreakdownChartProps = {\n  costBreakdown: Cost[];\n  responsive?: boolean;\n};\n\nconst LOW_COST_THRESHOLD = 0.1;\n\nexport const CostOverviewBreakdownChart = ({\n  costBreakdown,\n  responsive = true,\n}: CostOverviewBreakdownChartProps) => {\n  const theme = useTheme<CostInsightsTheme>();\n  const classes = useStyles(theme);\n  const { baseCurrency } = useConfig();\n  const lastCompleteBillingDate = useLastCompleteBillingDate();\n  const { duration } = useFilters(mapFiltersToProps);\n  const [isExpanded, setExpanded] = useState(false);\n\n  if (!costBreakdown) {\n    return null;\n  }\n\n  const flattenedAggregation = costBreakdown\n    .map(cost => cost.aggregation)\n    .flat();\n\n  const totalCost = aggregationSum(flattenedAggregation);\n\n  const previousPeriodTotal = getPreviousPeriodTotalCost(\n    flattenedAggregation,\n    duration,\n    lastCompleteBillingDate,\n  );\n  const currentPeriodTotal = totalCost - previousPeriodTotal;\n  const canExpand = costBreakdown.length >= 8;\n  const otherCategoryIds: string[] = [];\n\n  const breakdownsByDate = costBreakdown.reduce(\n    (breakdownByDate, breakdown) => {\n      const breakdownTotal = aggregationSum(breakdown.aggregation);\n      // Group breakdown items with less than 10% of the total cost into \"Other\" category if needed\n      const isOtherCategory =\n        canExpand && breakdownTotal < totalCost * LOW_COST_THRESHOLD;\n\n      const updatedBreakdownByDate = { ...breakdownByDate };\n      if (isOtherCategory) {\n        otherCategoryIds.push(breakdown.id);\n      }\n      breakdown.aggregation.forEach(curAggregation => {\n        const costsForDate = updatedBreakdownByDate[curAggregation.date] || {};\n\n        updatedBreakdownByDate[curAggregation.date] = {\n          ...costsForDate,\n          [breakdown.id]:\n            (costsForDate[breakdown.id] || 0) + curAggregation.amount,\n        };\n      });\n\n      return updatedBreakdownByDate;\n    },\n    {} as Record<string, Record<string, number>>,\n  );\n\n  const chartData: Record<string, number>[] = Object.keys(breakdownsByDate)\n    .map(date => {\n      const costsForDate = Object.keys(breakdownsByDate[date]).reduce(\n        (dateCosts, breakdown) => {\n          // Group costs for items that belong to 'Other' in the chart.\n          const cost = breakdownsByDate[date][breakdown];\n          const breakdownCost =\n            !isExpanded && otherCategoryIds.includes(breakdown)\n              ? { Other: (dateCosts.Other || 0) + cost }\n              : { [breakdown]: cost };\n          return { ...dateCosts, ...breakdownCost };\n        },\n        {} as Record<string, number>,\n      );\n      return {\n        ...costsForDate,\n        date: Date.parse(date),\n      };\n    })\n    .sort((a, b) => a.date - b.date);\n\n  const sortedBreakdowns = costBreakdown.sort(\n    (a, b) => aggregationSum(a.aggregation) - aggregationSum(b.aggregation),\n  );\n\n  const renderAreas = () => {\n    const separatedBreakdowns = sortedBreakdowns\n      // Check that the breakdown is a separate group and hasn't been added to 'Other'\n      .filter(\n        breakdown =>\n          breakdown.id !== 'Other' && !otherCategoryIds.includes(breakdown.id),\n      )\n      .map(breakdown => breakdown.id);\n    // Keep 'Other' category at the bottom of the stack\n    const breakdownsToDisplay = isExpanded\n      ? sortedBreakdowns.map(breakdown => breakdown.id)\n      : ['Other', ...separatedBreakdowns];\n\n    return breakdownsToDisplay.map((breakdown, i) => {\n      // Logic to handle case where there are more items than data viz colors.\n      const color =\n        theme.palette.dataViz[\n          (breakdownsToDisplay.length - 1 - i) %\n            (theme.palette.dataViz.length - 1)\n        ];\n      return (\n        <Area\n          key={breakdown}\n          dataKey={breakdown}\n          isAnimationActive={false}\n          stackId=\"1\"\n          stroke={color}\n          fill={color}\n          onClick={() => setExpanded(true)}\n          style={{\n            cursor:\n              breakdown === 'Other' && !isExpanded ? 'pointer' : undefined,\n          }}\n        />\n      );\n    });\n  };\n\n  const tooltipRenderer: TooltipRenderer = ({ label, payload = [] }) => {\n    if (isInvalid({ label, payload })) return null;\n\n    const date =\n      typeof label === 'number'\n        ? DateTime.fromMillis(label)\n        : DateTime.fromISO(label!);\n    const dateTitle = date.toUTC().toFormat(DEFAULT_DATE_FORMAT);\n    const formatGraphValueWith = formatGraphValue(baseCurrency);\n    const items = payload.map((p, i) => ({\n      label: p.dataKey as string,\n      value: formatGraphValueWith(Number(p.value), i),\n      fill: p.color!,\n    }));\n    const expandText = (\n      <Box>\n        <Divider\n          style={{\n            backgroundColor: emphasize(theme.palette.divider, 1),\n            margin: '10px 0',\n          }}\n        />\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <FullScreenIcon />\n          <Typography>Click to expand</Typography>\n        </Box>\n      </Box>\n    );\n    return (\n      <Tooltip title={dateTitle}>\n        {items.reverse().map((item, index) => (\n          <TooltipItem key={`${item.label}-${index}`} item={item} />\n        ))}\n        {canExpand && !isExpanded ? expandText : null}\n      </Tooltip>\n    );\n  };\n\n  const options: Partial<BarChartLegendOptions> = {\n    previousName: formatPeriod(duration, lastCompleteBillingDate, false),\n    currentName: formatPeriod(duration, lastCompleteBillingDate, true),\n    hideMarker: true,\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Box display=\"flex\" flexDirection=\"row\">\n        <BarChartLegend\n          costStart={previousPeriodTotal}\n          costEnd={currentPeriodTotal}\n          options={options}\n        />\n      </Box>\n      <ResponsiveContainer\n        width={responsive ? '100%' : classes.container.width}\n        height={classes.container.height}\n      >\n        <AreaChart\n          data={chartData}\n          margin={{\n            top: 16,\n            right: 30,\n            bottom: 40,\n          }}\n        >\n          <CartesianGrid stroke={classes.cartesianGrid.stroke} />\n          <XAxis\n            dataKey=\"date\"\n            domain={['dataMin', 'dataMax']}\n            tickFormatter={overviewGraphTickFormatter}\n            tickCount={6}\n            type=\"number\"\n            stroke={classes.axis.fill}\n          />\n          <YAxis\n            domain={[() => 0, 'dataMax']}\n            tick={{ fill: classes.axis.fill }}\n            tickFormatter={formatGraphValue(baseCurrency)}\n            width={classes.yAxis.width}\n          />\n          {renderAreas()}\n          <RechartsTooltip content={tooltipRenderer} animationDuration={100} />\n        </AreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n"],"names":["useStyles","Tooltip","TooltipItem","RechartsTooltip"],"mappings":"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"}