import React, { useState, useEffect } from 'react';
import Box from '@material-ui/core/Box';
import { capitalize } from '@material-ui/core/utils';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Divider from '@material-ui/core/Divider';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import { useTheme } from '@material-ui/core/styles';
import { CostOverviewChart } from './CostOverviewChart.esm.js';
import { CostOverviewBreakdownChart } from './CostOverviewBreakdownChart.esm.js';
import { CostOverviewHeader } from './CostOverviewHeader.esm.js';
import { MetricSelect } from '../MetricSelect/MetricSelect.esm.js';
import { PeriodSelect } from '../PeriodSelect/PeriodSelect.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import { useFilters } from '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import { mapFiltersToProps } from './selector.esm.js';
import { DefaultNavigation } from '../../utils/navigation.esm.js';
import { findAlways } from '../../utils/assert.esm.js';
import { useOverviewTabsStyles } from '../../utils/styles.esm.js';
import { ScrollAnchor } from '../../utils/scroll.esm.js';

const CostOverviewCard = ({
  dailyCostData,
  metricData
}) => {
  const theme = useTheme();
  const styles = useOverviewTabsStyles(theme);
  const config = useConfig();
  const [tabIndex, setTabIndex] = useState(0);
  const { setDuration, setProject, setMetric, ...filters } = useFilters(mapFiltersToProps);
  useEffect(() => {
    const lastIndex = Object.keys(dailyCostData.groupedCosts ?? {}).length;
    if (tabIndex > lastIndex) {
      setTabIndex(0);
    }
  }, [dailyCostData, tabIndex, setTabIndex]);
  const metric = filters.metric ? findAlways(config.metrics, (m) => m.kind === filters.metric) : null;
  const breakdownTabs = Object.keys(dailyCostData.groupedCosts ?? {}).map(
    (key) => ({
      id: key,
      label: `Breakdown by ${key}`,
      title: `Cloud Cost By ${capitalize(key)}`
    })
  );
  const tabs = [
    { id: "overview", label: "Total cost", title: "Cloud Cost" }
  ].concat(breakdownTabs);
  const safeTabIndex = tabIndex > tabs.length - 1 ? 0 : tabIndex;
  const OverviewTabs = () => {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        indicatorColor: "primary",
        onChange: (_, index) => setTabIndex(index),
        value: safeTabIndex
      },
      tabs.map((tab, index) => /* @__PURE__ */ React.createElement(
        Tab,
        {
          className: styles.default,
          label: tab.label,
          key: tab.id,
          value: index,
          classes: { selected: styles.selected }
        }
      ))
    ));
  };
  const showMetricSelect = metricData && config.metrics.length && safeTabIndex === 0;
  return /* @__PURE__ */ React.createElement(Card, { style: { position: "relative", overflow: "visible" } }, /* @__PURE__ */ React.createElement(ScrollAnchor, { id: DefaultNavigation.CostOverviewCard }), /* @__PURE__ */ React.createElement(CardContent, null, dailyCostData.groupedCosts && /* @__PURE__ */ React.createElement(OverviewTabs, null), /* @__PURE__ */ React.createElement(CostOverviewHeader, { title: tabs[safeTabIndex].title }, /* @__PURE__ */ React.createElement(PeriodSelect, { duration: filters.duration, onSelect: setDuration })), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(Box, { ml: 2, my: 1, display: "flex", flexDirection: "column" }, safeTabIndex === 0 ? /* @__PURE__ */ React.createElement(
    CostOverviewChart,
    {
      dailyCostData,
      metric,
      metricData
    }
  ) : /* @__PURE__ */ React.createElement(
    CostOverviewBreakdownChart,
    {
      costBreakdown: dailyCostData.groupedCosts[tabs[safeTabIndex].id]
    }
  )), /* @__PURE__ */ React.createElement(Box, { display: "flex", justifyContent: "flex-end", alignItems: "center" }, showMetricSelect && /* @__PURE__ */ React.createElement(
    MetricSelect,
    {
      metric: filters.metric,
      metrics: config.metrics,
      onSelect: setMetric
    }
  ))));
};

export { CostOverviewCard };
//# sourceMappingURL=CostOverviewCard.esm.js.map
