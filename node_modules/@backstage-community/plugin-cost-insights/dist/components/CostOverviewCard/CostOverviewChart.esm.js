import React from 'react';
import { DateTime } from 'luxon';
import Box from '@material-ui/core/Box';
import { useTheme } from '@material-ui/core/styles';
import { ResponsiveContainer, ComposedChart, CartesianGrid, XAxis, YAxis, Area, Line, Tooltip } from 'recharts';
import '../../types/Alert.esm.js';
import { DEFAULT_DATE_FORMAT } from '../../types/DateFormat.esm.js';
import '@material-ui/core/Typography';
import { useCostOverviewStyles } from '../../utils/styles.esm.js';
import '@material-ui/core/Paper';
import '@material-ui/core/Slide';
import '@material-ui/icons/ChevronLeft';
import '@material-ui/icons/ChevronRight';
import '../BarChart/BarChartStepperButton.esm.js';
import '@material-ui/core/ButtonBase';
import { BarChartTooltip } from '../BarChart/BarChartTooltip.esm.js';
import { BarChartTooltipItem } from '../BarChart/BarChartTooltipItem.esm.js';
import 'pluralize';
import '../../utils/duration.esm.js';
import { aggregationSort } from '../../utils/sort.esm.js';
import { overviewGraphTickFormatter, isInvalid, formatGraphValue } from '../../utils/graphs.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import '@material-ui/core/Tooltip';
import '@material-ui/icons/Lens';
import '@material-ui/icons/HelpOutlineOutlined';
import { groupByDate, trendFrom } from '../../utils/charts.esm.js';
import { CostOverviewLegend } from './CostOverviewLegend.esm.js';

const CostOverviewChart = ({
  dailyCostData,
  metric,
  metricData,
  responsive = true
}) => {
  const theme = useTheme();
  const styles = useCostOverviewStyles(theme);
  const { baseCurrency, hideTrendLine } = useConfig();
  const data = {
    dailyCost: {
      dataKey: "dailyCost",
      name: `Daily Cost`,
      format: "currency",
      data: dailyCostData
    },
    metric: {
      dataKey: metric?.kind ?? "Unknown",
      name: metric?.name ?? "Unknown",
      format: metricData?.format ?? "number",
      data: metricData
    }
  };
  const metricsByDate = data.metric.data ? data.metric.data.aggregation.reduce(groupByDate, {}) : {};
  const chartData = data.dailyCost.data.aggregation.slice().sort(aggregationSort).map((entry) => ({
    date: Date.parse(entry.date),
    trend: trendFrom(data.dailyCost.data.trendline, Date.parse(entry.date)),
    dailyCost: entry.amount,
    ...metric && data.metric.data ? { [data.metric.dataKey]: metricsByDate[`${entry.date}`] } : {}
  }));
  const tooltipRenderer = ({ label, payload = [] }) => {
    if (isInvalid({ label, payload })) return null;
    const dataKeys = [data.dailyCost.dataKey, data.metric.dataKey];
    const date = typeof label === "number" ? DateTime.fromMillis(label) : DateTime.fromISO(label);
    const title = date.toUTC().toFormat(DEFAULT_DATE_FORMAT);
    const formatGraphValueWith = formatGraphValue(baseCurrency);
    const items = payload.filter((p) => dataKeys.includes(p.dataKey)).map((p, i) => ({
      label: p.dataKey === data.dailyCost.dataKey ? data.dailyCost.name : data.metric.name,
      value: p.dataKey === data.dailyCost.dataKey ? formatGraphValueWith(Number(p.value), i, data.dailyCost.format) : formatGraphValueWith(Number(p.value), i, data.metric.format),
      fill: p.dataKey === data.dailyCost.dataKey ? theme.palette.blue : theme.palette.magenta
    }));
    return /* @__PURE__ */ React.createElement(BarChartTooltip, { title }, items.map((item, index) => /* @__PURE__ */ React.createElement(BarChartTooltipItem, { key: `${item.label}-${index}`, item })));
  };
  const localizedTickFormatter = formatGraphValue(baseCurrency);
  return /* @__PURE__ */ React.createElement(Box, { display: "flex", flexDirection: "column" }, /* @__PURE__ */ React.createElement(
    CostOverviewLegend,
    {
      dailyCostData,
      metric,
      metricData
    }
  ), /* @__PURE__ */ React.createElement(
    ResponsiveContainer,
    {
      width: responsive ? "100%" : styles.container.width,
      height: styles.container.height,
      className: "cost-overview-chart"
    },
    /* @__PURE__ */ React.createElement(ComposedChart, { margin: styles.chart.margin, data: chartData }, /* @__PURE__ */ React.createElement(CartesianGrid, { stroke: styles.cartesianGrid.stroke }), /* @__PURE__ */ React.createElement(
      XAxis,
      {
        dataKey: "date",
        domain: ["dataMin", "dataMax"],
        tickFormatter: overviewGraphTickFormatter,
        tickCount: 6,
        type: "number",
        stroke: styles.axis.fill
      }
    ), /* @__PURE__ */ React.createElement(
      YAxis,
      {
        domain: [() => 0, "dataMax"],
        tick: { fill: styles.axis.fill },
        tickFormatter: localizedTickFormatter,
        width: styles.yAxis.width,
        yAxisId: data.dailyCost.dataKey
      }
    ), metric && /* @__PURE__ */ React.createElement(
      YAxis,
      {
        domain: ["auto", "auto"],
        width: styles.yAxis.width,
        yAxisId: data.metric.dataKey,
        tickFormatter: (value, index) => localizedTickFormatter(value, index, data.metric.format),
        orientation: "right"
      }
    ), /* @__PURE__ */ React.createElement(
      Area,
      {
        dataKey: data.dailyCost.dataKey,
        isAnimationActive: false,
        fill: theme.palette.blue,
        fillOpacity: 0.4,
        stroke: "none",
        yAxisId: data.dailyCost.dataKey
      }
    ), !hideTrendLine && /* @__PURE__ */ React.createElement(
      Line,
      {
        activeDot: false,
        dataKey: "trend",
        dot: false,
        isAnimationActive: false,
        strokeWidth: 2,
        stroke: theme.palette.blue,
        yAxisId: data.dailyCost.dataKey
      }
    ), metric && /* @__PURE__ */ React.createElement(
      Line,
      {
        dataKey: data.metric.dataKey,
        dot: false,
        isAnimationActive: false,
        strokeWidth: 2,
        stroke: theme.palette.magenta,
        yAxisId: data.metric.dataKey
      }
    ), /* @__PURE__ */ React.createElement(Tooltip, { content: tooltipRenderer, animationDuration: 100 }))
  ));
};

export { CostOverviewChart };
//# sourceMappingURL=CostOverviewChart.esm.js.map
