import React from 'react';
import Box from '@material-ui/core/Box';
import { useTheme } from '@material-ui/core/styles';
import { LegendItem } from '../LegendItem/LegendItem.esm.js';
import '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import { useFilters } from '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import { useLastCompleteBillingDate } from '../../hooks/useLastCompleteBillingDate.esm.js';
import { getComparedChange, choose } from '../../utils/change.esm.js';
import { mapFiltersToProps } from './selector.esm.js';
import { formatChange } from '../../utils/formatters.esm.js';
import { CostGrowth } from '../CostGrowth/CostGrowth.esm.js';
import 'classnames';
import '@material-ui/core/Typography';
import '@material-ui/icons/ArrowDropUp';
import '@material-ui/icons/ArrowDropDown';
import '../../types/Alert.esm.js';
import '../../utils/styles.esm.js';

const CostOverviewLegend = ({
  dailyCostData,
  metric,
  metricData
}) => {
  const theme = useTheme();
  const { duration } = useFilters(mapFiltersToProps);
  const lastCompleteBillingDate = useLastCompleteBillingDate();
  const comparedChange = metricData ? getComparedChange(
    dailyCostData,
    metricData,
    duration,
    lastCompleteBillingDate
  ) : null;
  return /* @__PURE__ */ React.createElement(Box, { display: "flex", flexDirection: "row" }, dailyCostData.change && /* @__PURE__ */ React.createElement(Box, { mr: 2 }, /* @__PURE__ */ React.createElement(LegendItem, { title: "Cost Trend", markerColor: theme.palette.blue }, formatChange(dailyCostData.change))), metricData && metric && comparedChange && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Box, { mr: 2 }, /* @__PURE__ */ React.createElement(
    LegendItem,
    {
      title: `${metric.name} Trend`,
      markerColor: theme.palette.magenta
    },
    formatChange(metricData.change)
  )), /* @__PURE__ */ React.createElement(
    LegendItem,
    {
      title: choose(["Your Savings", "Your Excess"], comparedChange)
    },
    /* @__PURE__ */ React.createElement(CostGrowth, { change: comparedChange, duration })
  )));
};

export { CostOverviewLegend };
//# sourceMappingURL=CostOverviewLegend.esm.js.map
