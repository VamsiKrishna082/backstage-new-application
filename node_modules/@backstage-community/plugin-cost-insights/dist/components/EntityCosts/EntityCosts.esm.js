import React, { useCallback, useState, useEffect } from 'react';
import { CostOverviewCard } from '../CostOverviewCard/CostOverviewCard.esm.js';
import { ConfigProvider } from '../../hooks/useConfig.esm.js';
import { CurrencyProvider } from '../../hooks/useCurrency.esm.js';
import { FilterProvider, useFilters } from '../../hooks/useFilters.esm.js';
import { GroupsProvider } from '../../hooks/useGroups.esm.js';
import { LoadingProvider, useLoading } from '../../hooks/useLoading.esm.js';
import { ScrollProvider } from '../../hooks/useScroll.esm.js';
import { BillingDateProvider, useLastCompleteBillingDate } from '../../hooks/useLastCompleteBillingDate.esm.js';
import { CostInsightsThemeProvider } from '../CostInsightsPage/CostInsightsThemeProvider.esm.js';
import { WarningPanel, Progress } from '@backstage/core-components';
import Alert from '@material-ui/lab/Alert';
import { mapLoadingToProps } from '../CostInsightsPage/selector.esm.js';
import { intervalsOf } from '../../utils/duration.esm.js';
import { costInsightsApiRef } from '../../api/CostInsightsApi.esm.js';
import { useApi } from '@backstage/core-plugin-api';
import { useEntity } from '@backstage/plugin-catalog-react';
import { stringifyEntityRef } from '@backstage/catalog-model';

const EntityCostsCard = () => {
  const client = useApi(costInsightsApiRef);
  const { entity } = useEntity();
  const {
    loadingActions,
    loadingGroups,
    loadingBillingDate,
    loadingInitial,
    dispatchInitial,
    dispatchInsights,
    dispatchNone
  } = useLoading(mapLoadingToProps);
  const dispatchLoadingInitial = useCallback(dispatchInitial, []);
  const dispatchLoadingInsights = useCallback(dispatchInsights, []);
  const dispatchLoadingNone = useCallback(dispatchNone, []);
  const lastCompleteBillingDate = useLastCompleteBillingDate();
  const [dailyCost, setDailyCost] = useState(null);
  const [error, setError] = useState(null);
  const { pageFilters } = useFilters((p) => p);
  useEffect(() => {
    async function getInsights() {
      setError(null);
      try {
        dispatchLoadingInsights(true);
        const intervals = intervalsOf(
          pageFilters.duration,
          lastCompleteBillingDate
        );
        const fetchedDailyCost = await client.getCatalogEntityDailyCost(
          stringifyEntityRef(entity),
          intervals
        );
        setDailyCost(fetchedDailyCost);
      } catch (e) {
        setError(e);
        dispatchLoadingNone(loadingActions);
      } finally {
        dispatchLoadingNone(loadingActions);
        dispatchLoadingInitial(false);
        dispatchLoadingInsights(false);
      }
    }
    if (!loadingBillingDate) {
      getInsights();
    }
  }, [
    client,
    entity,
    pageFilters,
    loadingActions,
    loadingGroups,
    loadingBillingDate,
    dispatchLoadingInsights,
    dispatchLoadingInitial,
    dispatchLoadingNone,
    lastCompleteBillingDate
  ]);
  if (loadingInitial) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.message);
  }
  if (!dailyCost || !dailyCost.aggregation.length) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, "No daily costs");
  }
  return /* @__PURE__ */ React.createElement(CostOverviewCard, { dailyCostData: dailyCost, metricData: null });
};
const EntityCosts = () => {
  const client = useApi(costInsightsApiRef);
  if (!client.getCatalogEntityDailyCost) {
    return /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        title: "Could display costs for entity",
        message: "The getCatalogEntityDailyCost() method is not implemented by the costInsightsApi."
      }
    );
  }
  return /* @__PURE__ */ React.createElement(CostInsightsThemeProvider, null, /* @__PURE__ */ React.createElement(ConfigProvider, null, /* @__PURE__ */ React.createElement(LoadingProvider, null, /* @__PURE__ */ React.createElement(GroupsProvider, null, /* @__PURE__ */ React.createElement(BillingDateProvider, null, /* @__PURE__ */ React.createElement(FilterProvider, null, /* @__PURE__ */ React.createElement(ScrollProvider, null, /* @__PURE__ */ React.createElement(CurrencyProvider, null, /* @__PURE__ */ React.createElement(EntityCostsCard, null)))))))));
};

export { EntityCosts, EntityCostsCard };
//# sourceMappingURL=EntityCosts.esm.js.map
