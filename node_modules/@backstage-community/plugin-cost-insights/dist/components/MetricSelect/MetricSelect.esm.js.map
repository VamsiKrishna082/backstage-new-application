{"version":3,"file":"MetricSelect.esm.js","sources":["../../../src/components/MetricSelect/MetricSelect.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {\n  Maybe,\n  Metric,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { useSelectStyles as useStyles } from '../../utils/styles';\n\nexport type MetricSelectProps = {\n  metric: Maybe<string>;\n  metrics: Array<Metric>;\n  onSelect: (metric: Maybe<string>) => void;\n};\n\nexport const MetricSelect = ({\n  metric,\n  metrics,\n  onSelect,\n}: MetricSelectProps) => {\n  const classes = useStyles();\n\n  function onChange(e: React.ChangeEvent<{ value: unknown }>) {\n    if (e.target.value === 'none') {\n      onSelect(null);\n    } else {\n      onSelect(e.target.value as string);\n    }\n  }\n\n  return (\n    <FormControl variant=\"outlined\">\n      <InputLabel shrink id=\"metric-select-label\">\n        Compare to:\n      </InputLabel>\n      <Select\n        id=\"metric-select\"\n        labelId=\"metric-select-label\"\n        labelWidth={100}\n        className={classes.select}\n        value={metric ?? 'none'}\n        onChange={onChange}\n      >\n        <MenuItem className={classes.menuItem} key=\"none\" value=\"none\">\n          <em>None</em>\n        </MenuItem>\n        {metrics.map((m: Metric) => (\n          <MenuItem className={classes.menuItem} key={m.kind} value={m.kind}>\n            <b>{m.name}</b>\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n"],"names":["useStyles"],"mappings":";;;;;;;AAiCO,MAAM,eAAe,CAAC;AAAA,EAC3B,MAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAyB,KAAA;AACvB,EAAA,MAAM,UAAUA,eAAU,EAAA;AAE1B,EAAA,SAAS,SAAS,CAA0C,EAAA;AAC1D,IAAI,IAAA,CAAA,CAAE,MAAO,CAAA,KAAA,KAAU,MAAQ,EAAA;AAC7B,MAAA,QAAA,CAAS,IAAI,CAAA;AAAA,KACR,MAAA;AACL,MAAS,QAAA,CAAA,CAAA,CAAE,OAAO,KAAe,CAAA;AAAA;AACnC;AAGF,EACE,uBAAA,KAAA,CAAA,aAAA,CAAC,WAAY,EAAA,EAAA,OAAA,EAAQ,UACnB,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,UAAW,EAAA,EAAA,MAAA,EAAM,IAAC,EAAA,EAAA,EAAG,qBAAsB,EAAA,EAAA,aAE5C,CACA,kBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,MAAA;AAAA,IAAA;AAAA,MACC,EAAG,EAAA,eAAA;AAAA,MACH,OAAQ,EAAA,qBAAA;AAAA,MACR,UAAY,EAAA,GAAA;AAAA,MACZ,WAAW,OAAQ,CAAA,MAAA;AAAA,MACnB,OAAO,MAAU,IAAA,MAAA;AAAA,MACjB;AAAA,KAAA;AAAA,oBAEC,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,EAAS,SAAW,EAAA,OAAA,CAAQ,QAAU,EAAA,GAAA,EAAI,MAAO,EAAA,KAAA,EAAM,MACtD,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,IAAG,EAAA,IAAA,EAAA,MAAI,CACV,CAAA;AAAA,IACC,OAAA,CAAQ,IAAI,CAAC,CAAA,yCACX,QAAS,EAAA,EAAA,SAAA,EAAW,QAAQ,QAAU,EAAA,GAAA,EAAK,EAAE,IAAM,EAAA,KAAA,EAAO,EAAE,IAC3D,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,WAAG,CAAE,CAAA,IAAK,CACb,CACD;AAAA,GAEL,CAAA;AAEJ;;;;"}