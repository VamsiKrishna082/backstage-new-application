import React from 'react';
import classnames from 'classnames';
import Typography from '@material-ui/core/Typography';
import { formatChange } from '../../utils/formatters.esm.js';
import { useEntityDialogStyles } from '../../utils/styles.esm.js';
import '../../types/Alert.esm.js';
import '../../utils/currency.esm.js';
import 'luxon';
import '../../utils/duration.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import { CostGrowthIndicator } from '../CostGrowth/CostGrowthIndicator.esm.js';
import { Table } from '@backstage/core-components';

const createRenderer = (baseCurrency) => (col, classes) => {
  return function render(rowData) {
    const row = rowData;
    const rowStyles = classnames(classes.row, {
      [classes.rowTotal]: row.id === "total",
      [classes.colFirst]: col === "label",
      [classes.colLast]: col === "change"
    });
    switch (col) {
      case "previous":
      case "current":
        return /* @__PURE__ */ React.createElement(Typography, { className: rowStyles }, baseCurrency.format(row[col]));
      case "change":
        return /* @__PURE__ */ React.createElement(
          CostGrowthIndicator,
          {
            className: rowStyles,
            change: row.change,
            formatter: formatChange
          }
        );
      default:
        return /* @__PURE__ */ React.createElement(Typography, { className: rowStyles }, row.label);
    }
  };
};
function createSorter(field) {
  return function rowSort(data1, data2) {
    const a = data1;
    const b = data2;
    if (a.id === "total") return 1;
    if (b.id === "total") return 1;
    if (field === "label") return a.label.localeCompare(b.label);
    if (field === "change") {
      if (formatChange(a[field]) === "\u221E" || formatChange(b[field]) === "-\u221E")
        return 1;
      if (formatChange(a[field]) === "-\u221E" || formatChange(b[field]) === "\u221E")
        return -1;
      return a[field].ratio - b[field].ratio;
    }
    return b.previous + b.current - (a.previous + a.current);
  };
}
const ProductEntityTable = ({
  entityLabel,
  entity,
  options
}) => {
  const classes = useEntityDialogStyles();
  const { baseCurrency } = useConfig();
  const entities = entity.entities[entityLabel];
  const data = Object.assign(
    {
      previousName: "Previous",
      currentName: "Current"
    },
    options
  );
  const firstColClasses = classnames(classes.column, classes.colFirst);
  const lastColClasses = classnames(classes.column, classes.colLast);
  const columns = [
    {
      field: "label",
      title: /* @__PURE__ */ React.createElement(Typography, { className: firstColClasses }, entityLabel),
      render: createRenderer(baseCurrency)("label", classes),
      customSort: createSorter("label"),
      width: "33.33%"
    },
    {
      field: "previous",
      title: /* @__PURE__ */ React.createElement(Typography, { className: classes.column }, data.previousName),
      align: "right",
      render: createRenderer(baseCurrency)("previous", classes),
      customSort: createSorter("previous")
    },
    {
      field: "current",
      title: /* @__PURE__ */ React.createElement(Typography, { className: classes.column }, data.currentName),
      align: "right",
      render: createRenderer(baseCurrency)("current", classes),
      customSort: createSorter("current")
    },
    {
      field: "change",
      title: /* @__PURE__ */ React.createElement(Typography, { className: lastColClasses }, "Change"),
      align: "right",
      render: createRenderer(baseCurrency)("change", classes),
      customSort: createSorter("change")
    }
  ];
  const rowData = entities.map((e) => ({
    id: e.id || "Unknown",
    label: e.id || "Unknown",
    previous: e.aggregation[0],
    current: e.aggregation[1],
    change: e.change
  })).concat({
    id: "total",
    label: "Total",
    previous: entity.aggregation[0],
    current: entity.aggregation[1],
    change: entity.change
  }).sort(createSorter());
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      columns,
      data: rowData,
      title: entity.id || "Unlabeled",
      options: {
        paging: false,
        search: false,
        hideFilterIcons: true
      }
    }
  );
};

export { ProductEntityTable };
//# sourceMappingURL=ProductEntityTable.esm.js.map
