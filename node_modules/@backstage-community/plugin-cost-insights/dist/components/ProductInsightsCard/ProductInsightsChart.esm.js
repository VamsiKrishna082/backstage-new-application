import React, { useMemo, useState } from 'react';
import pluralize from 'pluralize';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import FullScreenIcon from '@material-ui/icons/Fullscreen';
import { LegendItem } from '../LegendItem/LegendItem.esm.js';
import { ProductEntityDialog } from './ProductEntityDialog.esm.js';
import { CostGrowth } from '../CostGrowth/CostGrowth.esm.js';
import { CostGrowthIndicator } from '../CostGrowth/CostGrowthIndicator.esm.js';
import { BarChart } from '../BarChart/BarChart.esm.js';
import { BarChartLegend } from '../BarChart/BarChartLegend.esm.js';
import { BarChartTooltip } from '../BarChart/BarChartTooltip.esm.js';
import { BarChartTooltipItem } from '../BarChart/BarChartTooltipItem.esm.js';
import { assertAlways, findAnyKey, isUndefined, findAlways, notEmpty } from '../../utils/assert.esm.js';
import { formatPeriod, formatChange } from '../../utils/formatters.esm.js';
import { resourceOf, isLabeled, isUnlabeled, isInvalid, tooltipItemOf, titleOf } from '../../utils/graphs.esm.js';
import { useProductInsightsChartStyles, useBarChartLayoutStyles } from '../../utils/styles.esm.js';
import { choose } from '../../utils/change.esm.js';
import { useConfig } from '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';

const ProductInsightsChart = ({
  billingDate,
  entity,
  duration
}) => {
  const classes = useProductInsightsChartStyles();
  const layoutClasses = useBarChartLayoutStyles();
  const { baseCurrency } = useConfig();
  const entities = useMemo(() => {
    const entityLabel = assertAlways(findAnyKey(entity.entities));
    return entity.entities[entityLabel] ?? [];
  }, [entity]);
  const [activeLabel, setActive] = useState();
  const [selectLabel, setSelected] = useState();
  const isSelected = useMemo(() => !isUndefined(selectLabel), [selectLabel]);
  const isClickable = useMemo(() => {
    const breakdowns = Object.keys(
      entities.find((e) => e.id === activeLabel)?.entities ?? {}
    );
    return breakdowns.length > 0;
  }, [entities, activeLabel]);
  const costStart = entity.aggregation[0];
  const costEnd = entity.aggregation[1];
  const resources = entities.map(resourceOf);
  const options = {
    previousName: formatPeriod(duration, billingDate, false),
    currentName: formatPeriod(duration, billingDate, true)
  };
  const onMouseMove = (data) => {
    if (isLabeled(data)) {
      setActive(data.activeLabel);
    } else if (isUnlabeled(data)) {
      setActive(null);
    } else {
      setActive(void 0);
    }
  };
  const onClick = (data) => {
    if (isLabeled(data)) {
      setSelected(data.activeLabel);
    } else if (isUnlabeled(data)) {
      setSelected(null);
    } else {
      setSelected(void 0);
    }
  };
  const renderProductInsightsTooltip = ({
    label,
    payload = []
  }) => {
    if (isInvalid({ label, payload })) return null;
    const id = label === "" ? null : label;
    const title = titleOf(label);
    const items = payload.map(tooltipItemOf(baseCurrency)).filter(notEmpty);
    const activeEntity = findAlways(entities, (e) => e.id === id);
    const breakdowns = Object.keys(activeEntity.entities);
    if (breakdowns.length) {
      const subtitle = breakdowns.map((b) => pluralize(b, activeEntity.entities[b].length, true)).join(", ");
      return /* @__PURE__ */ React.createElement(
        BarChartTooltip,
        {
          title,
          subtitle,
          topRight: !!activeEntity.change.ratio && /* @__PURE__ */ React.createElement(
            CostGrowthIndicator,
            {
              formatter: formatChange,
              change: activeEntity.change,
              className: classes.indicator
            }
          ),
          actions: /* @__PURE__ */ React.createElement(Box, { className: classes.actions }, /* @__PURE__ */ React.createElement(FullScreenIcon, null), /* @__PURE__ */ React.createElement(Typography, null, "Click for breakdown"))
        },
        items.map((item, index) => /* @__PURE__ */ React.createElement(BarChartTooltipItem, { key: `${item.label}-${index}`, item }))
      );
    }
    return /* @__PURE__ */ React.createElement(
      BarChartTooltip,
      {
        title,
        topRight: !!activeEntity.change.ratio && /* @__PURE__ */ React.createElement(
          CostGrowthIndicator,
          {
            formatter: formatChange,
            change: activeEntity.change,
            className: classes.indicator
          }
        ),
        content: id ? null : "This product has costs that are not labeled and therefore can't be attributed to a specific entity."
      },
      items.map((item, index) => /* @__PURE__ */ React.createElement(BarChartTooltipItem, { key: `${item.label}-${index}`, item }))
    );
  };
  const barChartProps = isClickable ? { onClick } : {};
  return /* @__PURE__ */ React.createElement(Box, { className: layoutClasses.wrapper }, /* @__PURE__ */ React.createElement(BarChartLegend, { costStart, costEnd, options }, /* @__PURE__ */ React.createElement(
    LegendItem,
    {
      title: choose(["Cost Savings", "Cost Excess"], entity.change)
    },
    /* @__PURE__ */ React.createElement(CostGrowth, { change: entity.change, duration })
  )), /* @__PURE__ */ React.createElement(
    BarChart,
    {
      resources,
      tooltip: renderProductInsightsTooltip,
      onMouseMove,
      options,
      ...barChartProps
    }
  ), isSelected && entities.length && /* @__PURE__ */ React.createElement(
    ProductEntityDialog,
    {
      open: isSelected,
      onClose: () => setSelected(void 0),
      entity: findAlways(entities, (e) => e.id === selectLabel),
      options
    }
  ));
};

export { ProductInsightsChart };
//# sourceMappingURL=ProductInsightsChart.esm.js.map
