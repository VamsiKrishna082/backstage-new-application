{"version":3,"file":"ProductInsightsChart.esm.js","sources":["../../../src/components/ProductInsightsCard/ProductInsightsChart.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport pluralize from 'pluralize';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { default as FullScreenIcon } from '@material-ui/icons/Fullscreen';\nimport { LegendItem } from '../LegendItem';\nimport { ProductEntityDialog } from './ProductEntityDialog';\nimport { CostGrowth, CostGrowthIndicator } from '../CostGrowth';\nimport {\n  BarChart,\n  BarChartLegend,\n  BarChartTooltip,\n  BarChartTooltipItem,\n  BarChartLegendOptions,\n} from '../BarChart';\nimport {\n  findAlways,\n  notEmpty,\n  isUndefined,\n  findAnyKey,\n  assertAlways,\n} from '../../utils/assert';\nimport { formatPeriod, formatChange } from '../../utils/formatters';\nimport {\n  titleOf,\n  tooltipItemOf,\n  resourceOf,\n  isInvalid,\n  isLabeled,\n  isUnlabeled,\n} from '../../utils/graphs';\nimport {\n  useProductInsightsChartStyles as useStyles,\n  useBarChartLayoutStyles as useLayoutStyles,\n} from '../../utils/styles';\nimport { Duration } from '../../types';\nimport {\n  Entity,\n  Maybe,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { choose } from '../../utils/change';\nimport { TooltipRenderer } from '../../types';\nimport { useConfig } from '../../hooks';\n\nexport type ProductInsightsChartProps = {\n  billingDate: string;\n  entity: Entity;\n  duration: Duration;\n};\n\nexport const ProductInsightsChart = ({\n  billingDate,\n  entity,\n  duration,\n}: ProductInsightsChartProps) => {\n  const classes = useStyles();\n  const layoutClasses = useLayoutStyles();\n  const { baseCurrency } = useConfig();\n\n  // Only a single entities Record for the root product entity is supported\n  const entities = useMemo(() => {\n    const entityLabel = assertAlways(findAnyKey(entity.entities));\n    return entity.entities[entityLabel] ?? [];\n  }, [entity]);\n\n  const [activeLabel, setActive] = useState<Maybe<string>>();\n  const [selectLabel, setSelected] = useState<Maybe<string>>();\n  const isSelected = useMemo(() => !isUndefined(selectLabel), [selectLabel]);\n\n  const isClickable = useMemo(() => {\n    const breakdowns = Object.keys(\n      entities.find(e => e.id === activeLabel)?.entities ?? {},\n    );\n    return breakdowns.length > 0;\n  }, [entities, activeLabel]);\n\n  const costStart = entity.aggregation[0];\n  const costEnd = entity.aggregation[1];\n  const resources = entities.map(resourceOf);\n\n  const options: Partial<BarChartLegendOptions> = {\n    previousName: formatPeriod(duration, billingDate, false),\n    currentName: formatPeriod(duration, billingDate, true),\n  };\n\n  const onMouseMove: (...args: any[]) => void = (\n    data: Record<'activeLabel', string | undefined>,\n  ) => {\n    if (isLabeled(data)) {\n      setActive(data.activeLabel!);\n    } else if (isUnlabeled(data)) {\n      setActive(null);\n    } else {\n      setActive(undefined);\n    }\n  };\n\n  const onClick: (...args: any[]) => void = (\n    data: Record<'activeLabel', string>,\n  ) => {\n    if (isLabeled(data)) {\n      setSelected(data.activeLabel);\n    } else if (isUnlabeled(data)) {\n      setSelected(null);\n    } else {\n      setSelected(undefined);\n    }\n  };\n\n  const renderProductInsightsTooltip: TooltipRenderer = ({\n    label,\n    payload = [],\n  }) => {\n    /* Labels and payloads may be undefined or empty */\n    if (isInvalid({ label, payload })) return null;\n\n    /*\n     *  recharts coerces null values to strings\n     *  entity       -> resource       -> payload\n     *  { id: null } -> { name: null } -> { label: '' }\n     */\n    const id = label === '' ? null : label;\n\n    const title = titleOf(label);\n    const items = payload.map(tooltipItemOf(baseCurrency)).filter(notEmpty);\n\n    const activeEntity = findAlways(entities, e => e.id === id);\n    const breakdowns = Object.keys(activeEntity.entities);\n\n    if (breakdowns.length) {\n      const subtitle = breakdowns\n        .map(b => pluralize(b, activeEntity.entities[b].length, true))\n        .join(', ');\n      return (\n        <BarChartTooltip\n          title={title}\n          subtitle={subtitle}\n          topRight={\n            !!activeEntity.change.ratio && (\n              <CostGrowthIndicator\n                formatter={formatChange}\n                change={activeEntity.change}\n                className={classes.indicator}\n              />\n            )\n          }\n          actions={\n            <Box className={classes.actions}>\n              <FullScreenIcon />\n              <Typography>Click for breakdown</Typography>\n            </Box>\n          }\n        >\n          {items.map((item, index) => (\n            <BarChartTooltipItem key={`${item.label}-${index}`} item={item} />\n          ))}\n        </BarChartTooltip>\n      );\n    }\n\n    // If an entity doesn't have any sub-entities, there aren't any costs to break down.\n    return (\n      <BarChartTooltip\n        title={title}\n        topRight={\n          !!activeEntity.change.ratio && (\n            <CostGrowthIndicator\n              formatter={formatChange}\n              change={activeEntity.change}\n              className={classes.indicator}\n            />\n          )\n        }\n        content={\n          id\n            ? null\n            : \"This product has costs that are not labeled and therefore can't be attributed to a specific entity.\"\n        }\n      >\n        {items.map((item, index) => (\n          <BarChartTooltipItem key={`${item.label}-${index}`} item={item} />\n        ))}\n      </BarChartTooltip>\n    );\n  };\n\n  const barChartProps = isClickable ? { onClick } : {};\n\n  return (\n    <Box className={layoutClasses.wrapper}>\n      <BarChartLegend costStart={costStart} costEnd={costEnd} options={options}>\n        <LegendItem\n          title={choose(['Cost Savings', 'Cost Excess'], entity.change)}\n        >\n          <CostGrowth change={entity.change} duration={duration} />\n        </LegendItem>\n      </BarChartLegend>\n      <BarChart\n        resources={resources}\n        tooltip={renderProductInsightsTooltip}\n        onMouseMove={onMouseMove}\n        options={options}\n        {...barChartProps}\n      />\n      {isSelected && entities.length && (\n        <ProductEntityDialog\n          open={isSelected}\n          onClose={() => setSelected(undefined)}\n          entity={findAlways(entities, e => e.id === selectLabel)}\n          options={options}\n        />\n      )}\n    </Box>\n  );\n};\n"],"names":["useStyles","useLayoutStyles"],"mappings":"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"}