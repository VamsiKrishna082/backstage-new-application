import React from 'react';
import { DateTime } from 'luxon';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import { AlertInstructionsLayout } from '../AlertInstructionsLayout/AlertInstructionsLayout.esm.js';
import 'pluralize';
import '@material-ui/lab/Alert';
import '@material-ui/core/MenuItem';
import '@material-ui/core/Select';
import '../../types/Alert.esm.js';
import { DEFAULT_DATE_FORMAT } from '../../types/DateFormat.esm.js';
import { Duration } from '../../types/Duration.esm.js';
import '../../utils/duration.esm.js';
import '../../utils/styles.esm.js';
import '../../hooks/useConfig.esm.js';
import '../../hooks/useCurrency.esm.js';
import '../../hooks/useFilters.esm.js';
import '../../hooks/useGroups.esm.js';
import '../../hooks/useLoading.esm.js';
import '../../hooks/useScroll.esm.js';
import '../../hooks/useLastCompleteBillingDate.esm.js';
import { ProductInsightsChart } from '../ProductInsightsCard/ProductInsightsChart.esm.js';
import { InfoCard } from '@backstage/core-components';
import { ProjectGrowthAlert } from '../../alerts/ProjectGrowthAlert.esm.js';
import 'recharts';
import '@material-ui/core/styles';
import '@material-ui/core/Paper';
import '@material-ui/core/Slide';
import '@material-ui/icons/ChevronLeft';
import '@material-ui/icons/ChevronRight';
import '../BarChart/BarChartStepperButton.esm.js';
import '@material-ui/core/ButtonBase';
import 'classnames';
import '@material-ui/core/Divider';
import '@material-ui/icons/Lens';
import '@material-ui/core/Tooltip';
import '@material-ui/icons/HelpOutlineOutlined';

const today = DateTime.now().toFormat(DEFAULT_DATE_FORMAT);
const ProjectGrowthInstructionsPage = () => {
  const alertData = {
    project: "example-project",
    periodStart: "Q1 2020",
    periodEnd: "Q2 2020",
    aggregation: [6e4, 12e4],
    change: {
      ratio: 1,
      amount: 6e4
    },
    products: [
      {
        id: "Compute Engine",
        aggregation: [58e3, 118e3]
      },
      {
        id: "Cloud Dataflow",
        aggregation: [1200, 1500]
      },
      {
        id: "Cloud Storage",
        aggregation: [800, 500]
      }
    ]
  };
  const projectGrowthAlert = new ProjectGrowthAlert(alertData);
  const product = {
    kind: "ComputeEngine",
    name: "Compute Engine"
  };
  const entity = {
    id: "example-id",
    aggregation: [2e4, 6e4],
    change: {
      ratio: 3,
      amount: 4e4
    },
    entities: {
      service: [
        {
          id: "service-one",
          aggregation: [18200, 58500],
          entities: {},
          change: { ratio: 2.21, amount: 40300 }
        },
        {
          id: "service-two",
          aggregation: [1200, 1300],
          entities: {},
          change: { ratio: 0.083, amount: 100 }
        },
        {
          id: "service-three",
          aggregation: [600, 200],
          entities: {},
          change: { ratio: -0.666, amount: -400 }
        }
      ]
    }
  };
  return /* @__PURE__ */ React.createElement(AlertInstructionsLayout, { title: "Investigating Growth" }, /* @__PURE__ */ React.createElement(Typography, { variant: "h1" }, "Investigating cloud cost growth"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Cost Insights shows an alert when costs for a particular billing entity, such as a GCP project, have grown at a rate faster than our alerting threshold. The responsible team should follow this guide to decide whether this warrants further investigation."), /* @__PURE__ */ React.createElement(Box, { mt: 4 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h3" }, "Is the growth expected?"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "The first question to ask is whether growth is expected. Perhaps a new product has been deployed, or additional regions added for reliability."), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Many services increase cost linearly with load. Has the demand increased? This may happen as you open new markets, or run marketing offers. Costs should be compared against a business metric, such as daily users, to normalize natural increases from business growth."), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Seasonal variance may also cause cost growth; yearly campaigns, an increase in demand during certain times of year."), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Cloud costs will often go up before they go down, in the case of migrations. Teams moving to new infrastructure may run in both the old and new environment during the migration.")), /* @__PURE__ */ React.createElement(Box, { mt: 4 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h3" }, "Is the growth significant?"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Next, evaluate whether the growth is significant. This helps avoid premature optimization, where cost in engineering time is more than would be saved from the optimization over a reasonable time frame."), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "We recommend reframing the cost growth itself in terms of engineering time. How much engineering time, for an ", /* @__PURE__ */ React.createElement("i", null, "average"), " fully-loaded engineer cost at the company, is being overspent each month? Compare this to expected engineering time for optimization to decide whether the optimization is worthwhile.")), /* @__PURE__ */ React.createElement(Box, { mt: 4 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h3" }, "Identifying which cloud product contributed most"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "For projects meeting the alert threshold, Cost Insights shows a cost comparison of cloud products over the examined time period:"), /* @__PURE__ */ React.createElement(Box, { mt: 2, mb: 2 }, projectGrowthAlert.element), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "This allows you to quickly see which cloud products contributed to the growth in cloud costs.")), /* @__PURE__ */ React.createElement(Box, { mt: 4 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h3" }, "Identifying the responsible workload"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "After identifying the cloud product, use the corresponding product panel in Cost Insights to find a particular workload (or ", /* @__PURE__ */ React.createElement("i", null, "entity"), ") that has grown in cost:"), /* @__PURE__ */ React.createElement(Box, { mt: 2, mb: 2 }, /* @__PURE__ */ React.createElement(InfoCard, { title: product.name, subheader: "3 entities, sorted by cost" }, /* @__PURE__ */ React.createElement(
    ProductInsightsChart,
    {
      billingDate: today,
      duration: Duration.P3M,
      entity
    }
  ))), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "From here, you can dig into commit history or deployment logs to find probable causes of an unexpected spike in cost.")), /* @__PURE__ */ React.createElement(Box, { mt: 4 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h3" }, "Optimizing the workload"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Workload optimization varies between cloud products, but there are a few general optimization areas to consider:"), /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, "Retention"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Is the workload or storage necessary? Truly idle or unused resources can be cleaned up for immediate cost savings. For storage, how long do we need the data? Many cloud products support retention policies to automatically delete data after a certain time period."), /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, "Efficiency"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Is the workload using cloud resources efficiently? For compute resources, do the utilization metrics look reasonable? Autoscaling infrastructure, such as Kubernetes, can run workloads more efficiently without compromising reliability."), /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, "Lifecycle"), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Is the workload using an optimal pricing model? Some cloud products offer better pricing for data that is accessed less frequently.")));
};

export { ProjectGrowthInstructionsPage };
//# sourceMappingURL=ProjectGrowthInstructionsPage.esm.js.map
