{"version":3,"file":"client.esm.js","sources":["../../src/example/client.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable no-restricted-imports */\n\nimport { DateTime } from 'luxon';\nimport { CostInsightsApi, ProductInsightsOptions } from '../api';\nimport {\n  Alert,\n  DEFAULT_DATE_FORMAT,\n  ProjectGrowthData,\n  UnlabeledDataflowData,\n} from '../types';\nimport {\n  Entity,\n  Group,\n  MetricData,\n  Project,\n  Cost,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { KubernetesMigrationAlert } from './alerts';\nimport { ProjectGrowthAlert, UnlabeledDataflowAlert } from '../alerts';\nimport {\n  aggregationFor,\n  changeOf,\n  entityOf,\n  getGroupedProducts,\n  getGroupedProjects,\n  trendlineOf,\n} from '../testUtils';\n\n/** @public */\nexport class ExampleCostInsightsClient implements CostInsightsApi {\n  private request(_: any, res: any): Promise<any> {\n    return new Promise(resolve => setTimeout(resolve, 0, res));\n  }\n\n  getLastCompleteBillingDate(): Promise<string> {\n    return Promise.resolve(\n      DateTime.now().minus({ days: 1 }).toFormat(DEFAULT_DATE_FORMAT),\n    );\n  }\n\n  async getUserGroups(userId: string): Promise<Group[]> {\n    const groups: Group[] = await this.request({ userId }, [\n      { id: 'group-a', name: 'Group A' },\n      { id: 'group-b', name: 'Group B' },\n    ]);\n\n    return groups;\n  }\n\n  async getGroupProjects(group: string): Promise<Project[]> {\n    const projects: Project[] = await this.request({ group }, [\n      { id: 'project-a' },\n      { id: 'project-b' },\n      { id: 'project-c' },\n    ]);\n\n    return projects;\n  }\n\n  async getDailyMetricData(\n    metric: string,\n    intervals: string,\n  ): Promise<MetricData> {\n    const aggregation = aggregationFor(intervals, 100_000).map(entry => ({\n      ...entry,\n      amount: Math.round(entry.amount),\n    }));\n\n    const cost: MetricData = await this.request(\n      { metric, intervals },\n      {\n        format: 'number',\n        aggregation: aggregation,\n        change: changeOf(aggregation),\n        trendline: trendlineOf(aggregation),\n      },\n    );\n\n    return cost;\n  }\n\n  async getCatalogEntityDailyCost(\n    entityRef: string,\n    intervals: string,\n  ): Promise<Cost> {\n    const aggregation = aggregationFor(intervals, 8_000);\n    const groupDailyCost: Cost = await this.request(\n      { entityRef, intervals },\n      {\n        aggregation: aggregation,\n        change: changeOf(aggregation),\n        trendline: trendlineOf(aggregation),\n        // Optional field providing cost groupings / breakdowns keyed by the type. In this example,\n        // daily cost grouped by cloud product OR by project / billing account.\n        groupedCosts: {\n          product: getGroupedProducts(intervals),\n          project: getGroupedProjects(intervals),\n        },\n      },\n    );\n\n    return groupDailyCost;\n  }\n\n  async getGroupDailyCost(group: string, intervals: string): Promise<Cost> {\n    const aggregation = aggregationFor(intervals, 8_000);\n    const groupDailyCost: Cost = await this.request(\n      { group, intervals },\n      {\n        aggregation: aggregation,\n        change: changeOf(aggregation),\n        trendline: trendlineOf(aggregation),\n        // Optional field providing cost groupings / breakdowns keyed by the type. In this example,\n        // daily cost grouped by cloud product OR by project / billing account.\n        groupedCosts: {\n          product: getGroupedProducts(intervals),\n          project: getGroupedProjects(intervals),\n        },\n      },\n    );\n\n    return groupDailyCost;\n  }\n\n  async getProjectDailyCost(project: string, intervals: string): Promise<Cost> {\n    const aggregation = aggregationFor(intervals, 1_500);\n    const projectDailyCost: Cost = await this.request(\n      { project, intervals },\n      {\n        id: 'project-a',\n        aggregation: aggregation,\n        change: changeOf(aggregation),\n        trendline: trendlineOf(aggregation),\n        // Optional field providing cost groupings / breakdowns keyed by the type. In this example,\n        // daily project cost grouped by cloud product.\n        groupedCosts: {\n          product: getGroupedProducts(intervals),\n        },\n      },\n    );\n\n    return projectDailyCost;\n  }\n\n  async getProductInsights(options: ProductInsightsOptions): Promise<Entity> {\n    const productInsights: Entity = await this.request(\n      options,\n      entityOf(options.product),\n    );\n\n    return productInsights;\n  }\n\n  async getAlerts(group: string): Promise<Alert[]> {\n    const projectGrowthData: ProjectGrowthData = {\n      project: 'example-project',\n      periodStart: '2020-Q2',\n      periodEnd: '2020-Q3',\n      aggregation: [60_000, 120_000],\n      change: {\n        ratio: 1,\n        amount: 60_000,\n      },\n      products: [\n        { id: 'Compute Engine', aggregation: [58_000, 118_000] },\n        { id: 'Cloud Dataflow', aggregation: [1200, 1500] },\n        { id: 'Cloud Storage', aggregation: [800, 500] },\n      ],\n    };\n\n    const unlabeledDataflowData: UnlabeledDataflowData = {\n      periodStart: '2020-09-01',\n      periodEnd: '2020-09-30',\n      labeledCost: 6_200,\n      unlabeledCost: 7_000,\n      projects: [\n        {\n          id: 'example-project-1',\n          unlabeledCost: 5_000,\n          labeledCost: 3_000,\n        },\n        {\n          id: 'example-project-2',\n          unlabeledCost: 2_000,\n          labeledCost: 3_200,\n        },\n      ],\n    };\n\n    const today = DateTime.now();\n    const alerts: Alert[] = await this.request({ group }, [\n      new ProjectGrowthAlert(projectGrowthData),\n      new UnlabeledDataflowAlert(unlabeledDataflowData),\n      new KubernetesMigrationAlert(this, {\n        startDate: today.minus({ days: 30 }).toFormat(DEFAULT_DATE_FORMAT),\n        endDate: today.toFormat(DEFAULT_DATE_FORMAT),\n        change: {\n          ratio: 0,\n          amount: 0,\n        },\n        services: [\n          {\n            id: 'service-a',\n            aggregation: [20_000, 10_000],\n            change: {\n              ratio: -0.5,\n              amount: -10_000,\n            },\n            entities: {},\n          },\n          {\n            id: 'service-b',\n            aggregation: [30_000, 15_000],\n            change: {\n              ratio: -0.5,\n              amount: -15_000,\n            },\n            entities: {},\n          },\n        ],\n      }),\n    ]);\n\n    return alerts;\n  }\n}\n"],"names":[],"mappings":"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"}