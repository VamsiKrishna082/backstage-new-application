import React, { forwardRef, useState, useEffect } from 'react';
import Checkbox from '@material-ui/core/Checkbox';
import FormControl from '@material-ui/core/FormControl';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormGroup from '@material-ui/core/FormGroup';
import Typography from '@material-ui/core/Typography';
import { findAlways } from '../../utils/assert.esm.js';

const KubernetesMigrationDismissForm = forwardRef(({ onSubmit, disableSubmit, alert }, ref) => {
  const [services, setServices] = useState(alert.data.services);
  const onFormSubmit = (e) => {
    e.preventDefault();
    onSubmit({ services });
  };
  const onCheckboxChange = (e, checked) => {
    if (checked) {
      const service = findAlways(
        alert.data.services,
        (s) => s.id === e.target.value
      );
      setServices((prevServices) => prevServices.concat(service));
    } else {
      setServices(
        (prevServices) => prevServices.filter((p) => p.id !== e.target.value)
      );
    }
  };
  useEffect(() => {
    if (services.length) {
      disableSubmit(false);
    } else {
      disableSubmit(true);
    }
  }, [services, disableSubmit]);
  return (
    /* All custom forms must accept a ref and implement an onSubmit handler. */
    /* @__PURE__ */ React.createElement("form", { ref, onSubmit: onFormSubmit }, /* @__PURE__ */ React.createElement(FormControl, { component: "fieldset", fullWidth: true }, /* @__PURE__ */ React.createElement(Typography, { color: "textPrimary" }, /* @__PURE__ */ React.createElement("b", null, "Or choose which services to dismiss this alert for.")), /* @__PURE__ */ React.createElement(FormGroup, null, alert.data.services.map((service, index) => /* @__PURE__ */ React.createElement(
      FormControlLabel,
      {
        key: `example-option-${index}`,
        label: service.id,
        value: service.id,
        control: /* @__PURE__ */ React.createElement(
          Checkbox,
          {
            color: "primary",
            checked: services.some((p) => p.id === service.id),
            onChange: onCheckboxChange
          }
        )
      }
    )))))
  );
});

export { KubernetesMigrationDismissForm };
//# sourceMappingURL=KubernetesMigrationDismissForm.esm.js.map
