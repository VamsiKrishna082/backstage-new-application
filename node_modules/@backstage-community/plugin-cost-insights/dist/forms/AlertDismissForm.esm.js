import React, { forwardRef, useState, useEffect } from 'react';
import Box from '@material-ui/core/Box';
import Collapse from '@material-ui/core/Collapse';
import FormControl from '@material-ui/core/FormControl';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import Radio from '@material-ui/core/Radio';
import RadioGroup from '@material-ui/core/RadioGroup';
import { AlertDismissReason, AlertDismissOptions } from '../types/Alert.esm.js';
import { useAlertDialogStyles } from '../utils/styles.esm.js';

const AlertDismissForm = forwardRef(({ onSubmit, disableSubmit }, ref) => {
  const classes = useAlertDialogStyles();
  const [other, setOther] = useState(null);
  const [feedback, setFeedback] = useState(null);
  const [reason, setReason] = useState(
    AlertDismissReason.Resolved
  );
  const onFormSubmit = (e) => {
    e.preventDefault();
    if (reason) {
      onSubmit({
        other,
        reason,
        feedback
      });
    }
  };
  const onReasonChange = (_, value) => {
    if (other) {
      setOther(null);
    }
    setReason(value);
  };
  const onOtherChange = (e) => {
    return e.target.value ? setOther(e.target.value) : setOther(null);
  };
  const onFeedbackChange = (e) => {
    return e.target.value ? setFeedback(e.target.value) : setFeedback(null);
  };
  useEffect(() => {
    function validateDismissForm() {
      if (reason === AlertDismissReason.Other) {
        if (other) {
          disableSubmit(false);
        } else {
          disableSubmit(true);
        }
      } else if (reason) {
        disableSubmit(false);
      } else {
        disableSubmit(true);
      }
    }
    validateDismissForm();
  }, [reason, other, disableSubmit]);
  return /* @__PURE__ */ React.createElement("form", { ref, onSubmit: onFormSubmit }, /* @__PURE__ */ React.createElement(FormControl, { component: "fieldset", fullWidth: true }, /* @__PURE__ */ React.createElement(Typography, { color: "textPrimary" }, /* @__PURE__ */ React.createElement("b", null, "Reason for dismissing?")), /* @__PURE__ */ React.createElement(Box, { mb: 1 }, /* @__PURE__ */ React.createElement(
    RadioGroup,
    {
      name: "dismiss-alert-reasons",
      value: reason,
      onChange: onReasonChange
    },
    AlertDismissOptions.map((option) => /* @__PURE__ */ React.createElement(
      FormControlLabel,
      {
        key: `dismiss-alert-option-${option.reason}`,
        label: option.label,
        value: option.reason,
        control: /* @__PURE__ */ React.createElement(Radio, { className: classes.radio })
      }
    ))
  ), /* @__PURE__ */ React.createElement(Collapse, { in: reason === AlertDismissReason.Other }, /* @__PURE__ */ React.createElement(Box, { ml: 4 }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      id: "dismiss-alert-option-other",
      variant: "outlined",
      multiline: true,
      fullWidth: true,
      rows: 4,
      value: other ?? "",
      onChange: onOtherChange
    }
  )))), /* @__PURE__ */ React.createElement(Typography, { gutterBottom: true }, /* @__PURE__ */ React.createElement("b", null, "Any other feedback you can provide?")), /* @__PURE__ */ React.createElement(
    TextField,
    {
      id: "dismiss-alert-feedback",
      variant: "outlined",
      multiline: true,
      rows: 4,
      fullWidth: true,
      value: feedback ?? "",
      onChange: onFeedbackChange
    }
  )));
});

export { AlertDismissForm };
//# sourceMappingURL=AlertDismissForm.esm.js.map
