import React, { createContext, useState, useEffect, useContext } from 'react';
import '../types/Alert.esm.js';
import { EngineerThreshold } from '../types/ChangeStatistic.esm.js';
import { getIcon } from '../utils/navigation.esm.js';
import { validateMetrics, validateCurrencies } from '../utils/config.esm.js';
import { createCurrencyFormat, defaultCurrencies } from '../utils/currency.esm.js';
import { useApi, configApiRef } from '@backstage/core-plugin-api';

const ConfigContext = createContext(
  void 0
);
const defaultState = {
  baseCurrency: createCurrencyFormat(),
  metrics: [],
  products: [],
  icons: [],
  engineerCost: 0,
  engineerThreshold: EngineerThreshold,
  hideTrendLine: false,
  currencies: defaultCurrencies
};
const ConfigProvider = ({ children }) => {
  const c = useApi(configApiRef);
  const [config, setConfig] = useState(defaultState);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    function getProducts() {
      const products = c.getOptionalConfig("costInsights.products");
      if (products) {
        return products.keys().map((key) => ({
          kind: key,
          name: products.getString(`${key}.name`),
          aggregation: [0, 0]
        }));
      }
      return [];
    }
    function getMetrics() {
      const metrics = c.getOptionalConfig("costInsights.metrics");
      if (metrics) {
        return metrics.keys().map((key) => ({
          kind: key,
          name: metrics.getString(`${key}.name`),
          default: metrics.getOptionalBoolean(`${key}.default`) ?? false
        }));
      }
      return [];
    }
    function getBaseCurrency() {
      const baseCurrency = c.getOptionalConfig("costInsights.baseCurrency");
      if (baseCurrency) {
        const options = baseCurrency.getOptionalConfig("options");
        return new Intl.NumberFormat(
          baseCurrency.getOptionalString("locale"),
          options ? {
            localeMatcher: options.getOptionalString("localeMatcher"),
            style: "currency",
            currency: options.getOptionalString("currency"),
            currencySign: options.getOptionalString("currencySign"),
            useGrouping: options.getOptionalBoolean("useGrouping"),
            minimumIntegerDigits: options.getOptionalNumber(
              "minimumIntegerDigits"
            ),
            minimumFractionDigits: options.getOptionalNumber(
              "minimumFractionDigits"
            ),
            maximumFractionDigits: options.getOptionalNumber(
              "maximumFractionDigits"
            ),
            minimumSignificantDigits: options.getOptionalNumber(
              "minimumSignificantDigits"
            ),
            maximumSignificantDigits: options.getOptionalNumber(
              "maximumSignificantDigits"
            )
          } : void 0
        );
      }
      return defaultState.baseCurrency;
    }
    function getCurrencies() {
      const currencies = c.getOptionalConfig("costInsights.currencies");
      if (currencies) {
        return currencies.keys().map((key) => ({
          label: currencies.getString(`${key}.label`),
          unit: currencies.getString(`${key}.unit`),
          kind: currencies.getOptionalString(`${key}.kind`) || null,
          prefix: currencies.getOptionalString(`${key}.prefix`),
          rate: currencies.getOptionalNumber(`${key}.rate`)
        }));
      }
      return defaultCurrencies;
    }
    function getIcons() {
      const products = c.getOptionalConfig("costInsights.products");
      if (products) {
        return products.keys().map((k) => ({
          kind: k,
          component: getIcon(products.getOptionalString(`${k}.icon`))
        }));
      }
      return [];
    }
    function getEngineerCost() {
      return c.getNumber("costInsights.engineerCost");
    }
    function getEngineerThreshold() {
      return c.getOptionalNumber("costInsights.engineerThreshold") ?? defaultState.engineerThreshold;
    }
    function getHideTrendLine() {
      return c.getOptionalBoolean("costInsights.hideTrendLine") ?? defaultState.hideTrendLine;
    }
    function getConfig() {
      const baseCurrency = getBaseCurrency();
      const products = getProducts();
      const metrics = getMetrics();
      const engineerCost = getEngineerCost();
      const engineerThreshold = getEngineerThreshold();
      const hideTrendLine = getHideTrendLine();
      const icons = getIcons();
      const currencies = getCurrencies();
      validateMetrics(metrics);
      validateCurrencies(currencies);
      setConfig((prevState) => ({
        ...prevState,
        baseCurrency,
        metrics,
        products,
        engineerCost,
        engineerThreshold,
        hideTrendLine,
        icons,
        currencies
      }));
      setLoading(false);
    }
    getConfig();
  }, []);
  if (loading) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(ConfigContext.Provider, { value: config }, children);
};
function useConfig() {
  const config = useContext(ConfigContext);
  return config ? config : assertNever();
}
function assertNever() {
  throw new Error("Cannot use useConfig outside of ConfigProvider");
}

export { ConfigContext, ConfigProvider, useConfig };
//# sourceMappingURL=useConfig.esm.js.map
