{"version":3,"file":"useConfig.esm.js","sources":["../../src/hooks/useConfig.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { Config as BackstageConfig } from '@backstage/config';\nimport { Currency, EngineerThreshold, Icon } from '../types';\nimport {\n  Metric,\n  Product,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { getIcon } from '../utils/navigation';\nimport { validateCurrencies, validateMetrics } from '../utils/config';\nimport { createCurrencyFormat, defaultCurrencies } from '../utils/currency';\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\n\n/*\n * Config schema 2021-08-05\n *\n * costInsights:\n *   engineerCost: 200000\n *   products:\n *     productA:\n *       name: Product A\n *       icon: storage\n *     productB:\n *       name: Product B\n *       icon: data\n *   metrics:\n *     metricA:\n *       name: Metric A\n *       default: true\n *     metricB:\n *       name: Metric B\n *   baseCurrency:\n *     locale: nl-NL\n *     options:\n *       currency: EUR\n *       minimumFractionDigits: 3\n *   currencies:\n *     currencyA:\n *       label: Currency A\n *       unit: Unit A\n *     currencyB:\n *       label: Currency B\n *       kind: CURRENCY_B\n *       unit: Unit B\n *       prefix: B\n *       rate: 3.5\n */\n\n/** @public */\nexport type ConfigContextProps = {\n  baseCurrency: Intl.NumberFormat;\n  metrics: Metric[];\n  products: Product[];\n  icons: Icon[];\n  engineerCost: number;\n  engineerThreshold: number;\n  hideTrendLine: boolean;\n  currencies: Currency[];\n};\n\nexport const ConfigContext = createContext<ConfigContextProps | undefined>(\n  undefined,\n);\n\nconst defaultState: ConfigContextProps = {\n  baseCurrency: createCurrencyFormat(),\n  metrics: [],\n  products: [],\n  icons: [],\n  engineerCost: 0,\n  engineerThreshold: EngineerThreshold,\n  hideTrendLine: false,\n  currencies: defaultCurrencies,\n};\n\nexport const ConfigProvider = ({ children }: PropsWithChildren<{}>) => {\n  const c: BackstageConfig = useApi(configApiRef);\n  const [config, setConfig] = useState(defaultState);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    function getProducts(): Product[] {\n      const products = c.getOptionalConfig('costInsights.products');\n      if (products) {\n        return products.keys().map(key => ({\n          kind: key,\n          name: products.getString(`${key}.name`),\n          aggregation: [0, 0],\n        }));\n      }\n      return [];\n    }\n\n    function getMetrics(): Metric[] {\n      const metrics = c.getOptionalConfig('costInsights.metrics');\n      if (metrics) {\n        return metrics.keys().map(key => ({\n          kind: key,\n          name: metrics.getString(`${key}.name`),\n          default: metrics.getOptionalBoolean(`${key}.default`) ?? false,\n        }));\n      }\n\n      return [];\n    }\n\n    function getBaseCurrency(): Intl.NumberFormat {\n      const baseCurrency = c.getOptionalConfig('costInsights.baseCurrency');\n      if (baseCurrency) {\n        const options = baseCurrency.getOptionalConfig('options');\n        return new Intl.NumberFormat(\n          baseCurrency.getOptionalString('locale'),\n          options\n            ? {\n                localeMatcher: options.getOptionalString('localeMatcher'),\n                style: 'currency',\n                currency: options.getOptionalString('currency'),\n                currencySign: options.getOptionalString('currencySign'),\n                useGrouping: options.getOptionalBoolean('useGrouping'),\n                minimumIntegerDigits: options.getOptionalNumber(\n                  'minimumIntegerDigits',\n                ),\n                minimumFractionDigits: options.getOptionalNumber(\n                  'minimumFractionDigits',\n                ),\n                maximumFractionDigits: options.getOptionalNumber(\n                  'maximumFractionDigits',\n                ),\n                minimumSignificantDigits: options.getOptionalNumber(\n                  'minimumSignificantDigits',\n                ),\n                maximumSignificantDigits: options.getOptionalNumber(\n                  'maximumSignificantDigits',\n                ),\n              }\n            : undefined,\n        );\n      }\n\n      return defaultState.baseCurrency;\n    }\n\n    function getCurrencies(): Currency[] {\n      const currencies = c.getOptionalConfig('costInsights.currencies');\n      if (currencies) {\n        return currencies.keys().map(key => ({\n          label: currencies.getString(`${key}.label`),\n          unit: currencies.getString(`${key}.unit`),\n          kind: currencies.getOptionalString(`${key}.kind`) || null,\n          prefix: currencies.getOptionalString(`${key}.prefix`),\n          rate: currencies.getOptionalNumber(`${key}.rate`),\n        }));\n      }\n\n      return defaultCurrencies;\n    }\n\n    function getIcons(): Icon[] {\n      const products = c.getOptionalConfig('costInsights.products');\n      if (products) {\n        return products.keys().map(k => ({\n          kind: k,\n          component: getIcon(products.getOptionalString(`${k}.icon`)),\n        }));\n      }\n      return [];\n    }\n\n    function getEngineerCost(): number {\n      return c.getNumber('costInsights.engineerCost');\n    }\n\n    function getEngineerThreshold(): number {\n      return (\n        c.getOptionalNumber('costInsights.engineerThreshold') ??\n        defaultState.engineerThreshold\n      );\n    }\n\n    function getHideTrendLine(): boolean {\n      return (\n        c.getOptionalBoolean('costInsights.hideTrendLine') ??\n        defaultState.hideTrendLine\n      );\n    }\n\n    function getConfig() {\n      const baseCurrency = getBaseCurrency();\n      const products = getProducts();\n      const metrics = getMetrics();\n      const engineerCost = getEngineerCost();\n      const engineerThreshold = getEngineerThreshold();\n      const hideTrendLine = getHideTrendLine();\n      const icons = getIcons();\n      const currencies = getCurrencies();\n\n      validateMetrics(metrics);\n      validateCurrencies(currencies);\n\n      setConfig(prevState => ({\n        ...prevState,\n        baseCurrency,\n        metrics,\n        products,\n        engineerCost,\n        engineerThreshold,\n        hideTrendLine,\n        icons,\n        currencies,\n      }));\n\n      setLoading(false);\n    }\n\n    getConfig();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <ConfigContext.Provider value={config}>{children}</ConfigContext.Provider>\n  );\n};\n\nexport function useConfig(): ConfigContextProps {\n  const config = useContext(ConfigContext);\n  return config ? config : assertNever();\n}\n\nfunction assertNever(): never {\n  throw new Error('Cannot use useConfig outside of ConfigProvider');\n}\n"],"names":[],"mappings":"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"}