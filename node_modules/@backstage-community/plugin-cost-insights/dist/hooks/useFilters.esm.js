import React, { useState, useEffect, useContext } from 'react';
import Alert from '@material-ui/lab/Alert';
import { useNavigate, useLocation } from 'react-router-dom';
import { validate, getInitialPageState, getInitialProductState, stringify } from '../utils/history.esm.js';
import { useGroups } from './useGroups.esm.js';
import { useConfig } from './useConfig.esm.js';

const FilterContext = React.createContext(void 0);
const FilterProvider = ({ children }) => {
  const config = useConfig();
  const navigate = useNavigate();
  const location = useLocation();
  const groups = useGroups();
  const [error, setError] = useState(null);
  const [pageFilters, setPageFilters] = useState(null);
  const [productFilters, setProductFilters] = useState(null);
  useEffect(() => {
    async function setPageFiltersFromLocation() {
      try {
        const queryParams = await validate(location.search);
        const defaultMetric = config.metrics.find((m) => m.default)?.kind ?? null;
        const initialPageState = getInitialPageState(groups, queryParams);
        const initialProductState = getInitialProductState(config);
        setProductFilters(initialProductState);
        setPageFilters({ ...initialPageState, metric: defaultMetric });
      } catch (e) {
        setError(e);
      }
    }
    setPageFiltersFromLocation();
  }, [groups]);
  useEffect(() => {
    function setLocationFromPageFilters(filters) {
      const queryString = stringify({
        group: filters.group,
        ...filters.project ? { project: filters.project } : {}
      });
      navigate({ ...location, search: `?${queryString}` });
    }
    if (pageFilters) {
      setLocationFromPageFilters(pageFilters);
    }
  }, [pageFilters]);
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.message);
  }
  if (!pageFilters || !productFilters) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(
    FilterContext.Provider,
    {
      value: { pageFilters, productFilters, setPageFilters, setProductFilters }
    },
    children
  );
};
function useFilters(mapFiltersToProps) {
  const context = useContext(FilterContext);
  return context ? mapFiltersToProps(context) : assertNever();
}
function assertNever() {
  throw Error("Cannot use useFilters outside of FilterProvider");
}

export { FilterContext, FilterProvider, useFilters };
//# sourceMappingURL=useFilters.esm.js.map
