import React, { useState, useEffect, useContext } from 'react';
import Alert from '@material-ui/lab/Alert';
import { costInsightsApiRef } from '../api/CostInsightsApi.esm.js';
import { useLoading } from './useLoading.esm.js';
import { DefaultLoadingAction } from '../utils/loading.esm.js';
import { useApi, identityApiRef } from '@backstage/core-plugin-api';
import { parseEntityRef, DEFAULT_NAMESPACE } from '@backstage/catalog-model';

const mapLoadingToProps = ({
  dispatch
}) => ({
  dispatchLoadingGroups: (isLoading) => dispatch({ [DefaultLoadingAction.UserGroups]: isLoading })
});
const GroupsContext = React.createContext(void 0);
const GroupsProvider = ({ children }) => {
  const identityApi = useApi(identityApiRef);
  const client = useApi(costInsightsApiRef);
  const [error, setError] = useState(null);
  const { dispatchLoadingGroups } = useLoading(mapLoadingToProps);
  const [groups, setGroups] = useState(null);
  useEffect(() => {
    dispatchLoadingGroups(true);
    async function getUserGroups() {
      try {
        const { userEntityRef } = await identityApi.getBackstageIdentity();
        const { name: userId } = parseEntityRef(userEntityRef, {
          defaultKind: "User",
          defaultNamespace: DEFAULT_NAMESPACE
        });
        const g = await client.getUserGroups(userId);
        setGroups(g);
      } catch (e) {
        setError(e);
      } finally {
        dispatchLoadingGroups(false);
      }
    }
    getUserGroups();
  }, [client]);
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.message);
  }
  if (!groups) return null;
  return /* @__PURE__ */ React.createElement(GroupsContext.Provider, { value: { groups } }, children);
};
function useGroups() {
  const context = useContext(GroupsContext);
  return context ? context.groups : assertNever();
}
function assertNever() {
  throw Error("Cannot use useGroups outside of GroupsProvider");
}

export { GroupsContext, GroupsProvider, useGroups };
//# sourceMappingURL=useGroups.esm.js.map
