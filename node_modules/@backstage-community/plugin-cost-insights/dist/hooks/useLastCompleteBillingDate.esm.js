import React, { useState, useEffect, useContext } from 'react';
import * as yup from 'yup';
import Alert from '@material-ui/lab/Alert';
import { costInsightsApiRef } from '../api/CostInsightsApi.esm.js';
import { useLoading } from './useLoading.esm.js';
import { DefaultLoadingAction } from '../utils/loading.esm.js';
import { useApi } from '@backstage/core-plugin-api';

const mapLoadingToProps = ({
  dispatch
}) => ({
  dispatchLoadingBillingDate: (isLoading) => dispatch({ [DefaultLoadingAction.LastCompleteBillingDate]: isLoading })
});
const BillingDateContext = React.createContext(void 0);
const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
const dateFormatSchema = yup.string().matches(dateRegex, {
  message: "Unsupported billing date format: ${value}. Date should be in YYYY-MM-DD format.",
  excludeEmptyString: true
});
const BillingDateProvider = ({ children }) => {
  const client = useApi(costInsightsApiRef);
  const [error, setError] = useState(null);
  const { dispatchLoadingBillingDate } = useLoading(mapLoadingToProps);
  const [lastCompleteBillingDate, setLastCompeteBillingDate] = useState(null);
  useEffect(() => {
    dispatchLoadingBillingDate(true);
    async function getLastCompleteBillingDate() {
      try {
        const d = await client.getLastCompleteBillingDate();
        const validDate = await dateFormatSchema.validate(d);
        if (validDate) setLastCompeteBillingDate(validDate);
      } catch (e) {
        setError(e);
      } finally {
        dispatchLoadingBillingDate(false);
      }
    }
    getLastCompleteBillingDate();
  }, [client]);
  if (error) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.message);
  }
  if (!lastCompleteBillingDate) return null;
  return /* @__PURE__ */ React.createElement(
    BillingDateContext.Provider,
    {
      value: {
        lastCompleteBillingDate
      }
    },
    children
  );
};
function useLastCompleteBillingDate() {
  const context = useContext(BillingDateContext);
  return context ? context.lastCompleteBillingDate : assertNever();
}
function assertNever() {
  throw Error(
    "Cannot use useLastCompleteBillingDate outside of BillingDateProvider"
  );
}

export { BillingDateContext, BillingDateProvider, dateRegex, useLastCompleteBillingDate };
//# sourceMappingURL=useLastCompleteBillingDate.esm.js.map
