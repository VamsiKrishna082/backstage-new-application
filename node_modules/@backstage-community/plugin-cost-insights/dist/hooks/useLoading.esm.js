import React, { createContext, useMemo, useReducer, useState, useEffect, useContext } from 'react';
import Backdrop from '@material-ui/core/Backdrop';
import CircularProgress from '@material-ui/core/CircularProgress';
import { INITIAL_LOADING_ACTIONS, DefaultLoadingAction, getDefaultState } from '../utils/loading.esm.js';
import { useBackdropStyles } from '../utils/styles.esm.js';
import { useConfig } from './useConfig.esm.js';

const LoadingContext = createContext(
  void 0
);
function reducer(prevState, action) {
  return {
    ...prevState,
    ...action
  };
}
const LoadingProvider = ({ children }) => {
  const classes = useBackdropStyles();
  const { products } = useConfig();
  const actions = useMemo(
    () => INITIAL_LOADING_ACTIONS.filter(
      (action) => products.length || action !== DefaultLoadingAction.CostInsightsProducts
    ),
    [products]
  );
  const [state, dispatch] = useReducer(reducer, getDefaultState(actions));
  const [isBackdropVisible, setBackdropVisible] = useState(false);
  useEffect(() => {
    function displayLoadingBackdrop() {
      setBackdropVisible(
        !state[DefaultLoadingAction.CostInsightsInitial] && Object.values(state).some((l) => l)
      );
    }
    displayLoadingBackdrop();
  }, [state, setBackdropVisible]);
  return /* @__PURE__ */ React.createElement(LoadingContext.Provider, { value: { state, actions, dispatch } }, children, /* @__PURE__ */ React.createElement(Backdrop, { open: isBackdropVisible, classes }, /* @__PURE__ */ React.createElement(CircularProgress, null)));
};
function useLoading(mapLoadingToProps) {
  const context = useContext(LoadingContext);
  if (!context) {
    assertNever();
  }
  return mapLoadingToProps({
    state: context.state,
    actions: context.actions,
    dispatch: context.dispatch
  });
}
function assertNever() {
  throw Error("useLoading cannot be used outside of LoadingProvider");
}

export { LoadingContext, LoadingProvider, useLoading };
//# sourceMappingURL=useLoading.esm.js.map
