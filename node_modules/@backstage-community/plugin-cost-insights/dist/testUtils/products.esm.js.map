{"version":3,"file":"products.esm.js","sources":["../../src/testUtils/products.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  Product,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { findAlways } from '../utils/assert';\n\ntype mockEntityRenderer<T> = (entity: T) => T;\n\nexport const createMockEntity = (\n  callback?: mockEntityRenderer<Entity>,\n): Entity => {\n  const defaultEntity: Entity = {\n    id: 'test-entity',\n    aggregation: [100, 200],\n    entities: {},\n    change: {\n      ratio: 0,\n      amount: 0,\n    },\n  };\n\n  if (typeof callback === 'function') {\n    return callback({ ...defaultEntity });\n  }\n  return { ...defaultEntity };\n};\n\nexport const createMockProduct = (\n  callback?: mockEntityRenderer<Product>,\n): Product => {\n  const defaultProduct: Product = {\n    kind: 'compute-engine',\n    name: 'Compute Engine',\n  };\n  if (typeof callback === 'function') {\n    return callback({ ...defaultProduct });\n  }\n  return { ...defaultProduct };\n};\n\nexport const MockProductTypes: Record<string, string> = {\n  'compute-engine': 'Compute Engine',\n  'cloud-dataflow': 'Cloud Dataflow',\n  'cloud-storage': 'Cloud Storage',\n  'big-query': 'Big Query',\n  'big-table': 'BigTable',\n  'cloud-pub-sub': 'Cloud Pub/Sub',\n};\n\nexport const MockProducts: Product[] = Object.keys(MockProductTypes).map(\n  productType =>\n    createMockProduct(() => ({\n      kind: productType,\n      name: MockProductTypes[productType],\n    })),\n);\n\nexport const MockComputeEngine = findAlways(\n  MockProducts,\n  p => p.kind === 'compute-engine',\n);\nexport const MockCloudDataflow = findAlways(\n  MockProducts,\n  p => p.kind === 'cloud-dataflow',\n);\nexport const MockCloudStorage = findAlways(\n  MockProducts,\n  p => p.kind === 'cloud-storage',\n);\nexport const MockBigQuery = findAlways(\n  MockProducts,\n  p => p.kind === 'big-query',\n);\nexport const MockBigtable = findAlways(\n  MockProducts,\n  p => p.kind === 'big-table',\n);\n"],"names":[],"mappings":";;AA2Ca,MAAA,iBAAA,GAAoB,CAC/B,QACY,KAAA;AACZ,EAAA,MAAM,cAA0B,GAAA;AAAA,IAC9B,IAAM,EAAA,gBAAA;AAAA,IACN,IAAM,EAAA;AAAA,GACR;AACA,EAAI,IAAA,OAAO,aAAa,UAAY,EAAA;AAClC,IAAA,OAAO,QAAS,CAAA,EAAE,GAAG,cAAA,EAAgB,CAAA;AAAA;AAEvC,EAAO,OAAA,EAAE,GAAG,cAAe,EAAA;AAC7B;AAEO,MAAM,gBAA2C,GAAA;AAAA,EACtD,gBAAkB,EAAA,gBAAA;AAAA,EAClB,gBAAkB,EAAA,gBAAA;AAAA,EAClB,eAAiB,EAAA,eAAA;AAAA,EACjB,WAAa,EAAA,WAAA;AAAA,EACb,WAAa,EAAA,UAAA;AAAA,EACb,eAAiB,EAAA;AACnB;AAEO,MAAM,YAA0B,GAAA,MAAA,CAAO,IAAK,CAAA,gBAAgB,CAAE,CAAA,GAAA;AAAA,EACnE,CAAA,WAAA,KACE,kBAAkB,OAAO;AAAA,IACvB,IAAM,EAAA,WAAA;AAAA,IACN,IAAA,EAAM,iBAAiB,WAAW;AAAA,GAClC,CAAA;AACN;AAEiC,UAAA;AAAA,EAC/B,YAAA;AAAA,EACA,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA;AAClB;AACiC,UAAA;AAAA,EAC/B,YAAA;AAAA,EACA,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA;AAClB;AACgC,UAAA;AAAA,EAC9B,YAAA;AAAA,EACA,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA;AAClB;AAC4B,UAAA;AAAA,EAC1B,YAAA;AAAA,EACA,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA;AAClB;AAC4B,UAAA;AAAA,EAC1B,YAAA;AAAA,EACA,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA;AAClB;;;;"}