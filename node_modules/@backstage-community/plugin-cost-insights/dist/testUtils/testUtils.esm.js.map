{"version":3,"file":"testUtils.esm.js","sources":["../../src/testUtils/testUtils.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateTime } from 'luxon';\nimport regression, { DataPoint } from 'regression';\nimport { Duration, DEFAULT_DATE_FORMAT } from '../types';\nimport {\n  ChangeStatistic,\n  Entity,\n  Trendline,\n  DateAggregation,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { inclusiveEndDateOf, inclusiveStartDateOf } from '../utils/duration';\nimport {\n  MockComputeEngineInsights,\n  MockCloudDataflowInsights,\n  MockCloudStorageInsights,\n  MockBigQueryInsights,\n  MockEventsInsights,\n} from './mockData';\n\ntype IntervalFields = {\n  duration: Duration;\n  endDate: string;\n};\n\nfunction parseIntervals(intervals: string): IntervalFields {\n  const match = intervals.match(\n    /\\/(?<duration>P\\d+[DM])\\/(?<date>\\d{4}-\\d{2}-\\d{2})/,\n  );\n  if (Object.keys(match?.groups || {}).length !== 2) {\n    throw new Error(`Invalid intervals: ${intervals}`);\n  }\n  const { duration, date } = match!.groups!;\n  return {\n    duration: duration as Duration,\n    endDate: date,\n  };\n}\n\nexport function aggregationFor(\n  intervals: string,\n  baseline: number,\n): DateAggregation[] {\n  const { duration, endDate } = parseIntervals(intervals);\n  const inclusiveEndDate = inclusiveEndDateOf(duration, endDate);\n  const days = DateTime.fromISO(endDate).diff(\n    DateTime.fromISO(inclusiveStartDateOf(duration, inclusiveEndDate)),\n    'days',\n  ).days;\n\n  function nextDelta(): number {\n    const varianceFromBaseline = 0.15;\n    // Let's give positive vibes in trendlines - higher change for positive delta with >0.5 value\n    const positiveTrendChance = 0.55;\n    const normalization = positiveTrendChance - 1;\n    return baseline * (Math.random() + normalization) * varianceFromBaseline;\n  }\n\n  return [...Array(days).keys()].reduce(\n    (values: DateAggregation[], i: number): DateAggregation[] => {\n      const last = values.length ? values[values.length - 1].amount : baseline;\n      const date = DateTime.fromISO(\n        inclusiveStartDateOf(duration, inclusiveEndDate),\n      )\n        .plus({ days: i })\n        .toFormat(DEFAULT_DATE_FORMAT);\n      const amount = Math.max(0, last + nextDelta());\n      values.push({\n        date: date,\n        amount: amount,\n      });\n      return values;\n    },\n    [],\n  );\n}\n\nexport function changeOf(aggregation: DateAggregation[]): ChangeStatistic {\n  const firstAmount = aggregation.length ? aggregation[0].amount : 0;\n  const lastAmount = aggregation.length\n    ? aggregation[aggregation.length - 1].amount\n    : 0;\n\n  // if either the first or last amounts are zero, the rate of increase/decrease is infinite\n  if (!firstAmount || !lastAmount) {\n    return {\n      amount: lastAmount - firstAmount,\n    };\n  }\n\n  return {\n    ratio: (lastAmount - firstAmount) / firstAmount,\n    amount: lastAmount - firstAmount,\n  };\n}\n\nexport function trendlineOf(aggregation: DateAggregation[]): Trendline {\n  const data: ReadonlyArray<DataPoint> = aggregation.map(a => [\n    Date.parse(a.date) / 1000,\n    a.amount,\n  ]);\n  const result = regression.linear(data, { precision: 5 });\n  return {\n    slope: result.equation[0],\n    intercept: result.equation[1],\n  };\n}\n\nexport function entityOf(product: string): Entity {\n  switch (product) {\n    case 'computeEngine':\n      return MockComputeEngineInsights;\n    case 'cloudDataflow':\n      return MockCloudDataflowInsights;\n    case 'cloudStorage':\n      return MockCloudStorageInsights;\n    case 'bigQuery':\n      return MockBigQueryInsights;\n    case 'events':\n      return MockEventsInsights;\n    default:\n      throw new Error(\n        `Cannot get insights for ${product}. Make sure product matches product property in app-info.yaml`,\n      );\n  }\n}\n\nexport const getGroupedProducts = (intervals: string) => [\n  {\n    id: 'Cloud Dataflow',\n    aggregation: aggregationFor(intervals, 1_700),\n  },\n  {\n    id: 'Compute Engine',\n    aggregation: aggregationFor(intervals, 350),\n  },\n  {\n    id: 'Cloud Storage',\n    aggregation: aggregationFor(intervals, 1_300),\n  },\n  {\n    id: 'BigQuery',\n    aggregation: aggregationFor(intervals, 2_000),\n  },\n  {\n    id: 'Cloud SQL',\n    aggregation: aggregationFor(intervals, 750),\n  },\n  {\n    id: 'Cloud Spanner',\n    aggregation: aggregationFor(intervals, 50),\n  },\n  {\n    id: 'Cloud Pub/Sub',\n    aggregation: aggregationFor(intervals, 1_000),\n  },\n  {\n    id: 'Cloud Bigtable',\n    aggregation: aggregationFor(intervals, 250),\n  },\n];\n\nexport const getGroupedProjects = (intervals: string) => [\n  {\n    id: 'project-a',\n    aggregation: aggregationFor(intervals, 1_700),\n  },\n  {\n    id: 'project-b',\n    aggregation: aggregationFor(intervals, 350),\n  },\n  {\n    id: 'project-c',\n    aggregation: aggregationFor(intervals, 1_300),\n  },\n];\n"],"names":[],"mappings":"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"}