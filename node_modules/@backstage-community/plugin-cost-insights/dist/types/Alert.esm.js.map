{"version":3,"file":"Alert.esm.js","sources":["../../src/types/Alert.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ForwardRefExoticComponent, RefAttributes } from 'react';\nimport {\n  ChangeStatistic,\n  Maybe,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { Duration } from './Duration';\n\n/**\n * Generic alert type with required fields for display. The `element` field will be rendered in\n * the Cost Insights \"Action Items\" section. This should use data fetched in the CostInsightsApi\n * implementation to render an InfoCard or other visualization.\n *\n * The alert type exposes hooks which can be used to enable and access various events,\n * such as when a user dismisses or snoozes an alert. Default forms and buttons\n * will be rendered if a hook is defined.\n *\n * Each default form can be overridden with a custom component. It must be implemented using\n * React.forwardRef. See https://reactjs.org/docs/forwarding-refs\n *\n * Errors thrown within hooks will generate a snackbar error notification.\n *\n * @public\n */\nexport type Alert = {\n  title: string | JSX.Element;\n  subtitle: string | JSX.Element;\n  element?: JSX.Element;\n  status?: AlertStatus;\n  url?: string;\n  buttonText?: string; // Default: View Instructions\n  SnoozeForm?: Maybe<AlertForm>;\n  AcceptForm?: Maybe<AlertForm>;\n  DismissForm?: Maybe<AlertForm>;\n  onSnoozed?(options: AlertOptions): Promise<Alert[]>;\n  onAccepted?(options: AlertOptions): Promise<Alert[]>;\n  onDismissed?(options: AlertOptions): Promise<Alert[]>;\n};\n\n/** @public */\nexport type AlertForm<\n  A extends Alert = any,\n  Data = any,\n> = ForwardRefExoticComponent<\n  AlertFormProps<A, Data> & RefAttributes<HTMLFormElement>\n>;\n\n/** @public */\nexport interface AlertOptions<T = any> {\n  data: T;\n  group: string;\n}\n\n/**\n * Default snooze form intervals are expressed using an ISO 8601 repeating interval string.\n * For example, R1/P7D/2020-09-02 for 1 week or R1/P30D/2020-09-02 for 1 month.\n *\n * For example, if a user dismisses an alert on Monday January 01 for 1 week,\n * it can be re-served on Monday, January 08. 7 calendar days from January 02,\n * inclusive of the last day.\n *\n * https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals\n *\n * @public\n */\nexport interface AlertSnoozeFormData {\n  intervals: string;\n}\n\n/** @public */\nexport interface AlertDismissFormData {\n  other: Maybe<string>;\n  reason: AlertDismissReason;\n  feedback: Maybe<string>;\n}\n\n// TODO: Convert enum to literal\n/** @public */\nexport enum AlertStatus {\n  Snoozed = 'snoozed',\n  Accepted = 'accepted',\n  Dismissed = 'dismissed',\n}\n\n/** @public */\nexport type AlertFormProps<A extends Alert, FormData = {}> = {\n  alert: A;\n  onSubmit: (data: FormData) => void;\n  disableSubmit: (isDisabled: boolean) => void;\n};\n\n/** @public */\nexport interface AlertDismissOption {\n  label: string;\n  reason: string;\n}\n\n/** @public */\nexport enum AlertDismissReason {\n  Other = 'other',\n  Resolved = 'resolved',\n  Expected = 'expected',\n  Seasonal = 'seasonal',\n  Migration = 'migration',\n  NotApplicable = 'not-applicable',\n}\n\n/** @public */\nexport const AlertDismissOptions: AlertDismissOption[] = [\n  {\n    reason: AlertDismissReason.Resolved,\n    label: 'This action item is now resolved.',\n  },\n  {\n    reason: AlertDismissReason.Seasonal,\n    label: 'This is an expected increase at this time of year.',\n  },\n  {\n    reason: AlertDismissReason.Migration,\n    label: 'This increase is from a migration in process.',\n  },\n  {\n    reason: AlertDismissReason.Expected,\n    label: 'This is an expected increase due to our team’s priorities.',\n  },\n  {\n    reason: AlertDismissReason.NotApplicable,\n    label: 'This action item doesn’t make sense for my team.',\n  },\n  {\n    reason: AlertDismissReason.Other,\n    label: 'Other (please specify)',\n  },\n];\n\n/** @public */\nexport type AlertSnoozeOption = {\n  label: string;\n  duration: Duration;\n};\n\n/** @public */\nexport const AlertSnoozeOptions: AlertSnoozeOption[] = [\n  {\n    duration: Duration.P7D,\n    label: '1 Week',\n  },\n  {\n    duration: Duration.P30D,\n    label: '1 Month',\n  },\n  {\n    duration: Duration.P90D,\n    label: '1 Quarter',\n  },\n];\n\n/** @public */\nexport interface AlertCost {\n  id: string;\n  aggregation: [number, number];\n}\n\n/** @public */\nexport interface ResourceData {\n  previous: number;\n  current: number;\n  name: Maybe<string>;\n}\n\n/** @public */\nexport interface BarChartOptions {\n  previousFill: string;\n  currentFill: string;\n  previousName: string;\n  currentName: string;\n}\n\n/**\n * @public\n * @deprecated use BarChartOptions instead\n */\nexport interface BarChartData extends BarChartOptions {}\n\n/** @public */\nexport enum DataKey {\n  Previous = 'previous',\n  Current = 'current',\n  Name = 'name',\n}\n\n/** @public */\nexport interface ProjectGrowthData {\n  project: string;\n  periodStart: string;\n  periodEnd: string;\n  aggregation: [number, number];\n  change: ChangeStatistic;\n  products: Array<AlertCost>;\n}\n\n/** @public */\nexport interface UnlabeledDataflowData {\n  periodStart: string;\n  periodEnd: string;\n  projects: Array<UnlabeledDataflowAlertProject>;\n  unlabeledCost: number;\n  labeledCost: number;\n}\n\n/** @public */\nexport interface UnlabeledDataflowAlertProject {\n  id: string;\n  unlabeledCost: number;\n  labeledCost: number;\n}\n"],"names":["AlertStatus","AlertDismissReason","DataKey"],"mappings":";;AA6FY,IAAA,WAAA,qBAAAA,YAAL,KAAA;AACL,EAAAA,aAAA,SAAU,CAAA,GAAA,SAAA;AACV,EAAAA,aAAA,UAAW,CAAA,GAAA,UAAA;AACX,EAAAA,aAAA,WAAY,CAAA,GAAA,WAAA;AAHF,EAAAA,OAAAA,YAAAA;AAAA,CAAA,EAAA,WAAA,IAAA,EAAA;AAoBA,IAAA,kBAAA,qBAAAC,mBAAL,KAAA;AACL,EAAAA,oBAAA,OAAQ,CAAA,GAAA,OAAA;AACR,EAAAA,oBAAA,UAAW,CAAA,GAAA,UAAA;AACX,EAAAA,oBAAA,UAAW,CAAA,GAAA,UAAA;AACX,EAAAA,oBAAA,UAAW,CAAA,GAAA,UAAA;AACX,EAAAA,oBAAA,WAAY,CAAA,GAAA,WAAA;AACZ,EAAAA,oBAAA,eAAgB,CAAA,GAAA,gBAAA;AANN,EAAAA,OAAAA,mBAAAA;AAAA,CAAA,EAAA,kBAAA,IAAA,EAAA;AAUL,MAAM,mBAA4C,GAAA;AAAA,EACvD;AAAA,IACE,MAAQ,EAAA,UAAA;AAAA,IACR,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,MAAQ,EAAA,UAAA;AAAA,IACR,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,MAAQ,EAAA,WAAA;AAAA,IACR,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,MAAQ,EAAA,UAAA;AAAA,IACR,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,MAAQ,EAAA,gBAAA;AAAA,IACR,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,MAAQ,EAAA,OAAA;AAAA,IACR,KAAO,EAAA;AAAA;AAEX;AASO,MAAM,kBAA0C,GAAA;AAAA,EACrD;AAAA,IACE,UAAU,QAAS,CAAA,GAAA;AAAA,IACnB,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,UAAU,QAAS,CAAA,IAAA;AAAA,IACnB,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,UAAU,QAAS,CAAA,IAAA;AAAA,IACnB,KAAO,EAAA;AAAA;AAEX;AA8BY,IAAA,OAAA,qBAAAC,QAAL,KAAA;AACL,EAAAA,SAAA,UAAW,CAAA,GAAA,UAAA;AACX,EAAAA,SAAA,SAAU,CAAA,GAAA,SAAA;AACV,EAAAA,SAAA,MAAO,CAAA,GAAA,MAAA;AAHG,EAAAA,OAAAA,QAAAA;AAAA,CAAA,EAAA,OAAA,IAAA,EAAA;;;;"}