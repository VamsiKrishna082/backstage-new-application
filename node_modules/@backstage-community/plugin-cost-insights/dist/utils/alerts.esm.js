import { AlertStatus } from '../types/Alert.esm.js';
import { AlertAcceptForm } from '../forms/AlertAcceptForm.esm.js';
import { AlertSnoozeForm } from '../forms/AlertSnoozeForm.esm.js';
import { AlertDismissForm } from '../forms/AlertDismissForm.esm.js';

const createAlertHandler = (status) => (alert) => alert.status === status;
const isAlertActive = (alert) => !hasProperty(alert, "status");
const isAlertSnoozed = createAlertHandler(AlertStatus.Snoozed);
const isAlertAccepted = createAlertHandler(AlertStatus.Accepted);
const isAlertDismissed = createAlertHandler(AlertStatus.Dismissed);
const createStatusHandler = (status) => (s) => s === status;
const isStatusSnoozed = createStatusHandler(AlertStatus.Snoozed);
const isStatusAccepted = createStatusHandler(AlertStatus.Accepted);
const isStatusDismissed = createStatusHandler(AlertStatus.Dismissed);
const createAlertEventHandler = (onEvent) => (alert) => hasProperty(alert, onEvent);
const isSnoozeEnabled = createAlertEventHandler("onSnoozed");
const isAcceptEnabled = createAlertEventHandler("onAccepted");
const isDismissEnabled = createAlertEventHandler("onDismissed");
const createFormEnabledHandler = (Form) => (alert) => {
  if (!alert) return false;
  if (alert[Form] === null) return false;
  switch (Form) {
    case "SnoozeForm":
      return isSnoozeEnabled(alert);
    case "AcceptForm":
      return isAcceptEnabled(alert);
    case "DismissForm":
      return isDismissEnabled(alert);
    default:
      return false;
  }
};
const isSnoozeFormEnabled = createFormEnabledHandler("SnoozeForm");
const isAcceptFormEnabled = createFormEnabledHandler("AcceptForm");
const isDismissFormEnabled = createFormEnabledHandler("DismissForm");
function formOf(alert, status) {
  switch (status) {
    case AlertStatus.Snoozed: {
      const SnoozeForm = alert?.SnoozeForm ?? AlertSnoozeForm;
      return isSnoozeFormEnabled(alert) ? SnoozeForm : null;
    }
    case AlertStatus.Accepted: {
      const AcceptForm = alert?.AcceptForm ?? AlertAcceptForm;
      return isAcceptFormEnabled(alert) ? AcceptForm : null;
    }
    case AlertStatus.Dismissed: {
      const DismissForm = alert?.DismissForm ?? AlertDismissForm;
      return isDismissFormEnabled(alert) ? DismissForm : null;
    }
    default:
      return null;
  }
}
function choose(status, values, none) {
  switch (status) {
    case AlertStatus.Snoozed:
      return values[0];
    case AlertStatus.Accepted:
      return values[1];
    case AlertStatus.Dismissed:
      return values[2];
    default:
      return none;
  }
}
function hasProperty(alert, prop) {
  return prop in (alert ?? {});
}
const sumOfAllAlerts = (sum, alerts) => sum + alerts.length;

export { choose, formOf, hasProperty, isAcceptEnabled, isAcceptFormEnabled, isAlertAccepted, isAlertActive, isAlertDismissed, isAlertSnoozed, isDismissEnabled, isDismissFormEnabled, isSnoozeEnabled, isSnoozeFormEnabled, isStatusAccepted, isStatusDismissed, isStatusSnoozed, sumOfAllAlerts };
//# sourceMappingURL=alerts.esm.js.map
