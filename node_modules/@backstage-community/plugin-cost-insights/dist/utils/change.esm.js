import '../types/Alert.esm.js';
import { ChangeThreshold, GrowthType } from '../types/ChangeStatistic.esm.js';
import { Duration, DateTime } from 'luxon';
import { inclusiveStartDateOf } from './duration.esm.js';
import { notEmpty } from './assert.esm.js';

function growthOf(change, engineerThreshold) {
  const exceedsEngineerThreshold = Math.abs(change.amount) >= engineerThreshold;
  if (notEmpty(change.ratio)) {
    if (exceedsEngineerThreshold && change.ratio >= ChangeThreshold.upper) {
      return GrowthType.Excess;
    }
    if (exceedsEngineerThreshold && change.ratio <= ChangeThreshold.lower) {
      return GrowthType.Savings;
    }
  } else {
    if (exceedsEngineerThreshold && change.amount > 0) {
      return GrowthType.Excess;
    }
    if (exceedsEngineerThreshold && change.amount < 0) {
      return GrowthType.Savings;
    }
  }
  return GrowthType.Negligible;
}
function getComparedChange(dailyCost, metricData, duration, lastCompleteBillingDate) {
  const dailyCostRatio = dailyCost.change?.ratio;
  const metricDataRatio = metricData.change?.ratio;
  const previousPeriodTotal = getPreviousPeriodTotalCost(
    dailyCost.aggregation,
    duration,
    lastCompleteBillingDate
  );
  if (!notEmpty(dailyCostRatio) || !notEmpty(metricDataRatio)) {
    return {
      amount: previousPeriodTotal
    };
  }
  return {
    ratio: dailyCostRatio - metricDataRatio,
    amount: previousPeriodTotal * (dailyCostRatio - metricDataRatio)
  };
}
function getPreviousPeriodTotalCost(aggregation, duration, inclusiveEndDate) {
  const luxonDuration = Duration.fromISO(duration);
  const startDate = inclusiveStartDateOf(duration, inclusiveEndDate);
  const nextPeriodStart = DateTime.fromISO(startDate).plus(luxonDuration);
  return aggregation.reduce((acc, costByDate) => {
    return DateTime.fromISO(costByDate.date) < nextPeriodStart ? acc + costByDate.amount : acc;
  }, 0);
}
function choose([savings, excess], change) {
  const isSavings = (change.ratio ?? change.amount) <= 0;
  return isSavings ? savings : excess;
}

export { choose, getComparedChange, getPreviousPeriodTotalCost, growthOf };
//# sourceMappingURL=change.esm.js.map
