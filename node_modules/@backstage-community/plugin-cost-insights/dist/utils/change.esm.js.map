{"version":3,"file":"change.esm.js","sources":["../../src/utils/change.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChangeThreshold, GrowthType, Duration } from '../types';\nimport {\n  Cost,\n  ChangeStatistic,\n  MetricData,\n  DateAggregation,\n} from '@backstage-community/plugin-cost-insights-common';\nimport { DateTime, Duration as LuxonDuration } from 'luxon';\nimport { inclusiveStartDateOf } from './duration';\nimport { notEmpty } from './assert';\n\n// Used for displaying status colors\nexport function growthOf(\n  change: ChangeStatistic,\n  engineerThreshold: number,\n): GrowthType {\n  const exceedsEngineerThreshold = Math.abs(change.amount) >= engineerThreshold;\n\n  if (notEmpty(change.ratio)) {\n    if (exceedsEngineerThreshold && change.ratio >= ChangeThreshold.upper) {\n      return GrowthType.Excess;\n    }\n\n    if (exceedsEngineerThreshold && change.ratio <= ChangeThreshold.lower) {\n      return GrowthType.Savings;\n    }\n  } else {\n    if (exceedsEngineerThreshold && change.amount > 0) {\n      return GrowthType.Excess;\n    }\n    if (exceedsEngineerThreshold && change.amount < 0) {\n      return GrowthType.Savings;\n    }\n  }\n\n  return GrowthType.Negligible;\n}\n\n// Used by <CostOverviewCard /> for displaying engineer totals\nexport function getComparedChange(\n  dailyCost: Cost,\n  metricData: MetricData,\n  duration: Duration,\n  lastCompleteBillingDate: string, // YYYY-MM-DD,\n): ChangeStatistic {\n  const dailyCostRatio = dailyCost.change?.ratio;\n  const metricDataRatio = metricData.change?.ratio;\n  const previousPeriodTotal = getPreviousPeriodTotalCost(\n    dailyCost.aggregation,\n    duration,\n    lastCompleteBillingDate,\n  );\n\n  // if either ratio cannot be calculated, no compared ratio can be calculated\n  if (!notEmpty(dailyCostRatio) || !notEmpty(metricDataRatio)) {\n    return {\n      amount: previousPeriodTotal,\n    };\n  }\n\n  return {\n    ratio: dailyCostRatio - metricDataRatio,\n    amount: previousPeriodTotal * (dailyCostRatio - metricDataRatio),\n  };\n}\n\nexport function getPreviousPeriodTotalCost(\n  aggregation: DateAggregation[],\n  duration: Duration,\n  inclusiveEndDate: string,\n): number {\n  const luxonDuration = LuxonDuration.fromISO(duration);\n  const startDate = inclusiveStartDateOf(duration, inclusiveEndDate);\n  const nextPeriodStart = DateTime.fromISO(startDate).plus(luxonDuration);\n  // Add up costs that incurred before the start of the next period.\n  return aggregation.reduce((acc, costByDate) => {\n    return DateTime.fromISO(costByDate.date) < nextPeriodStart\n      ? acc + costByDate.amount\n      : acc;\n  }, 0);\n}\n\nexport function choose<T>(\n  [savings, excess]: [T, T],\n  change: ChangeStatistic,\n): T {\n  const isSavings = (change.ratio ?? change.amount) <= 0;\n  return isSavings ? savings : excess;\n}\n"],"names":["LuxonDuration"],"mappings":";;;;;;AA4BgB,SAAA,QAAA,CACd,QACA,iBACY,EAAA;AACZ,EAAA,MAAM,wBAA2B,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAO,MAAM,CAAK,IAAA,iBAAA;AAE5D,EAAI,IAAA,QAAA,CAAS,MAAO,CAAA,KAAK,CAAG,EAAA;AAC1B,IAAA,IAAI,wBAA4B,IAAA,MAAA,CAAO,KAAS,IAAA,eAAA,CAAgB,KAAO,EAAA;AACrE,MAAA,OAAO,UAAW,CAAA,MAAA;AAAA;AAGpB,IAAA,IAAI,wBAA4B,IAAA,MAAA,CAAO,KAAS,IAAA,eAAA,CAAgB,KAAO,EAAA;AACrE,MAAA,OAAO,UAAW,CAAA,OAAA;AAAA;AACpB,GACK,MAAA;AACL,IAAI,IAAA,wBAAA,IAA4B,MAAO,CAAA,MAAA,GAAS,CAAG,EAAA;AACjD,MAAA,OAAO,UAAW,CAAA,MAAA;AAAA;AAEpB,IAAI,IAAA,wBAAA,IAA4B,MAAO,CAAA,MAAA,GAAS,CAAG,EAAA;AACjD,MAAA,OAAO,UAAW,CAAA,OAAA;AAAA;AACpB;AAGF,EAAA,OAAO,UAAW,CAAA,UAAA;AACpB;AAGO,SAAS,iBACd,CAAA,SAAA,EACA,UACA,EAAA,QAAA,EACA,uBACiB,EAAA;AACjB,EAAM,MAAA,cAAA,GAAiB,UAAU,MAAQ,EAAA,KAAA;AACzC,EAAM,MAAA,eAAA,GAAkB,WAAW,MAAQ,EAAA,KAAA;AAC3C,EAAA,MAAM,mBAAsB,GAAA,0BAAA;AAAA,IAC1B,SAAU,CAAA,WAAA;AAAA,IACV,QAAA;AAAA,IACA;AAAA,GACF;AAGA,EAAA,IAAI,CAAC,QAAS,CAAA,cAAc,KAAK,CAAC,QAAA,CAAS,eAAe,CAAG,EAAA;AAC3D,IAAO,OAAA;AAAA,MACL,MAAQ,EAAA;AAAA,KACV;AAAA;AAGF,EAAO,OAAA;AAAA,IACL,OAAO,cAAiB,GAAA,eAAA;AAAA,IACxB,MAAA,EAAQ,uBAAuB,cAAiB,GAAA,eAAA;AAAA,GAClD;AACF;AAEgB,SAAA,0BAAA,CACd,WACA,EAAA,QAAA,EACA,gBACQ,EAAA;AACR,EAAM,MAAA,aAAA,GAAgBA,QAAc,CAAA,OAAA,CAAQ,QAAQ,CAAA;AACpD,EAAM,MAAA,SAAA,GAAY,oBAAqB,CAAA,QAAA,EAAU,gBAAgB,CAAA;AACjE,EAAA,MAAM,kBAAkB,QAAS,CAAA,OAAA,CAAQ,SAAS,CAAA,CAAE,KAAK,aAAa,CAAA;AAEtE,EAAA,OAAO,WAAY,CAAA,MAAA,CAAO,CAAC,GAAA,EAAK,UAAe,KAAA;AAC7C,IAAO,OAAA,QAAA,CAAS,QAAQ,UAAW,CAAA,IAAI,IAAI,eACvC,GAAA,GAAA,GAAM,WAAW,MACjB,GAAA,GAAA;AAAA,KACH,CAAC,CAAA;AACN;AAEO,SAAS,MACd,CAAA,CAAC,OAAS,EAAA,MAAM,GAChB,MACG,EAAA;AACH,EAAA,MAAM,SAAa,GAAA,CAAA,MAAA,CAAO,KAAS,IAAA,MAAA,CAAO,MAAW,KAAA,CAAA;AACrD,EAAA,OAAO,YAAY,OAAU,GAAA,MAAA;AAC/B;;;;"}