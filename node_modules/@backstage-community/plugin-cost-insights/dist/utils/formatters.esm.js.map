{"version":3,"file":"formatters.esm.js","sources":["../../src/utils/formatters.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DateTime, Duration as LuxonDuration } from 'luxon';\nimport pluralize from 'pluralize';\nimport { Duration } from '../types';\nimport { ChangeStatistic } from '@backstage-community/plugin-cost-insights-common';\nimport { inclusiveEndDateOf, inclusiveStartDateOf } from './duration';\nimport { notEmpty } from './assert';\n\nexport type Period = {\n  periodStart: string;\n  periodEnd: string;\n};\n\nexport const currencyFormatter = (currency: Intl.NumberFormat) => {\n  const options = currency.resolvedOptions();\n\n  return new Intl.NumberFormat(options.locale, {\n    style: 'currency',\n    currency: options.currency,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n};\n\nexport const lengthyCurrencyFormatter = (currency: Intl.NumberFormat) => {\n  const options = currency.resolvedOptions();\n\n  return new Intl.NumberFormat(options.locale, {\n    style: 'currency',\n    currency: options.currency,\n    minimumFractionDigits: 0,\n    minimumSignificantDigits: 2,\n    maximumSignificantDigits: 2,\n  });\n};\n\nexport const numberFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n\nexport const monthFormatter = new Intl.DateTimeFormat('en-US', {\n  timeZone: 'UTC',\n  month: 'long',\n  year: 'numeric',\n});\n\nexport const dateFormatter = new Intl.DateTimeFormat('en-US', {\n  timeZone: 'UTC',\n  day: 'numeric',\n  month: 'short',\n});\n\nexport const monthOf = (date: string): string => {\n  return monthFormatter.format(Date.parse(date));\n};\n\nexport const quarterOf = (date: string): string => {\n  // Supports formatting yyyy-LL-dd and yyyy-'Q'q returned in alerts\n  const d = DateTime.fromISO(date).isValid\n    ? DateTime.fromISO(date)\n    : DateTime.fromFormat(date, \"yyyy-'Q'q\");\n  return d.toFormat(\"'Q'q yyyy\");\n};\n\nexport function formatCurrency(amount: number, currency?: string): string {\n  const n = Math.round(amount);\n  const numString = numberFormatter.format(n);\n\n  return currency ? `${numString} ${pluralize(currency, n)}` : numString;\n}\n\nexport function formatChange(\n  change: ChangeStatistic,\n  options?: { absolute: boolean },\n): string {\n  if (notEmpty(change.ratio)) {\n    return formatPercent(\n      options?.absolute ? Math.abs(change.ratio) : change.ratio,\n    );\n  }\n  if (options?.absolute) {\n    return '∞';\n  }\n  return change.amount >= 0 ? '∞' : '-∞';\n}\n\nexport function formatPercent(n: number): string {\n  // Number.toFixed shows scientific notation for extreme numbers\n  if (isNaN(n) || Math.abs(n) < 0.01) {\n    return '0%';\n  }\n\n  if (Math.abs(n) > 10) {\n    return `>${n < 0 ? '-' : ''}1000%`;\n  }\n\n  return `${(n * 100).toFixed(0)}%`;\n}\n\nexport function formatLastTwoLookaheadQuarters(inclusiveEndDate: string) {\n  const start = DateTime.fromISO(\n    inclusiveStartDateOf(Duration.P3M, inclusiveEndDate),\n  ).toFormat(\"'Q'q yyyy\");\n  const end = DateTime.fromISO(\n    inclusiveEndDateOf(Duration.P3M, inclusiveEndDate),\n  ).toFormat(\"'Q'q yyyy\");\n  return `${start} vs ${end}`;\n}\n\nconst formatRelativePeriod = (\n  duration: Duration,\n  date: string,\n  isEndDate: boolean,\n): string => {\n  const periodStart = isEndDate ? inclusiveStartDateOf(duration, date) : date;\n  const periodEnd = isEndDate ? date : inclusiveEndDateOf(duration, date);\n  const days = LuxonDuration.fromISO(duration).days;\n  if (![periodStart, periodEnd].includes(date)) {\n    throw new Error(`Invalid relative date ${date} for duration ${duration}`);\n  }\n  return date === periodStart ? `First ${days} Days` : `Last ${days} Days`;\n};\n\nexport function formatPeriod(\n  duration: Duration,\n  date: string,\n  isEndDate: boolean,\n) {\n  switch (duration) {\n    case Duration.P3M:\n      return quarterOf(\n        isEndDate\n          ? inclusiveEndDateOf(duration, date)\n          : inclusiveStartDateOf(duration, date),\n      );\n    default:\n      return formatRelativePeriod(duration, date, isEndDate);\n  }\n}\n"],"names":["LuxonDuration"],"mappings":"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"}