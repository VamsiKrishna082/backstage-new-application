import { DataKey } from '../types/Alert.esm.js';
import { lengthyCurrencyFormatter, currencyFormatter, dateFormatter } from './formatters.esm.js';

const formatGraphValue = (baseCurrency) => (value, _index, format) => {
  if (format === "number") {
    return value.toLocaleString();
  }
  if (value < 1) {
    return lengthyCurrencyFormatter(baseCurrency).format(value);
  }
  return currencyFormatter(baseCurrency).format(value);
};
const overviewGraphTickFormatter = (millis) => typeof millis === "number" ? dateFormatter.format(millis) : millis;
const tooltipItemOf = (baseCurrency) => (payload) => {
  const value = payload.value && !isNaN(Number(payload.value)) ? baseCurrency.format(Number(payload.value)) : payload.value;
  const fill = payload.color;
  switch (payload.dataKey) {
    case DataKey.Current:
    case DataKey.Previous:
      return {
        label: payload.name,
        value,
        fill
      };
    default:
      return null;
  }
};
const resourceOf = (entity) => ({
  name: entity.id,
  previous: entity.aggregation[0],
  current: entity.aggregation[1]
});
const titleOf = (label) => {
  return label ? String(label) : "Unlabeled";
};
const isInvalid = ({ label, payload }) => {
  return label === void 0 || !payload || !payload.length;
};
const isLabeled = (data) => {
  return data?.activeLabel && data?.activeLabel !== "";
};
const isUnlabeled = (data) => {
  return data?.activeLabel === "";
};

export { formatGraphValue, isInvalid, isLabeled, isUnlabeled, overviewGraphTickFormatter, resourceOf, titleOf, tooltipItemOf };
//# sourceMappingURL=graphs.esm.js.map
