import packageinfo from '../package.json.esm.js';

const BASE_URL = "https://content-cloudresourcemanager.googleapis.com/v1/projects";
class GcpClient {
  constructor(googleAuthApi) {
    this.googleAuthApi = googleAuthApi;
  }
  async listProjects() {
    const response = await fetch(BASE_URL, {
      headers: {
        Accept: "*/*",
        Authorization: `Bearer ${await this.getToken()}`,
        "X-Goog-Api-Client": `backstage/gcpprojects/${packageinfo.version}`
      }
    });
    if (!response.ok) {
      throw new Error(
        `List request failed to ${BASE_URL} with ${response.status} ${response.statusText}`
      );
    }
    const { projects } = await response.json();
    return projects;
  }
  async getProject(projectId) {
    const url = `${BASE_URL}/${projectId}`;
    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${await this.getToken()}`,
        "X-Goog-Api-Client": `backstage/gcpprojects/${packageinfo.version}`
      }
    });
    if (!response.ok) {
      throw new Error(
        `Get request failed to ${url} with ${response.status} ${response.statusText}`
      );
    }
    return await response.json();
  }
  async createProject(options) {
    const newProject = {
      name: options.projectName,
      projectId: options.projectId
    };
    const response = await fetch(BASE_URL, {
      method: "POST",
      headers: {
        Accept: "*/*",
        Authorization: `Bearer ${await this.getToken()}`,
        "X-Goog-Api-Client": `backstage/gcpprojects/${packageinfo.version}`
      },
      body: JSON.stringify(newProject)
    });
    if (!response.ok) {
      throw new Error(
        `Create request failed to ${BASE_URL} with ${response.status} ${response.statusText}`
      );
    }
    return await response.json();
  }
  async getToken() {
    return this.googleAuthApi.getAccessToken(
      "https://www.googleapis.com/auth/cloud-platform"
    );
  }
}

export { GcpClient };
//# sourceMappingURL=GcpClient.esm.js.map
