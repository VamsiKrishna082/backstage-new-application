{"version":3,"file":"GcpClient.esm.js","sources":["../../src/api/GcpClient.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GcpApi } from './GcpApi';\nimport { Operation, Project } from './types';\nimport { OAuthApi } from '@backstage/core-plugin-api';\nimport packageinfo from '../../package.json';\n\nconst BASE_URL =\n  'https://content-cloudresourcemanager.googleapis.com/v1/projects';\n\n/** @public */\nexport class GcpClient implements GcpApi {\n  constructor(private readonly googleAuthApi: OAuthApi) {}\n\n  async listProjects(): Promise<Project[]> {\n    const response = await fetch(BASE_URL, {\n      headers: {\n        Accept: '*/*',\n        Authorization: `Bearer ${await this.getToken()}`,\n        'X-Goog-Api-Client': `backstage/gcpprojects/${packageinfo.version}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `List request failed to ${BASE_URL} with ${response.status} ${response.statusText}`,\n      );\n    }\n\n    const { projects } = await response.json();\n    return projects;\n  }\n\n  async getProject(projectId: string): Promise<Project> {\n    const url = `${BASE_URL}/${projectId}`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${await this.getToken()}`,\n        'X-Goog-Api-Client': `backstage/gcpprojects/${packageinfo.version}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Get request failed to ${url} with ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return await response.json();\n  }\n\n  async createProject(options: {\n    projectId: string;\n    projectName: string;\n  }): Promise<Operation> {\n    const newProject: Project = {\n      name: options.projectName,\n      projectId: options.projectId,\n    };\n\n    const response = await fetch(BASE_URL, {\n      method: 'POST',\n      headers: {\n        Accept: '*/*',\n        Authorization: `Bearer ${await this.getToken()}`,\n        'X-Goog-Api-Client': `backstage/gcpprojects/${packageinfo.version}`,\n      },\n      body: JSON.stringify(newProject),\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Create request failed to ${BASE_URL} with ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return await response.json();\n  }\n\n  async getToken(): Promise<string> {\n    // NOTE(freben): There's a .read-only variant of this scope that we could\n    // use for readonly operations, but that means we would ask the user for a\n    // second auth during creation and I decided to keep the wider scope for\n    // all ops for now\n    return this.googleAuthApi.getAccessToken(\n      'https://www.googleapis.com/auth/cloud-platform',\n    );\n  }\n}\n"],"names":[],"mappings":";;AAqBA,MAAM,QACJ,GAAA,iEAAA;AAGK,MAAM,SAA4B,CAAA;AAAA,EACvC,YAA6B,aAAyB,EAAA;AAAzB,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA;AAAA;AAA0B,EAEvD,MAAM,YAAmC,GAAA;AACvC,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,QAAU,EAAA;AAAA,MACrC,OAAS,EAAA;AAAA,QACP,MAAQ,EAAA,KAAA;AAAA,QACR,aAAe,EAAA,CAAA,OAAA,EAAU,MAAM,IAAA,CAAK,UAAU,CAAA,CAAA;AAAA,QAC9C,mBAAA,EAAqB,CAAyB,sBAAA,EAAA,WAAA,CAAY,OAAO,CAAA;AAAA;AACnE,KACD,CAAA;AAED,IAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,0BAA0B,QAAQ,CAAA,MAAA,EAAS,SAAS,MAAM,CAAA,CAAA,EAAI,SAAS,UAAU,CAAA;AAAA,OACnF;AAAA;AAGF,IAAA,MAAM,EAAE,QAAA,EAAa,GAAA,MAAM,SAAS,IAAK,EAAA;AACzC,IAAO,OAAA,QAAA;AAAA;AACT,EAEA,MAAM,WAAW,SAAqC,EAAA;AACpD,IAAA,MAAM,GAAM,GAAA,CAAA,EAAG,QAAQ,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA;AACpC,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,GAAK,EAAA;AAAA,MAChC,OAAS,EAAA;AAAA,QACP,aAAe,EAAA,CAAA,OAAA,EAAU,MAAM,IAAA,CAAK,UAAU,CAAA,CAAA;AAAA,QAC9C,mBAAA,EAAqB,CAAyB,sBAAA,EAAA,WAAA,CAAY,OAAO,CAAA;AAAA;AACnE,KACD,CAAA;AAED,IAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,yBAAyB,GAAG,CAAA,MAAA,EAAS,SAAS,MAAM,CAAA,CAAA,EAAI,SAAS,UAAU,CAAA;AAAA,OAC7E;AAAA;AAGF,IAAO,OAAA,MAAM,SAAS,IAAK,EAAA;AAAA;AAC7B,EAEA,MAAM,cAAc,OAGG,EAAA;AACrB,IAAA,MAAM,UAAsB,GAAA;AAAA,MAC1B,MAAM,OAAQ,CAAA,WAAA;AAAA,MACd,WAAW,OAAQ,CAAA;AAAA,KACrB;AAEA,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,QAAU,EAAA;AAAA,MACrC,MAAQ,EAAA,MAAA;AAAA,MACR,OAAS,EAAA;AAAA,QACP,MAAQ,EAAA,KAAA;AAAA,QACR,aAAe,EAAA,CAAA,OAAA,EAAU,MAAM,IAAA,CAAK,UAAU,CAAA,CAAA;AAAA,QAC9C,mBAAA,EAAqB,CAAyB,sBAAA,EAAA,WAAA,CAAY,OAAO,CAAA;AAAA,OACnE;AAAA,MACA,IAAA,EAAM,IAAK,CAAA,SAAA,CAAU,UAAU;AAAA,KAChC,CAAA;AAED,IAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,4BAA4B,QAAQ,CAAA,MAAA,EAAS,SAAS,MAAM,CAAA,CAAA,EAAI,SAAS,UAAU,CAAA;AAAA,OACrF;AAAA;AAGF,IAAO,OAAA,MAAM,SAAS,IAAK,EAAA;AAAA;AAC7B,EAEA,MAAM,QAA4B,GAAA;AAKhC,IAAA,OAAO,KAAK,aAAc,CAAA,cAAA;AAAA,MACxB;AAAA,KACF;AAAA;AAEJ;;;;"}