import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import TextField from '@material-ui/core/TextField';
import { useState } from 'react';
import { Page, Header, Content, ContentHeader, SupportButton, InfoCard, SimpleStepper, SimpleStepperStep, StructuredMetadataTable, HeaderLabel } from '@backstage/core-components';
import { Link } from 'react-router-dom';
import { useRouteRef } from '@backstage/core-plugin-api';
import { rootRouteRef } from '../../routes.esm.js';

const Project = () => {
  const [projectName, setProjectName] = useState("");
  const [projectId, setProjectId] = useState("");
  const [disabled, setDisabled] = useState(true);
  const metadata = {
    ProjectName: projectName,
    ProjectId: projectId
  };
  return /* @__PURE__ */ jsx(Content, { children: /* @__PURE__ */ jsx(Grid, { container: true, spacing: 3, children: /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, md: 6, children: /* @__PURE__ */ jsxs(InfoCard, { title: "Create new GCP Project", children: [
    /* @__PURE__ */ jsxs(SimpleStepper, { children: [
      /* @__PURE__ */ jsx(SimpleStepperStep, { title: "Project Name", children: /* @__PURE__ */ jsx(
        TextField,
        {
          variant: "outlined",
          name: "projectName",
          label: "Project Name",
          helperText: "The name of the new project.",
          inputProps: { "aria-label": "Project Name" },
          onChange: (e) => setProjectName(e.target.value),
          value: projectName,
          fullWidth: true
        }
      ) }),
      /* @__PURE__ */ jsx(SimpleStepperStep, { title: "Project ID", children: /* @__PURE__ */ jsx(
        TextField,
        {
          variant: "outlined",
          name: "projectId",
          label: "projectId",
          onChange: (e) => setProjectId(e.target.value),
          value: projectId,
          fullWidth: true
        }
      ) }),
      /* @__PURE__ */ jsx(
        SimpleStepperStep,
        {
          title: "Review",
          actions: {
            nextText: "Confirm",
            onNext: () => setDisabled(false)
          },
          children: /* @__PURE__ */ jsx(StructuredMetadataTable, { metadata })
        }
      )
    ] }),
    /* @__PURE__ */ jsx(
      Button,
      {
        component: Link,
        variant: "text",
        "data-testid": "cancel-button",
        color: "primary",
        to: "/gcp-projects",
        children: "Cancel"
      }
    ),
    /* @__PURE__ */ jsx(
      Button,
      {
        component: Link,
        variant: "contained",
        color: "primary",
        disabled,
        to: `newProject?projectName=${encodeURIComponent(
          projectName
        )},projectId=${encodeURIComponent(projectId)}`,
        children: "Create"
      }
    )
  ] }) }) }) });
};
const labels = /* @__PURE__ */ jsxs(Fragment, { children: [
  /* @__PURE__ */ jsx(HeaderLabel, { label: "Owner", value: "Spotify" }),
  /* @__PURE__ */ jsx(HeaderLabel, { label: "Lifecycle", value: "Production" })
] });
const NewProjectPage = () => {
  const docsRootLink = useRouteRef(rootRouteRef)();
  return /* @__PURE__ */ jsxs(Page, { themeId: "tool", children: [
    /* @__PURE__ */ jsx(Header, { title: "New GCP Project", type: "GCP", typeLink: docsRootLink, children: labels }),
    /* @__PURE__ */ jsxs(Content, { children: [
      /* @__PURE__ */ jsx(ContentHeader, { title: "", children: /* @__PURE__ */ jsx(SupportButton, { children: "This plugin allows you to view and interact with your gcp projects." }) }),
      /* @__PURE__ */ jsx(Project, {})
    ] })
  ] });
};

export { NewProjectPage, Project };
//# sourceMappingURL=NewProjectPage.esm.js.map
