import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import Button from '@material-ui/core/Button';
import LinearProgress from '@material-ui/core/LinearProgress';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { useAsync, useMountEffect } from '@react-hookz/web';
import { gcpApiRef } from '../../api/GcpApi.esm.js';
import { Page, Header, Content, ContentHeader, SupportButton, HeaderLabel, WarningPanel, Table, Link as Link$1 } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { Link } from 'react-router-dom';

const LongText = ({ text, max }) => {
  if (text.length < max) {
    return /* @__PURE__ */ jsx(Typography, { color: "primary", component: "span", children: text });
  }
  return /* @__PURE__ */ jsx(Tooltip, { title: text, children: /* @__PURE__ */ jsxs(Typography, { color: "primary", component: "span", children: [
    text.slice(0, max),
    "..."
  ] }) });
};
const labels = /* @__PURE__ */ jsxs(Fragment, { children: [
  /* @__PURE__ */ jsx(HeaderLabel, { label: "Owner", value: "Spotify" }),
  /* @__PURE__ */ jsx(HeaderLabel, { label: "Lifecycle", value: "Production" })
] });
const PageContents = () => {
  const api = useApi(gcpApiRef);
  const [{ status, result, error }, { execute }] = useAsync(
    () => api.listProjects()
  );
  useMountEffect(execute);
  if (status === "loading") {
    return /* @__PURE__ */ jsx(LinearProgress, {});
  } else if (error) {
    return /* @__PURE__ */ jsx(WarningPanel, { title: "Failed to load projects", children: error.toString() });
  }
  function renderLink(id) {
    return /* @__PURE__ */ jsx(Link$1, { to: `project?projectId=${encodeURIComponent(id)}`, children: /* @__PURE__ */ jsx(Typography, { color: "primary", children: /* @__PURE__ */ jsx(LongText, { text: id, max: 60 }) }) });
  }
  return /* @__PURE__ */ jsx("div", { style: { height: "95%", width: "100%" }, children: /* @__PURE__ */ jsx(
    Table,
    {
      columns: [
        {
          field: "name",
          title: "Name",
          defaultSort: "asc"
        },
        {
          field: "projectNumber",
          title: "Project Number"
        },
        {
          field: "projectID",
          title: "Project ID",
          render: (rowData) => renderLink(rowData.id)
        },
        {
          field: "state",
          title: "State"
        },
        {
          field: "creationTime",
          title: "Creation Time"
        }
      ],
      data: result?.map((project) => ({
        id: project.projectId,
        name: project.name,
        projectNumber: project?.projectNumber || "Error",
        projectID: project.projectId,
        state: project?.lifecycleState || "Error",
        creationTime: project?.createTime || "Error"
      })) || [],
      options: {
        pageSize: 5,
        pageSizeOptions: [5, 10, 25, 50, 100]
      }
    }
  ) });
};
const ProjectListPage = () => /* @__PURE__ */ jsxs(Page, { themeId: "service", children: [
  /* @__PURE__ */ jsx(Header, { title: "GCP Projects", type: "tool", children: labels }),
  /* @__PURE__ */ jsxs(Content, { children: [
    /* @__PURE__ */ jsxs(ContentHeader, { title: "", children: [
      /* @__PURE__ */ jsx(
        Button,
        {
          component: Link,
          variant: "contained",
          color: "primary",
          to: "new",
          children: "New Project"
        }
      ),
      /* @__PURE__ */ jsx(SupportButton, { children: "All your software catalog entities" })
    ] }),
    /* @__PURE__ */ jsx(PageContents, {})
  ] })
] });

export { ProjectListPage };
//# sourceMappingURL=ProjectListPage.esm.js.map
