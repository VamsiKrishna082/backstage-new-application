/// <reference types="react" />
import * as _backstage_catalog_model_index from '@backstage/catalog-model/index';
import * as react from 'react';
import * as _backstage_plugin_catalog_react_alpha from '@backstage/plugin-catalog-react/alpha';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';

/**
 * @alpha
 */
declare const _default: _backstage_frontend_plugin_api.FrontendPlugin<{
    entityContent: _backstage_frontend_plugin_api.RouteRef<undefined>;
}, {}, {
    "api:github-actions": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_core_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_core_plugin_api.AnyApiFactory;
        };
    }>;
    "entity-card:github-actions/latest-branch-workflow-runs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            props: {
                branch: string;
            };
        } & {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            props?: {
                branch?: string | undefined;
            } | undefined;
        } & {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.AnyExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "entity-card";
        name: "latest-branch-workflow-runs";
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType | undefined;
        };
    }>;
    "entity-card:github-actions/latest-workflow-run": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            props: {
                branch: string;
            };
        } & {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            props?: {
                branch?: string | undefined;
            } | undefined;
        } & {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.AnyExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "entity-card";
        name: "latest-workflow-run";
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType | undefined;
        };
    }>;
    "entity-card:github-actions/recent-workflow-runs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            props: {
                dense: boolean;
                branch: string;
                limit?: number | undefined;
            };
        } & {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            props?: {
                dense?: boolean | undefined;
                branch?: string | undefined;
                limit?: number | undefined;
            } | undefined;
        } & {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.AnyExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "entity-card";
        name: "recent-workflow-runs";
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType | undefined;
        };
    }>;
    "entity-card:github-actions/workflow-runs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "workflow-runs";
        config: {
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type: "content" | "summary" | "info" | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            type?: "content" | "summary" | "info" | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_plugin_catalog_react_alpha.EntityCardType, "catalog.entity-card-type", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
            type?: _backstage_plugin_catalog_react_alpha.EntityCardType | undefined;
        };
    }>;
    "entity-content:github-actions/entity": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-content";
        name: "entity";
        config: {
            path: string | undefined;
            title: string | undefined;
            filter: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            group: string | false | undefined;
        };
        configInput: {
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | undefined;
            title?: string | undefined;
            path?: string | undefined;
            group?: string | false | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-title", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-group", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            defaultPath: string;
            defaultTitle: string;
            defaultGroup?: (string & {}) | "development" | "deployment" | "overview" | "documentation" | "operation" | "observability" | undefined;
            routeRef?: _backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
            filter?: _backstage_plugin_catalog_react_alpha.EntityPredicate | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
        };
    }>;
}>;

export { _default as default };
