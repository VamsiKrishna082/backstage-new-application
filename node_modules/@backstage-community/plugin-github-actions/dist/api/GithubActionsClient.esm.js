import { readGithubIntegrationConfigs } from '@backstage/integration';
import { Octokit } from '@octokit/rest';

class GithubActionsClient {
  configApi;
  scmAuthApi;
  constructor(options) {
    this.configApi = options.configApi;
    this.scmAuthApi = options.scmAuthApi;
  }
  async getOctokit(hostname = "github.com") {
    const { token } = await this.scmAuthApi.getCredentials({
      url: `https://${hostname}/`,
      additionalScope: {
        customScopes: {
          github: ["repo"]
        }
      }
    });
    const configs = readGithubIntegrationConfigs(
      this.configApi.getOptionalConfigArray("integrations.github") ?? []
    );
    const githubIntegrationConfig = configs.find((v) => v.host === hostname);
    const baseUrl = githubIntegrationConfig?.apiBaseUrl;
    return new Octokit({ auth: token, baseUrl });
  }
  async reRunWorkflow(options) {
    const { hostname, owner, repo, runId } = options;
    const octokit = await this.getOctokit(hostname);
    return octokit.actions.reRunWorkflow({
      owner,
      repo,
      run_id: runId
    });
  }
  async listWorkflowRuns(options) {
    const { hostname, owner, repo, pageSize = 100, page = 0, branch } = options;
    const octokit = await this.getOctokit(hostname);
    const workflowRuns = await octokit.actions.listWorkflowRunsForRepo({
      owner,
      repo,
      per_page: pageSize,
      page,
      ...branch ? { branch } : {}
    });
    return workflowRuns.data;
  }
  async getWorkflow(options) {
    const { hostname, owner, repo, id } = options;
    const octokit = await this.getOctokit(hostname);
    const workflow = await octokit.actions.getWorkflow({
      owner,
      repo,
      workflow_id: id
    });
    return workflow.data;
  }
  async getWorkflowRun(options) {
    const { hostname, owner, repo, id } = options;
    const octokit = await this.getOctokit(hostname);
    const run = await octokit.actions.getWorkflowRun({
      owner,
      repo,
      run_id: id
    });
    return run.data;
  }
  async listJobsForWorkflowRun(options) {
    const { hostname, owner, repo, id, pageSize = 100, page = 0 } = options;
    const octokit = await this.getOctokit(hostname);
    const jobs = await octokit.actions.listJobsForWorkflowRun({
      owner,
      repo,
      run_id: id,
      per_page: pageSize,
      page
    });
    return jobs.data;
  }
  async downloadJobLogsForWorkflowRun(options) {
    const { hostname, owner, repo, runId } = options;
    const octokit = await this.getOctokit(hostname);
    const workflow = await octokit.actions.downloadJobLogsForWorkflowRun({
      owner,
      repo,
      job_id: runId
    });
    return workflow.data;
  }
  async listBranches(options) {
    const { hostname, owner, repo, page = 0 } = options;
    const octokit = await this.getOctokit(hostname);
    const response = await octokit.rest.repos.listBranches({
      owner,
      repo,
      per_page: 100,
      page
    });
    return response.data;
  }
  async getDefaultBranch(options) {
    const { hostname, owner, repo } = options;
    const octokit = await this.getOctokit(hostname);
    const response = await octokit.rest.repos.get({
      owner,
      repo
    });
    return response.data.default_branch;
  }
}

export { GithubActionsClient };
//# sourceMappingURL=GithubActionsClient.esm.js.map
