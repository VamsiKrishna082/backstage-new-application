{"version":3,"file":"GithubActionsClient.esm.js","sources":["../../src/api/GithubActionsClient.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readGithubIntegrationConfigs } from '@backstage/integration';\nimport { ScmAuthApi } from '@backstage/integration-react';\nimport { GithubActionsApi } from './GithubActionsApi';\nimport { Octokit, RestEndpointMethodTypes } from '@octokit/rest';\nimport { ConfigApi } from '@backstage/core-plugin-api';\n\n/**\n * A client for fetching information about GitHub actions.\n *\n * @public\n */\nexport class GithubActionsClient implements GithubActionsApi {\n  private readonly configApi: ConfigApi;\n  private readonly scmAuthApi: ScmAuthApi;\n\n  constructor(options: { configApi: ConfigApi; scmAuthApi: ScmAuthApi }) {\n    this.configApi = options.configApi;\n    this.scmAuthApi = options.scmAuthApi;\n  }\n\n  private async getOctokit(hostname: string = 'github.com'): Promise<Octokit> {\n    const { token } = await this.scmAuthApi.getCredentials({\n      url: `https://${hostname}/`,\n      additionalScope: {\n        customScopes: {\n          github: ['repo'],\n        },\n      },\n    });\n    const configs = readGithubIntegrationConfigs(\n      this.configApi.getOptionalConfigArray('integrations.github') ?? [],\n    );\n    const githubIntegrationConfig = configs.find(v => v.host === hostname);\n    const baseUrl = githubIntegrationConfig?.apiBaseUrl;\n    return new Octokit({ auth: token, baseUrl });\n  }\n\n  async reRunWorkflow(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    runId: number;\n  }): Promise<any> {\n    const { hostname, owner, repo, runId } = options;\n\n    const octokit = await this.getOctokit(hostname);\n    return octokit.actions.reRunWorkflow({\n      owner,\n      repo,\n      run_id: runId,\n    });\n  }\n\n  async listWorkflowRuns(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    pageSize?: number;\n    page?: number;\n    branch?: string;\n  }): Promise<\n    RestEndpointMethodTypes['actions']['listWorkflowRuns']['response']['data']\n  > {\n    const { hostname, owner, repo, pageSize = 100, page = 0, branch } = options;\n\n    const octokit = await this.getOctokit(hostname);\n    const workflowRuns = await octokit.actions.listWorkflowRunsForRepo({\n      owner,\n      repo,\n      per_page: pageSize,\n      page,\n      ...(branch ? { branch } : {}),\n    });\n\n    return workflowRuns.data;\n  }\n\n  async getWorkflow(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    id: number;\n  }): Promise<\n    RestEndpointMethodTypes['actions']['getWorkflow']['response']['data']\n  > {\n    const { hostname, owner, repo, id } = options;\n\n    const octokit = await this.getOctokit(hostname);\n    const workflow = await octokit.actions.getWorkflow({\n      owner,\n      repo,\n      workflow_id: id,\n    });\n\n    return workflow.data;\n  }\n\n  async getWorkflowRun(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    id: number;\n  }): Promise<\n    RestEndpointMethodTypes['actions']['getWorkflowRun']['response']['data']\n  > {\n    const { hostname, owner, repo, id } = options;\n\n    const octokit = await this.getOctokit(hostname);\n    const run = await octokit.actions.getWorkflowRun({\n      owner,\n      repo,\n      run_id: id,\n    });\n\n    return run.data;\n  }\n\n  async listJobsForWorkflowRun(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    id: number;\n    pageSize?: number;\n    page?: number;\n  }): Promise<\n    RestEndpointMethodTypes['actions']['listJobsForWorkflowRun']['response']['data']\n  > {\n    const { hostname, owner, repo, id, pageSize = 100, page = 0 } = options;\n\n    const octokit = await this.getOctokit(hostname);\n    const jobs = await octokit.actions.listJobsForWorkflowRun({\n      owner,\n      repo,\n      run_id: id,\n      per_page: pageSize,\n      page,\n    });\n\n    return jobs.data;\n  }\n\n  async downloadJobLogsForWorkflowRun(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    runId: number;\n  }): Promise<\n    RestEndpointMethodTypes['actions']['downloadJobLogsForWorkflowRun']['response']['data']\n  > {\n    const { hostname, owner, repo, runId } = options;\n\n    const octokit = await this.getOctokit(hostname);\n    const workflow = await octokit.actions.downloadJobLogsForWorkflowRun({\n      owner,\n      repo,\n      job_id: runId,\n    });\n\n    return workflow.data;\n  }\n\n  async listBranches(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n    page?: number;\n  }): Promise<\n    RestEndpointMethodTypes['repos']['listBranches']['response']['data']\n  > {\n    const { hostname, owner, repo, page = 0 } = options;\n    const octokit = await this.getOctokit(hostname);\n    const response = await octokit.rest.repos.listBranches({\n      owner,\n      repo,\n      per_page: 100,\n      page,\n    });\n\n    return response.data;\n  }\n\n  async getDefaultBranch(options: {\n    hostname?: string;\n    owner: string;\n    repo: string;\n  }): Promise<\n    RestEndpointMethodTypes['repos']['get']['response']['data']['default_branch']\n  > {\n    const { hostname, owner, repo } = options;\n    const octokit = await this.getOctokit(hostname);\n    const response = await octokit.rest.repos.get({\n      owner,\n      repo,\n    });\n\n    return response.data.default_branch;\n  }\n}\n"],"names":[],"mappings":"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"}