import { jsx, jsxs } from 'react/jsx-runtime';
import { useEntity } from '@backstage/plugin-catalog-react';
import LinearProgress from '@material-ui/core/LinearProgress';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import ExternalLinkIcon from '@material-ui/icons/Launch';
import { useEffect } from 'react';
import { GITHUB_ACTIONS_ANNOTATION } from '../getProjectNameFromEntity.esm.js';
import { useWorkflowRuns } from '../useWorkflowRuns.esm.js';
import { WorkflowRunsTable } from '../WorkflowRunsTable/WorkflowRunsTable.esm.js';
import { WorkflowRunStatus } from '../WorkflowRunStatus/WorkflowRunStatus.esm.js';
import { useApi, errorApiRef } from '@backstage/core-plugin-api';
import { InfoCard, StructuredMetadataTable, Link } from '@backstage/core-components';
import { getHostnameFromEntity } from '../getHostnameFromEntity.esm.js';
import Box from '@material-ui/core/Box';

const useStyles = makeStyles({
  externalLinkIcon: {
    fontSize: "inherit",
    verticalAlign: "bottom"
  }
});
const WidgetContent = (props) => {
  const { error, loading, lastRun, branch } = props;
  const classes = useStyles();
  if (error) return /* @__PURE__ */ jsxs(Typography, { children: [
    "Couldn't fetch latest ",
    branch,
    " run"
  ] });
  if (loading) return /* @__PURE__ */ jsx(LinearProgress, {});
  return /* @__PURE__ */ jsx(
    StructuredMetadataTable,
    {
      metadata: {
        status: /* @__PURE__ */ jsx(Box, { display: "flex", children: /* @__PURE__ */ jsx(
          WorkflowRunStatus,
          {
            status: lastRun.status,
            conclusion: lastRun.conclusion
          }
        ) }),
        message: lastRun.message,
        url: /* @__PURE__ */ jsxs(Link, { to: lastRun.githubUrl ?? "", children: [
          "See more on GitHub",
          " ",
          /* @__PURE__ */ jsx(ExternalLinkIcon, { className: classes.externalLinkIcon })
        ] })
      }
    }
  );
};
const LatestWorkflowRunCard = (props) => {
  const { branch = "master", variant } = props;
  const { entity } = useEntity();
  const errorApi = useApi(errorApiRef);
  const hostname = getHostnameFromEntity(entity);
  const [owner, repo] = (entity?.metadata.annotations?.[GITHUB_ACTIONS_ANNOTATION] ?? "/").split("/");
  const [{ runs, loading, error }] = useWorkflowRuns({
    hostname,
    owner,
    repo,
    branch
  });
  const lastRun = runs?.[0] ?? {};
  useEffect(() => {
    if (error) {
      errorApi.post(error);
    }
  }, [error, errorApi]);
  return /* @__PURE__ */ jsx(InfoCard, { title: `Last ${branch} build`, variant, children: /* @__PURE__ */ jsx(
    WidgetContent,
    {
      error,
      loading,
      branch,
      lastRun
    }
  ) });
};
const LatestWorkflowsForBranchCard = (props) => {
  const { branch = "master", variant } = props;
  const { entity } = useEntity();
  return /* @__PURE__ */ jsx(InfoCard, { title: `Last ${branch} build`, variant, children: /* @__PURE__ */ jsx(WorkflowRunsTable, { branch, entity }) });
};

export { LatestWorkflowRunCard, LatestWorkflowsForBranchCard };
//# sourceMappingURL=Cards.esm.js.map
