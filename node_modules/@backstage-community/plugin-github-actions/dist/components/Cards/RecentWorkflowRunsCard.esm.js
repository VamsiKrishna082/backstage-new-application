import { jsx, jsxs } from 'react/jsx-runtime';
import { useEntity } from '@backstage/plugin-catalog-react';
import { useEffect } from 'react';
import { Link as Link$1 } from 'react-router-dom';
import { GITHUB_ACTIONS_ANNOTATION } from '../getProjectNameFromEntity.esm.js';
import { useWorkflowRuns } from '../useWorkflowRuns.esm.js';
import { WorkflowRunStatus } from '../WorkflowRunStatus/WorkflowRunStatus.esm.js';
import Typography from '@material-ui/core/Typography';
import { useApi, errorApiRef, useRouteRef } from '@backstage/core-plugin-api';
import { ErrorPanel, InfoCard, Link, Table } from '@backstage/core-components';
import { buildRouteRef } from '../../routes.esm.js';
import { getHostnameFromEntity } from '../getHostnameFromEntity.esm.js';
import Box from '@material-ui/core/Box';

const firstLine = (message) => message.split("\n")[0];
const RecentWorkflowRunsCard = (props) => {
  const { branch, dense = false, limit = 5, variant } = props;
  const { entity } = useEntity();
  const errorApi = useApi(errorApiRef);
  const hostname = getHostnameFromEntity(entity);
  const [owner, repo] = (entity?.metadata.annotations?.[GITHUB_ACTIONS_ANNOTATION] ?? "/").split("/");
  const [{ runs = [], loading, error }] = useWorkflowRuns({
    hostname,
    owner,
    repo,
    branch,
    initialPageSize: limit
  });
  useEffect(() => {
    if (error) {
      errorApi.post(error);
    }
  }, [error, errorApi]);
  const githubHost = hostname || "github.com";
  const routeLink = useRouteRef(buildRouteRef);
  if (error) {
    return /* @__PURE__ */ jsx(ErrorPanel, { title: error.message, error });
  }
  return /* @__PURE__ */ jsx(
    InfoCard,
    {
      title: "Recent Workflow Runs",
      subheader: branch ? `Branch: ${branch}` : "All Branches",
      noPadding: true,
      variant,
      children: !runs.length ? /* @__PURE__ */ jsxs("div", { style: { textAlign: "center" }, children: [
        /* @__PURE__ */ jsx(Typography, { variant: "body1", children: "This component has GitHub Actions enabled, but no workflows were found." }),
        /* @__PURE__ */ jsx(Typography, { variant: "body2", children: /* @__PURE__ */ jsx(Link, { to: `https://${githubHost}/${owner}/${repo}/actions/new`, children: "Create a new workflow" }) })
      ] }) : /* @__PURE__ */ jsx(
        Table,
        {
          isLoading: loading,
          options: {
            search: false,
            paging: false,
            padding: dense ? "dense" : "default",
            toolbar: false
          },
          columns: [
            {
              title: "Commit Message",
              field: "message",
              render: (data) => /* @__PURE__ */ jsx(Link, { component: Link$1, to: routeLink({ id: data.id }), children: firstLine(data.message ?? "") })
            },
            { title: "Branch", field: "source.branchName" },
            {
              title: "Status",
              field: "status",
              render: (p) => /* @__PURE__ */ jsx(Box, { display: "flex", children: /* @__PURE__ */ jsx(WorkflowRunStatus, { ...p }) })
            }
          ],
          data: runs
        }
      )
    }
  );
};

export { RecentWorkflowRunsCard };
//# sourceMappingURL=RecentWorkflowRunsCard.esm.js.map
