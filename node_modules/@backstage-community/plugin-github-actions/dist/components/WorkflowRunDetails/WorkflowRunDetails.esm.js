import { jsxs, jsx } from 'react/jsx-runtime';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Box from '@material-ui/core/Box';
import CircularProgress from '@material-ui/core/CircularProgress';
import LinearProgress from '@material-ui/core/LinearProgress';
import ListItemText from '@material-ui/core/ListItemText';
import Paper from '@material-ui/core/Paper';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableRow from '@material-ui/core/TableRow';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import ExternalLinkIcon from '@material-ui/icons/Launch';
import { DateTime } from 'luxon';
import { getProjectNameFromEntity } from '../getProjectNameFromEntity.esm.js';
import { WorkflowRunStatus } from '../WorkflowRunStatus/WorkflowRunStatus.esm.js';
import { useWorkflowRunJobs } from './useWorkflowRunJobs.esm.js';
import { useWorkflowRunsDetails } from './useWorkflowRunsDetails.esm.js';
import { WorkflowRunLogs } from '../WorkflowRunLogs/WorkflowRunLogs.esm.js';
import { Breadcrumbs, Link } from '@backstage/core-components';
import { getHostnameFromEntity } from '../getHostnameFromEntity.esm.js';

const useStyles = makeStyles((theme) => ({
  root: {
    maxWidth: 720,
    margin: theme.spacing(2)
  },
  title: {
    padding: theme.spacing(1, 0, 2, 0)
  },
  table: {
    padding: theme.spacing(1)
  },
  accordionDetails: {
    padding: 0
  },
  button: {
    order: -1,
    marginRight: 0,
    marginLeft: "-20px"
  },
  externalLinkIcon: {
    fontSize: "inherit",
    verticalAlign: "bottom"
  }
}));
const getElapsedTime = (start, end) => {
  if (!start || !end) {
    return "";
  }
  const startDate = DateTime.fromISO(start);
  const endDate = end ? DateTime.fromISO(end) : DateTime.now();
  const diff = endDate.diff(startDate);
  const timeElapsed = diff.toFormat(`m 'minutes' s 'seconds'`);
  return timeElapsed;
};
const StepView = ({ step }) => {
  return /* @__PURE__ */ jsxs(TableRow, { children: [
    /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(
      ListItemText,
      {
        primary: step.name,
        secondary: getElapsedTime(step.started_at, step.completed_at)
      }
    ) }),
    /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(
      WorkflowRunStatus,
      {
        status: step.status.toLocaleUpperCase("en-US"),
        conclusion: step.conclusion?.toLocaleUpperCase("en-US")
      }
    ) })
  ] });
};
const JobListItem = ({
  job,
  className,
  entity
}) => {
  const classes = useStyles();
  return /* @__PURE__ */ jsxs(Accordion, { TransitionProps: { unmountOnExit: true }, className, children: [
    /* @__PURE__ */ jsx(
      AccordionSummary,
      {
        expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
        IconButtonProps: {
          className: classes.button
        },
        children: /* @__PURE__ */ jsxs(Typography, { variant: "button", children: [
          job.name,
          " (",
          getElapsedTime(job.started_at, job.completed_at),
          ")"
        ] })
      }
    ),
    /* @__PURE__ */ jsx(AccordionDetails, { className: classes.accordionDetails, children: /* @__PURE__ */ jsx(TableContainer, { children: /* @__PURE__ */ jsx(Table, { children: job.steps?.map((step) => /* @__PURE__ */ jsx(StepView, { step }, step.number)) }) }) }),
    job.status === "queued" || job.status === "in_progress" ? /* @__PURE__ */ jsx(WorkflowRunLogs, { runId: job.id, inProgress: true, entity }) : /* @__PURE__ */ jsx(WorkflowRunLogs, { runId: job.id, inProgress: false, entity })
  ] });
};
const JobsList = ({ jobs, entity }) => {
  const classes = useStyles();
  return /* @__PURE__ */ jsx(Box, { children: jobs && jobs.total_count > 0 && jobs.jobs.map((job) => /* @__PURE__ */ jsx(
    JobListItem,
    {
      job,
      className: job.status !== "success" ? classes.failed : classes.success,
      entity
    },
    job.id
  )) });
};
const WorkflowRunDetails = ({ entity }) => {
  const projectName = getProjectNameFromEntity(entity);
  const hostname = getHostnameFromEntity(entity);
  const [owner, repo] = projectName && projectName.split("/") || [];
  const details = useWorkflowRunsDetails({ hostname, owner, repo });
  const jobs = useWorkflowRunJobs({ hostname, owner, repo });
  const classes = useStyles();
  if (details.error && details.error.message) {
    return /* @__PURE__ */ jsxs(Typography, { variant: "h6", color: "error", children: [
      "Failed to load build, ",
      details.error.message
    ] });
  } else if (details.loading) {
    return /* @__PURE__ */ jsx(LinearProgress, {});
  }
  return /* @__PURE__ */ jsxs("div", { className: classes.root, children: [
    /* @__PURE__ */ jsx(Box, { mb: 3, children: /* @__PURE__ */ jsxs(Breadcrumbs, { "aria-label": "breadcrumb", children: [
      /* @__PURE__ */ jsx(Link, { to: "..", children: "Workflow runs" }),
      /* @__PURE__ */ jsx(Typography, { children: "Workflow run details" })
    ] }) }),
    /* @__PURE__ */ jsx(TableContainer, { component: Paper, className: classes.table, children: /* @__PURE__ */ jsx(Table, { children: /* @__PURE__ */ jsxs(TableBody, { children: [
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Branch" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: details.value?.head_branch })
      ] }),
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Message" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: details.value?.head_commit?.message })
      ] }),
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Commit ID" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: details.value?.head_commit?.id })
      ] }),
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Workflow" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: details.value?.name })
      ] }),
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Status" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(
          WorkflowRunStatus,
          {
            status: details.value?.status || void 0,
            conclusion: details.value?.conclusion || void 0
          }
        ) })
      ] }),
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Author" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: `${details.value?.head_commit?.author?.name} (${details.value?.head_commit?.author?.email})` })
      ] }),
      /* @__PURE__ */ jsxs(TableRow, { children: [
        /* @__PURE__ */ jsx(TableCell, { children: /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Links" }) }),
        /* @__PURE__ */ jsx(TableCell, { children: details.value?.html_url && /* @__PURE__ */ jsxs(Link, { to: details.value.html_url, children: [
          "Workflow runs on GitHub",
          " ",
          /* @__PURE__ */ jsx(ExternalLinkIcon, { className: classes.externalLinkIcon })
        ] }) })
      ] }),
      /* @__PURE__ */ jsx(TableRow, { children: /* @__PURE__ */ jsxs(TableCell, { colSpan: 2, children: [
        /* @__PURE__ */ jsx(Typography, { noWrap: true, children: "Jobs" }),
        jobs.loading ? /* @__PURE__ */ jsx(CircularProgress, {}) : /* @__PURE__ */ jsx(JobsList, { jobs: jobs.value, entity })
      ] }) })
    ] }) }) })
  ] });
};

export { WorkflowRunDetails };
//# sourceMappingURL=WorkflowRunDetails.esm.js.map
