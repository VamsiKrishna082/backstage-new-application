{"version":3,"file":"WorkflowRunDetails.esm.js","sources":["../../../src/components/WorkflowRunDetails/WorkflowRunDetails.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExternalLinkIcon from '@material-ui/icons/Launch';\nimport { DateTime } from 'luxon';\nimport { Job, Jobs, Step } from '../../api';\nimport { getProjectNameFromEntity } from '../getProjectNameFromEntity';\nimport { WorkflowRunStatus } from '../WorkflowRunStatus';\nimport { useWorkflowRunJobs } from './useWorkflowRunJobs';\nimport { useWorkflowRunsDetails } from './useWorkflowRunsDetails';\nimport { WorkflowRunLogs } from '../WorkflowRunLogs';\nimport { Breadcrumbs, Link } from '@backstage/core-components';\nimport { getHostnameFromEntity } from '../getHostnameFromEntity';\n\nconst useStyles = makeStyles<Theme>(theme => ({\n  root: {\n    maxWidth: 720,\n    margin: theme.spacing(2),\n  },\n  title: {\n    padding: theme.spacing(1, 0, 2, 0),\n  },\n  table: {\n    padding: theme.spacing(1),\n  },\n  accordionDetails: {\n    padding: 0,\n  },\n  button: {\n    order: -1,\n    marginRight: 0,\n    marginLeft: '-20px',\n  },\n  externalLinkIcon: {\n    fontSize: 'inherit',\n    verticalAlign: 'bottom',\n  },\n}));\n\nconst getElapsedTime = (start: string | undefined, end: string | undefined) => {\n  if (!start || !end) {\n    return '';\n  }\n  const startDate = DateTime.fromISO(start);\n  const endDate = end ? DateTime.fromISO(end) : DateTime.now();\n  const diff = endDate.diff(startDate);\n  const timeElapsed = diff.toFormat(`m 'minutes' s 'seconds'`);\n  return timeElapsed;\n};\n\nconst StepView = ({ step }: { step: Step }) => {\n  return (\n    <TableRow>\n      <TableCell>\n        <ListItemText\n          primary={step.name}\n          secondary={getElapsedTime(step.started_at, step.completed_at)}\n        />\n      </TableCell>\n      <TableCell>\n        <WorkflowRunStatus\n          status={step.status.toLocaleUpperCase('en-US')}\n          conclusion={step.conclusion?.toLocaleUpperCase('en-US')}\n        />\n      </TableCell>\n    </TableRow>\n  );\n};\n\nconst JobListItem = ({\n  job,\n  className,\n  entity,\n}: {\n  job: Job;\n  className: string;\n  entity: Entity;\n}) => {\n  const classes = useStyles();\n  return (\n    <Accordion TransitionProps={{ unmountOnExit: true }} className={className}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        IconButtonProps={{\n          className: classes.button,\n        }}\n      >\n        <Typography variant=\"button\">\n          {job.name} ({getElapsedTime(job.started_at, job.completed_at)})\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.accordionDetails}>\n        <TableContainer>\n          <Table>\n            {job.steps?.map(step => (\n              <StepView key={step.number} step={step} />\n            ))}\n          </Table>\n        </TableContainer>\n      </AccordionDetails>\n      {job.status === 'queued' || job.status === 'in_progress' ? (\n        <WorkflowRunLogs runId={job.id} inProgress entity={entity} />\n      ) : (\n        <WorkflowRunLogs runId={job.id} inProgress={false} entity={entity} />\n      )}\n    </Accordion>\n  );\n};\n\nconst JobsList = ({ jobs, entity }: { jobs?: Jobs; entity: Entity }) => {\n  const classes = useStyles();\n  return (\n    <Box>\n      {jobs &&\n        jobs.total_count > 0 &&\n        jobs.jobs.map(job => (\n          <JobListItem\n            key={job.id}\n            job={job}\n            className={\n              job.status !== 'success' ? classes.failed : classes.success\n            }\n            entity={entity}\n          />\n        ))}\n    </Box>\n  );\n};\n\nexport const WorkflowRunDetails = ({ entity }: { entity: Entity }) => {\n  const projectName = getProjectNameFromEntity(entity);\n\n  const hostname = getHostnameFromEntity(entity);\n  const [owner, repo] = (projectName && projectName.split('/')) || [];\n  const details = useWorkflowRunsDetails({ hostname, owner, repo });\n  const jobs = useWorkflowRunJobs({ hostname, owner, repo });\n\n  const classes = useStyles();\n\n  if (details.error && details.error.message) {\n    return (\n      <Typography variant=\"h6\" color=\"error\">\n        Failed to load build, {details.error.message}\n      </Typography>\n    );\n  } else if (details.loading) {\n    return <LinearProgress />;\n  }\n  return (\n    <div className={classes.root}>\n      <Box mb={3}>\n        <Breadcrumbs aria-label=\"breadcrumb\">\n          <Link to=\"..\">Workflow runs</Link>\n          <Typography>Workflow run details</Typography>\n        </Breadcrumbs>\n      </Box>\n      <TableContainer component={Paper} className={classes.table}>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Branch</Typography>\n              </TableCell>\n              <TableCell>{details.value?.head_branch}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Message</Typography>\n              </TableCell>\n              <TableCell>{details.value?.head_commit?.message}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Commit ID</Typography>\n              </TableCell>\n              <TableCell>{details.value?.head_commit?.id}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Workflow</Typography>\n              </TableCell>\n              <TableCell>{details.value?.name}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Status</Typography>\n              </TableCell>\n              <TableCell>\n                <WorkflowRunStatus\n                  status={details.value?.status || undefined}\n                  conclusion={details.value?.conclusion || undefined}\n                />\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Author</Typography>\n              </TableCell>\n              <TableCell>{`${details.value?.head_commit?.author?.name} (${details.value?.head_commit?.author?.email})`}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography noWrap>Links</Typography>\n              </TableCell>\n              <TableCell>\n                {details.value?.html_url && (\n                  <Link to={details.value.html_url}>\n                    Workflow runs on GitHub{' '}\n                    <ExternalLinkIcon className={classes.externalLinkIcon} />\n                  </Link>\n                )}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell colSpan={2}>\n                <Typography noWrap>Jobs</Typography>\n                {jobs.loading ? (\n                  <CircularProgress />\n                ) : (\n                  <JobsList jobs={jobs.value} entity={entity} />\n                )}\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n"],"names":[],"mappings":"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"}