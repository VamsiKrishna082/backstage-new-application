import { jsxs, jsx } from 'react/jsx-runtime';
import { LogViewer } from '@backstage/core-components';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import CircularProgress from '@material-ui/core/CircularProgress';
import Fade from '@material-ui/core/Fade';
import Modal from '@material-ui/core/Modal';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import Zoom from '@material-ui/core/Zoom';
import { makeStyles } from '@material-ui/core/styles';
import DescriptionIcon from '@material-ui/icons/Description';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { useState } from 'react';
import { getProjectNameFromEntity } from '../getProjectNameFromEntity.esm.js';
import { useDownloadWorkflowRunLogs } from './useDownloadWorkflowRunLogs.esm.js';
import { getHostnameFromEntity } from '../getHostnameFromEntity.esm.js';

const useStyles = makeStyles((theme) => ({
  button: {
    order: -1,
    marginRight: 0,
    marginLeft: "-20px"
  },
  modal: {
    display: "flex",
    alignItems: "center",
    width: "85%",
    height: "85%",
    justifyContent: "center",
    margin: "auto"
  },
  normalLogContainer: {
    height: "75vh",
    width: "100%"
  },
  modalLogContainer: {
    height: "100%",
    width: "100%"
  },
  log: {
    background: theme.palette.background.default
  }
}));
const WorkflowRunLogs = ({
  entity,
  runId,
  inProgress
}) => {
  const classes = useStyles();
  const projectName = getProjectNameFromEntity(entity);
  const hostname = getHostnameFromEntity(entity);
  const [owner, repo] = projectName && projectName.split("/") || [];
  const jobLogs = useDownloadWorkflowRunLogs({
    hostname,
    owner,
    repo,
    id: runId
  });
  const logText = jobLogs.value ? String(jobLogs.value) : void 0;
  const [open, setOpen] = useState(false);
  const handleOpen = () => {
    setOpen(true);
  };
  const handleClose = () => {
    setOpen(false);
  };
  return /* @__PURE__ */ jsxs(Accordion, { TransitionProps: { unmountOnExit: true }, disabled: inProgress, children: [
    /* @__PURE__ */ jsxs(
      AccordionSummary,
      {
        expandIcon: /* @__PURE__ */ jsx(ExpandMoreIcon, {}),
        IconButtonProps: {
          className: classes.button
        },
        children: [
          /* @__PURE__ */ jsx(Typography, { variant: "button", children: jobLogs.loading ? /* @__PURE__ */ jsx(CircularProgress, {}) : "Job Log" }),
          /* @__PURE__ */ jsx(Tooltip, { title: "Open Log", TransitionComponent: Zoom, arrow: true, children: /* @__PURE__ */ jsx(
            DescriptionIcon,
            {
              onClick: (event) => {
                event.stopPropagation();
                handleOpen();
              },
              style: { marginLeft: "auto" }
            }
          ) }),
          /* @__PURE__ */ jsx(
            Modal,
            {
              className: classes.modal,
              onClick: (event) => event.stopPropagation(),
              open,
              onClose: handleClose,
              children: /* @__PURE__ */ jsx(Fade, { in: open, children: /* @__PURE__ */ jsx("div", { className: classes.modalLogContainer, children: /* @__PURE__ */ jsx(
                LogViewer,
                {
                  text: logText ?? "No Values Found",
                  classes: { root: classes.log }
                }
              ) }) })
            }
          )
        ]
      }
    ),
    logText && /* @__PURE__ */ jsx("div", { className: classes.normalLogContainer, children: /* @__PURE__ */ jsx(LogViewer, { text: logText, classes: { root: classes.log } }) })
  ] });
};

export { WorkflowRunLogs };
//# sourceMappingURL=WorkflowRunLogs.esm.js.map
