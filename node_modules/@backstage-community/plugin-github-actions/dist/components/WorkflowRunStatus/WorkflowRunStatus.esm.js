import { jsxs, jsx } from 'react/jsx-runtime';
import { StatusPending, StatusOK, StatusError, StatusWarning, StatusAborted, StatusRunning } from '@backstage/core-components';
import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';

const useStyles = makeStyles(() => ({
  statusIcon: {
    "& svg": {
      position: "static"
    }
  }
}));
const WorkflowRunStatus = (props) => {
  const classes = useStyles();
  return /* @__PURE__ */ jsxs(Box, { display: "flex", justifyContent: "center", alignItems: "center", children: [
    /* @__PURE__ */ jsx(Box, { className: classes.statusIcon, children: /* @__PURE__ */ jsx(WorkflowIcon, { ...props }) }),
    /* @__PURE__ */ jsx(Typography, { variant: "body2", children: getStatusDescription(props) })
  ] });
};
function WorkflowIcon({
  status,
  conclusion
}) {
  if (status === void 0) return null;
  switch (status.toLocaleLowerCase("en-US")) {
    case "queued":
      return /* @__PURE__ */ jsx(StatusPending, {});
    case "in_progress":
      return /* @__PURE__ */ jsx(StatusRunning, {});
    case "completed":
      switch (conclusion?.toLocaleLowerCase("en-US")) {
        case "skipped":
        case "cancelled":
          return /* @__PURE__ */ jsx(StatusAborted, {});
        case "timed_out":
          return /* @__PURE__ */ jsx(StatusWarning, {});
        case "failure":
          return /* @__PURE__ */ jsx(StatusError, {});
        default:
          return /* @__PURE__ */ jsx(StatusOK, {});
      }
    default:
      return /* @__PURE__ */ jsx(StatusPending, {});
  }
}
function getStatusDescription({
  status,
  conclusion
}) {
  if (status === void 0) return "";
  switch (status.toLocaleLowerCase("en-US")) {
    case "queued":
      return "Queued";
    case "in_progress":
      return "In progress";
    case "completed":
      switch (conclusion?.toLocaleLowerCase("en-US")) {
        case "skipped":
        case "cancelled":
          return "Aborted";
        case "timed_out":
          return "Timed out";
        case "failure":
          return "Error";
        default:
          return "Completed";
      }
    default:
      return "Pending";
  }
}

export { WorkflowIcon, WorkflowRunStatus, getStatusDescription };
//# sourceMappingURL=WorkflowRunStatus.esm.js.map
