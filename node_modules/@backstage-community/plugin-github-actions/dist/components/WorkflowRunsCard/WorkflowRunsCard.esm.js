import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState, useEffect } from 'react';
import Typography from '@material-ui/core/Typography';
import Box from '@material-ui/core/Box';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import ButtonGroup from '@material-ui/core/ButtonGroup';
import Grid from '@material-ui/core/Grid';
import TablePagination from '@material-ui/core/TablePagination';
import Select from '@material-ui/core/Select';
import MenuItem from '@material-ui/core/MenuItem';
import TextField from '@material-ui/core/TextField';
import CircularProgress from '@material-ui/core/CircularProgress';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import { InfoCard, Link, LinkButton } from '@backstage/core-components';
import GitHubIcon from '@material-ui/icons/GitHub';
import RetryIcon from '@material-ui/icons/Replay';
import SyncIcon from '@material-ui/icons/Sync';
import ExternalLinkIcon from '@material-ui/icons/Launch';
import { useRouteRef } from '@backstage/core-plugin-api';
import { useWorkflowRuns } from '../useWorkflowRuns.esm.js';
import { WorkflowRunStatus } from '../WorkflowRunStatus/WorkflowRunStatus.esm.js';
import { buildRouteRef } from '../../routes.esm.js';
import { getProjectNameFromEntity } from '../getProjectNameFromEntity.esm.js';
import { getHostnameFromEntity } from '../getHostnameFromEntity.esm.js';
import Alert from '@material-ui/lab/Alert';
import Button from '@material-ui/core/Button';

const useStyles = makeStyles(
  (theme) => createStyles({
    card: {
      border: `1px solid ${theme.palette.divider}`,
      boxShadow: theme.shadows[2],
      borderRadius: "4px",
      overflow: "visible",
      position: "relative",
      margin: theme.spacing(4, 1, 1),
      flex: "1",
      minWidth: "0px"
    },
    externalLinkIcon: {
      fontSize: "inherit",
      verticalAlign: "middle"
    },
    pagination: {
      width: "100%"
    }
  })
);
const statusColors = {
  skipped: "warning",
  canceled: "info",
  timed_out: "error",
  failure: "error",
  success: "success"
};
const matchesSearchTerm = (run, searchTerm) => {
  const lowerCaseSearchTerm = searchTerm.toLocaleLowerCase();
  return run.workflowName?.toLocaleLowerCase().includes(lowerCaseSearchTerm) || run.source.branchName?.toLocaleLowerCase().includes(lowerCaseSearchTerm) || run.status?.toLocaleLowerCase().includes(lowerCaseSearchTerm) || run.id?.toLocaleLowerCase().includes(lowerCaseSearchTerm);
};
const WorkflowRunsCardView = ({
  runs,
  searchTerm,
  loading,
  onChangePageSize,
  onChangePage,
  page,
  total,
  pageSize
}) => {
  const classes = useStyles();
  const routeLink = useRouteRef(buildRouteRef);
  const filteredRuns = runs?.filter((run) => matchesSearchTerm(run, searchTerm));
  return /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 3, children: [
    filteredRuns && runs?.length !== 0 ? filteredRuns.map((run) => /* @__PURE__ */ jsx(Grid, { item: true, container: true, xs: 12, lg: 6, xl: 4, children: /* @__PURE__ */ jsx(Box, { className: classes.card, children: /* @__PURE__ */ jsx(
      Box,
      {
        display: "flex",
        flexDirection: "column",
        p: 2,
        height: "100%",
        alignItems: "center",
        children: /* @__PURE__ */ jsxs(
          Box,
          {
            sx: { width: "100%" },
            textAlign: "center",
            display: "flex",
            flexDirection: "column",
            height: "100%",
            children: [
              /* @__PURE__ */ jsx(
                Tooltip,
                {
                  title: run.status ?? "No Status",
                  placement: "top-start",
                  children: /* @__PURE__ */ jsx(
                    Alert,
                    {
                      variant: "outlined",
                      severity: statusColors[run.conclusion],
                      style: { alignItems: "center" },
                      children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: /* @__PURE__ */ jsx(Link, { to: routeLink({ id: run.id }), children: /* @__PURE__ */ jsx(Typography, { variant: "h6", children: run.workflowName }) }) })
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx(Tooltip, { title: run.message ?? "No run message", children: /* @__PURE__ */ jsxs(Box, { display: "flex", flexDirection: "column", marginY: 1, children: [
                /* @__PURE__ */ jsx(Typography, { variant: "subtitle2", component: "span", children: "Commit" }),
                /* @__PURE__ */ jsx(
                  Typography,
                  {
                    variant: "body2",
                    component: "span",
                    style: { overflowWrap: "break-word" },
                    children: run.source.commit.hash
                  }
                )
              ] }) }),
              run.source.branchName && /* @__PURE__ */ jsxs(Box, { display: "flex", flexDirection: "column", marginY: 1, children: [
                /* @__PURE__ */ jsx(Typography, { variant: "subtitle2", component: "span", children: "Branch" }),
                /* @__PURE__ */ jsx(
                  Typography,
                  {
                    variant: "body2",
                    component: "span",
                    style: { overflowWrap: "break-word" },
                    children: run.source.branchName
                  }
                )
              ] }),
              /* @__PURE__ */ jsxs(Box, { display: "flex", flexDirection: "column", marginY: 1, children: [
                /* @__PURE__ */ jsx(Typography, { variant: "subtitle2", component: "span", children: "Workflow ID" }),
                /* @__PURE__ */ jsx(
                  Typography,
                  {
                    variant: "body2",
                    component: "span",
                    style: { overflowWrap: "break-word" },
                    children: run.id
                  }
                )
              ] }),
              /* @__PURE__ */ jsx(
                WorkflowRunStatus,
                {
                  status: run.status,
                  conclusion: run.conclusion
                }
              ),
              /* @__PURE__ */ jsxs(
                Box,
                {
                  display: "flex",
                  flexDirection: "column",
                  justifyContent: "space-between",
                  alignItems: "center",
                  mt: "auto",
                  children: [
                    /* @__PURE__ */ jsx(Box, { marginTop: 2, marginBottom: 1, children: /* @__PURE__ */ jsx(
                      Button,
                      {
                        endIcon: /* @__PURE__ */ jsx(RetryIcon, {}),
                        onClick: run.onReRunClick,
                        variant: "outlined",
                        children: "Rerun workflow"
                      }
                    ) }),
                    run.githubUrl && /* @__PURE__ */ jsx(Box, { children: /* @__PURE__ */ jsx(
                      LinkButton,
                      {
                        to: run.githubUrl,
                        endIcon: /* @__PURE__ */ jsx(ExternalLinkIcon, {}),
                        children: "View on GitHub"
                      }
                    ) })
                  ]
                }
              )
            ]
          }
        )
      }
    ) }) }, run.id)) : /* @__PURE__ */ jsx(Box, { p: 2, children: loading ? /* @__PURE__ */ jsx(CircularProgress, {}) : "No matching runs found." }),
    /* @__PURE__ */ jsx("div", { className: classes.pagination, children: /* @__PURE__ */ jsx(
      TablePagination,
      {
        component: "div",
        count: total,
        page,
        rowsPerPage: pageSize,
        onPageChange: (_, newPage) => onChangePage(newPage),
        onRowsPerPageChange: (event) => onChangePageSize(parseInt(event.target.value, 6)),
        labelRowsPerPage: "Workflows per page",
        rowsPerPageOptions: [6, 12, 18, { label: "All", value: -1 }]
      }
    ) })
  ] });
};
const WorkflowRunsCardSearch = ({
  searchTerm,
  handleSearch,
  retry
}) => {
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(Box, { flexGrow: 1 }),
    /* @__PURE__ */ jsx(
      TextField,
      {
        type: "search",
        label: "Search",
        value: searchTerm,
        onChange: handleSearch,
        "data-testid": "search-control",
        style: { marginRight: "20px" }
      }
    ),
    /* @__PURE__ */ jsx(ButtonGroup, { children: /* @__PURE__ */ jsx(Tooltip, { title: "Reload workflow runs", children: /* @__PURE__ */ jsx(IconButton, { onClick: retry, children: /* @__PURE__ */ jsx(SyncIcon, {}) }) }) })
  ] });
};
const WorkflowRunsCard = ({ entity }) => {
  const projectName = getProjectNameFromEntity(entity);
  const hostname = getHostnameFromEntity(entity);
  const [owner, repo] = (projectName ?? "/").split("/");
  const [branch, setBranch] = useState("default");
  const [runs, setRuns] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const handleSearch = (event) => {
    setSearchTerm(event.target.value);
  };
  const [
    { runs: runsData, branches, defaultBranch, ...cardProps },
    { retry, setPage, setPageSize }
  ] = useWorkflowRuns({
    hostname,
    owner,
    repo,
    branch: branch === "all" ? void 0 : branch
  });
  const handleMenuChange = (event) => {
    const selectedValue = event.target.value;
    setBranch(selectedValue);
    setPage(0);
    retry();
  };
  useEffect(() => {
    setRuns(runsData);
  }, [runsData, branch]);
  useEffect(() => {
    setBranch(defaultBranch);
  }, [defaultBranch]);
  return /* @__PURE__ */ jsx(Grid, { item: true, children: /* @__PURE__ */ jsx(
    InfoCard,
    {
      title: /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
        /* @__PURE__ */ jsx(GitHubIcon, {}),
        /* @__PURE__ */ jsx(Box, { mr: 1 }),
        /* @__PURE__ */ jsx(Typography, { variant: "h6", children: projectName }),
        /* @__PURE__ */ jsxs(
          Select,
          {
            value: branch,
            label: "Branch",
            onChange: handleMenuChange,
            "data-testid": "menu-control",
            style: {
              marginLeft: "30px",
              marginRight: "20px",
              width: "230px"
            },
            children: [
              branches.map((branchItem) => /* @__PURE__ */ jsx(MenuItem, { value: branchItem.name, children: branchItem.name === defaultBranch ? /* @__PURE__ */ jsxs(Typography, { variant: "body2", component: "span", children: [
                branchItem.name,
                " ",
                /* @__PURE__ */ jsx(
                  Typography,
                  {
                    variant: "body2",
                    component: "span",
                    style: { color: "lightgray", fontSize: "x-small" },
                    children: "(default)"
                  }
                )
              ] }) : branchItem.name }, branchItem.name)),
              /* @__PURE__ */ jsx(
                MenuItem,
                {
                  value: "all",
                  style: { color: "lightGrey", fontSize: "small" },
                  children: "select all branches"
                },
                "all"
              )
            ]
          },
          branch
        ),
        /* @__PURE__ */ jsx(
          WorkflowRunsCardSearch,
          {
            searchTerm,
            handleSearch,
            retry
          }
        )
      ] }),
      children: /* @__PURE__ */ jsx(
        WorkflowRunsCardView,
        {
          runs,
          loading: cardProps.loading,
          onChangePageSize: setPageSize,
          onChangePage: setPage,
          page: cardProps.page,
          total: cardProps.total,
          pageSize: cardProps.pageSize,
          searchTerm,
          projectName
        }
      )
    }
  ) });
};

export { WorkflowRunsCard, WorkflowRunsCardView, WorkflowRunsCard as default };
//# sourceMappingURL=WorkflowRunsCard.esm.js.map
