{"version":3,"file":"WorkflowRunsCard.esm.js","sources":["../../../src/components/WorkflowRunsCard/WorkflowRunsCard.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Grid from '@material-ui/core/Grid';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { LinkButton, Link, InfoCard } from '@backstage/core-components';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport RetryIcon from '@material-ui/icons/Replay';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport ExternalLinkIcon from '@material-ui/icons/Launch';\nimport { useRouteRef } from '@backstage/core-plugin-api';\nimport { useWorkflowRuns, WorkflowRun } from '../useWorkflowRuns';\nimport { WorkflowRunStatus } from '../WorkflowRunStatus';\nimport { buildRouteRef } from '../../routes';\nimport { getProjectNameFromEntity } from '../getProjectNameFromEntity';\nimport { getHostnameFromEntity } from '../getHostnameFromEntity';\n\nimport Alert, { Color } from '@material-ui/lab/Alert';\nimport { Entity } from '@backstage/catalog-model';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      border: `1px solid ${theme.palette.divider}`,\n      boxShadow: theme.shadows[2],\n      borderRadius: '4px',\n      overflow: 'visible',\n      position: 'relative',\n      margin: theme.spacing(4, 1, 1),\n      flex: '1',\n      minWidth: '0px',\n    },\n    externalLinkIcon: {\n      fontSize: 'inherit',\n      verticalAlign: 'middle',\n    },\n    pagination: {\n      width: '100%',\n    },\n  }),\n);\n\ntype WorkflowRunsCardViewProps = {\n  runs?: WorkflowRun[];\n  searchTerm: string;\n  loading: boolean;\n  onChangePageSize: (pageSize: number) => void;\n  onChangePage: (page: number) => void;\n  page: number;\n  total: number;\n  pageSize: number;\n  projectName: string;\n};\n\nconst statusColors: Record<string, string> = {\n  skipped: 'warning',\n  canceled: 'info',\n  timed_out: 'error',\n  failure: 'error',\n  success: 'success',\n};\n\nconst matchesSearchTerm = (run: WorkflowRun, searchTerm: string) => {\n  const lowerCaseSearchTerm = searchTerm.toLocaleLowerCase();\n  return (\n    run.workflowName?.toLocaleLowerCase().includes(lowerCaseSearchTerm) ||\n    run.source.branchName?.toLocaleLowerCase().includes(lowerCaseSearchTerm) ||\n    run.status?.toLocaleLowerCase().includes(lowerCaseSearchTerm) ||\n    run.id?.toLocaleLowerCase().includes(lowerCaseSearchTerm)\n  );\n};\n\nexport const WorkflowRunsCardView = ({\n  runs,\n  searchTerm,\n  loading,\n  onChangePageSize,\n  onChangePage,\n  page,\n  total,\n  pageSize,\n}: WorkflowRunsCardViewProps) => {\n  const classes = useStyles();\n  const routeLink = useRouteRef(buildRouteRef);\n\n  const filteredRuns = runs?.filter(run => matchesSearchTerm(run, searchTerm));\n\n  return (\n    <Grid container spacing={3}>\n      {filteredRuns && runs?.length !== 0 ? (\n        filteredRuns.map(run => (\n          <Grid key={run.id} item container xs={12} lg={6} xl={4}>\n            <Box className={classes.card}>\n              <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                p={2}\n                height=\"100%\"\n                alignItems=\"center\"\n              >\n                <Box\n                  sx={{ width: '100%' }}\n                  textAlign=\"center\"\n                  display=\"flex\"\n                  flexDirection=\"column\"\n                  height=\"100%\"\n                >\n                  <Tooltip\n                    title={run.status ?? 'No Status'}\n                    placement=\"top-start\"\n                  >\n                    <Alert\n                      variant=\"outlined\"\n                      severity={\n                        statusColors[\n                          run.conclusion as keyof typeof statusColors\n                        ] as Color\n                      }\n                      style={{ alignItems: 'center' }}\n                    >\n                      <Typography variant=\"h6\">\n                        <Link to={routeLink({ id: run.id })}>\n                          <Typography variant=\"h6\">\n                            {run.workflowName}\n                          </Typography>\n                        </Link>\n                      </Typography>\n                    </Alert>\n                  </Tooltip>\n                  <Tooltip title={run.message ?? 'No run message'}>\n                    <Box display=\"flex\" flexDirection=\"column\" marginY={1}>\n                      <Typography variant=\"subtitle2\" component=\"span\">\n                        Commit\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"span\"\n                        style={{ overflowWrap: 'break-word' }}\n                      >\n                        {run.source.commit.hash!}\n                      </Typography>\n                    </Box>\n                  </Tooltip>\n\n                  {run.source.branchName && (\n                    <Box display=\"flex\" flexDirection=\"column\" marginY={1}>\n                      <Typography variant=\"subtitle2\" component=\"span\">\n                        Branch\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        component=\"span\"\n                        style={{ overflowWrap: 'break-word' }}\n                      >\n                        {run.source.branchName}\n                      </Typography>\n                    </Box>\n                  )}\n                  <Box display=\"flex\" flexDirection=\"column\" marginY={1}>\n                    <Typography variant=\"subtitle2\" component=\"span\">\n                      Workflow ID\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      component=\"span\"\n                      style={{ overflowWrap: 'break-word' }}\n                    >\n                      {run.id}\n                    </Typography>\n                  </Box>\n                  <WorkflowRunStatus\n                    status={run.status}\n                    conclusion={run.conclusion}\n                  />\n                  <Box\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    mt=\"auto\"\n                  >\n                    <Box marginTop={2} marginBottom={1}>\n                      <Button\n                        endIcon={<RetryIcon />}\n                        onClick={run.onReRunClick}\n                        variant=\"outlined\"\n                      >\n                        Rerun workflow\n                      </Button>\n                    </Box>\n\n                    {run.githubUrl && (\n                      <Box>\n                        <LinkButton\n                          to={run.githubUrl}\n                          endIcon={<ExternalLinkIcon />}\n                        >\n                          View on GitHub\n                        </LinkButton>\n                      </Box>\n                    )}\n                  </Box>\n                </Box>\n              </Box>\n            </Box>\n          </Grid>\n        ))\n      ) : (\n        <Box p={2}>\n          {loading ? <CircularProgress /> : 'No matching runs found.'}\n        </Box>\n      )}\n      <div className={classes.pagination}>\n        <TablePagination\n          component=\"div\"\n          count={total}\n          page={page}\n          rowsPerPage={pageSize}\n          onPageChange={(_, newPage) => onChangePage(newPage)}\n          onRowsPerPageChange={event =>\n            onChangePageSize(parseInt(event.target.value, 6))\n          }\n          labelRowsPerPage=\"Workflows per page\"\n          rowsPerPageOptions={[6, 12, 18, { label: 'All', value: -1 }]}\n        />\n      </div>\n    </Grid>\n  );\n};\n\ntype WorkflowRunsCardProps = {\n  entity: Entity;\n};\n\nconst WorkflowRunsCardSearch = ({\n  searchTerm,\n  handleSearch,\n  retry,\n}: {\n  searchTerm: string;\n  handleSearch: (event: ChangeEvent<HTMLInputElement>) => void;\n  retry: () => void;\n}) => {\n  return (\n    <>\n      <Box flexGrow={1} />\n      <TextField\n        type=\"search\"\n        label=\"Search\"\n        value={searchTerm}\n        onChange={handleSearch}\n        data-testid=\"search-control\"\n        style={{ marginRight: '20px' }}\n      />\n      <ButtonGroup>\n        <Tooltip title=\"Reload workflow runs\">\n          <IconButton onClick={retry}>\n            <SyncIcon />\n          </IconButton>\n        </Tooltip>\n      </ButtonGroup>\n    </>\n  );\n};\n\nexport const WorkflowRunsCard = ({ entity }: WorkflowRunsCardProps) => {\n  const projectName = getProjectNameFromEntity(entity);\n  const hostname = getHostnameFromEntity(entity);\n  const [owner, repo] = (projectName ?? '/').split('/');\n  const [branch, setBranch] = useState<string | undefined>('default');\n  const [runs, setRuns] = useState<WorkflowRun[] | undefined>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const [\n    { runs: runsData, branches, defaultBranch, ...cardProps },\n    { retry, setPage, setPageSize },\n  ] = useWorkflowRuns({\n    hostname,\n    owner,\n    repo,\n    branch: branch === 'all' ? undefined : branch,\n  });\n\n  const handleMenuChange = (\n    event: ChangeEvent<{ name?: string; value: unknown }>,\n  ) => {\n    const selectedValue = event.target.value as string;\n    setBranch(selectedValue);\n    setPage(0);\n    retry();\n  };\n\n  useEffect(() => {\n    setRuns(runsData);\n  }, [runsData, branch]);\n\n  useEffect(() => {\n    setBranch(defaultBranch);\n  }, [defaultBranch]);\n\n  return (\n    <Grid item>\n      <InfoCard\n        title={\n          <Box display=\"flex\" alignItems=\"center\">\n            <GitHubIcon />\n            <Box mr={1} />\n            <Typography variant=\"h6\">{projectName}</Typography>\n\n            <Select\n              value={branch}\n              key={branch}\n              label=\"Branch\"\n              onChange={handleMenuChange}\n              data-testid=\"menu-control\"\n              style={{\n                marginLeft: '30px',\n                marginRight: '20px',\n                width: '230px',\n              }}\n            >\n              {branches.map(branchItem => (\n                <MenuItem key={branchItem.name} value={branchItem.name}>\n                  {branchItem.name === defaultBranch ? (\n                    <Typography variant=\"body2\" component=\"span\">\n                      {branchItem.name}{' '}\n                      <Typography\n                        variant=\"body2\"\n                        component=\"span\"\n                        style={{ color: 'lightgray', fontSize: 'x-small' }}\n                      >\n                        (default)\n                      </Typography>\n                    </Typography>\n                  ) : (\n                    branchItem.name\n                  )}\n                </MenuItem>\n              ))}\n\n              <MenuItem\n                value=\"all\"\n                key=\"all\"\n                style={{ color: 'lightGrey', fontSize: 'small' }}\n              >\n                select all branches\n              </MenuItem>\n            </Select>\n\n            <WorkflowRunsCardSearch\n              searchTerm={searchTerm}\n              handleSearch={handleSearch}\n              retry={retry}\n            />\n          </Box>\n        }\n      >\n        <WorkflowRunsCardView\n          runs={runs}\n          loading={cardProps.loading}\n          onChangePageSize={setPageSize}\n          onChangePage={setPage}\n          page={cardProps.page}\n          total={cardProps.total}\n          pageSize={cardProps.pageSize}\n          searchTerm={searchTerm}\n          projectName={projectName}\n        />\n      </InfoCard>\n    </Grid>\n  );\n};\n\nexport default WorkflowRunsCard;\n"],"names":[],"mappings":"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"}