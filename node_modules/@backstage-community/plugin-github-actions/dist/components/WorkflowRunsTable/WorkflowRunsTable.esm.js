import { jsx, jsxs } from 'react/jsx-runtime';
import Typography from '@material-ui/core/Typography';
import Box from '@material-ui/core/Box';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import Button from '@material-ui/core/Button';
import RetryIcon from '@material-ui/icons/Replay';
import GitHubIcon from '@material-ui/icons/GitHub';
import { Link as Link$1 } from 'react-router-dom';
import { useWorkflowRuns } from '../useWorkflowRuns.esm.js';
import { getStatusDescription, WorkflowRunStatus } from '../WorkflowRunStatus/WorkflowRunStatus.esm.js';
import SyncIcon from '@material-ui/icons/Sync';
import { buildRouteRef } from '../../routes.esm.js';
import { getProjectNameFromEntity } from '../getProjectNameFromEntity.esm.js';
import { EmptyState, Table, Link } from '@backstage/core-components';
import { useRouteRef } from '@backstage/core-plugin-api';
import { getHostnameFromEntity } from '../getHostnameFromEntity.esm.js';

const truncateAtNewline = (str) => {
  const newlineIndex = str.indexOf("\n");
  return newlineIndex !== -1 ? str.substring(0, newlineIndex) : str;
};
const generatedColumns = [
  {
    title: "ID",
    field: "id",
    type: "numeric",
    width: "150px"
  },
  {
    title: "Message",
    field: "message",
    highlight: true,
    render: (row) => {
      const LinkWrapper = () => {
        const routeLink = useRouteRef(buildRouteRef);
        const truncatedMessage = truncateAtNewline(row.message);
        return /* @__PURE__ */ jsx(
          Link,
          {
            component: Link$1,
            to: routeLink({ id: row.id }),
            title: row.message,
            children: truncatedMessage
          }
        );
      };
      return /* @__PURE__ */ jsx(LinkWrapper, {});
    }
  },
  {
    title: "Source",
    render: (row) => /* @__PURE__ */ jsxs(Typography, { variant: "body2", noWrap: true, children: [
      /* @__PURE__ */ jsx(Typography, { paragraph: true, variant: "body2", children: row.source?.branchName }),
      /* @__PURE__ */ jsx(Typography, { paragraph: true, variant: "body2", children: row.source?.commit.hash })
    ] })
  },
  {
    title: "Workflow",
    field: "workflowName"
  },
  {
    title: "Status",
    customSort: (d1, d2) => {
      return getStatusDescription(d1).localeCompare(getStatusDescription(d2));
    },
    render: (row) => /* @__PURE__ */ jsx(Box, { display: "flex", alignItems: "center", children: /* @__PURE__ */ jsx(WorkflowRunStatus, { status: row.status, conclusion: row.conclusion }) })
  },
  {
    title: "Actions",
    render: (row) => /* @__PURE__ */ jsx(Tooltip, { title: "Rerun workflow", children: /* @__PURE__ */ jsx(IconButton, { onClick: row.onReRunClick, children: /* @__PURE__ */ jsx(RetryIcon, {}) }) }),
    width: "10%"
  }
];
const WorkflowRunsTableView = ({
  projectName,
  loading,
  pageSize,
  page,
  retry,
  runs,
  onChangePage,
  onChangePageSize,
  total
}) => {
  return /* @__PURE__ */ jsx(
    Table,
    {
      isLoading: loading,
      options: { paging: true, pageSize, padding: "dense" },
      totalCount: total,
      page,
      actions: [
        {
          icon: () => /* @__PURE__ */ jsx(SyncIcon, {}),
          tooltip: "Reload workflow runs",
          isFreeAction: true,
          onClick: () => retry()
        }
      ],
      data: runs ?? [],
      onPageChange: onChangePage,
      onRowsPerPageChange: onChangePageSize,
      style: { width: "100%" },
      title: /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
        /* @__PURE__ */ jsx(GitHubIcon, {}),
        /* @__PURE__ */ jsx(Box, { mr: 1 }),
        /* @__PURE__ */ jsx(Typography, { variant: "h6", children: projectName })
      ] }),
      columns: generatedColumns
    }
  );
};
const WorkflowRunsTable = ({
  entity,
  branch
}) => {
  const projectName = getProjectNameFromEntity(entity);
  const hostname = getHostnameFromEntity(entity);
  const [owner, repo] = (projectName ?? "/").split("/");
  const [{ runs, ...tableProps }, { retry, setPage, setPageSize }] = useWorkflowRuns({
    hostname,
    owner,
    repo,
    branch
  });
  const githubHost = hostname || "github.com";
  const hasNoRuns = !tableProps.loading && !runs;
  return hasNoRuns ? /* @__PURE__ */ jsx(
    EmptyState,
    {
      missing: "data",
      title: "No Workflow Data",
      description: "This component has GitHub Actions enabled, but no data was found. Have you created any Workflows? Click the button below to create a new Workflow.",
      action: /* @__PURE__ */ jsx(
        Button,
        {
          variant: "contained",
          color: "primary",
          href: `https://${githubHost}/${projectName}/actions/new`,
          children: "Create new Workflow"
        }
      )
    }
  ) : /* @__PURE__ */ jsx(
    WorkflowRunsTableView,
    {
      ...tableProps,
      runs,
      loading: tableProps.loading,
      retry,
      onChangePageSize: setPageSize,
      onChangePage: setPage
    }
  );
};

export { WorkflowRunsTable, WorkflowRunsTableView };
//# sourceMappingURL=WorkflowRunsTable.esm.js.map
