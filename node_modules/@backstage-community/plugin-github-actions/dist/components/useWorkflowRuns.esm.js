import { useState } from 'react';
import useAsyncRetry from 'react-use/esm/useAsyncRetry';
import { githubActionsApiRef } from '../api/GithubActionsApi.esm.js';
import { useApi, errorApiRef } from '@backstage/core-plugin-api';

function useWorkflowRuns({
  hostname,
  owner,
  repo,
  branch,
  initialPageSize = 6
}) {
  const api = useApi(githubActionsApiRef);
  const errorApi = useApi(errorApiRef);
  const [total, setTotal] = useState(0);
  const [page, setPage] = useState(0);
  const [pageSize, setPageSize] = useState(initialPageSize);
  const [branches, setBranches] = useState([]);
  const [defaultBranch, setDefaultBranch] = useState("");
  const {
    loading,
    value: runs,
    retry,
    error
  } = useAsyncRetry(async () => {
    const fetchedDefaultBranch = await api.getDefaultBranch({
      hostname,
      owner,
      repo
    });
    setDefaultBranch(fetchedDefaultBranch);
    let selectedBranch = branch;
    if (branch === "default") {
      selectedBranch = fetchedDefaultBranch;
    }
    const fetchBranches = async () => {
      let next = true;
      let iteratePage = 1;
      const branchSet2 = [];
      while (next) {
        const branchesData = await api.listBranches({
          hostname,
          owner,
          repo,
          page: iteratePage
        });
        if (branchesData.length === 0) {
          next = false;
        }
        iteratePage++;
        branchSet2.push(...branchesData);
      }
      return branchSet2;
    };
    const branchSet = await fetchBranches();
    setBranches(branchSet);
    const workflowRunsData = await api.listWorkflowRuns({
      hostname,
      owner,
      repo,
      pageSize,
      page: page + 1,
      branch: selectedBranch
    });
    setTotal(workflowRunsData.total_count);
    return workflowRunsData.workflow_runs.map((run) => ({
      workflowName: run.name ?? void 0,
      message: run.head_commit?.message,
      id: `${run.id}`,
      onReRunClick: async () => {
        try {
          await api.reRunWorkflow({
            hostname,
            owner,
            repo,
            runId: run.id
          });
        } catch (e) {
          errorApi.post(
            new Error(`Failed to rerun the workflow: ${e.message}`)
          );
        }
      },
      source: {
        branchName: run.head_branch ?? void 0,
        commit: {
          hash: run.head_commit?.id,
          url: run.head_repository?.branches_url?.replace(
            "{/branch}",
            run.head_branch ?? ""
          )
        }
      },
      status: run.status ?? void 0,
      conclusion: run.conclusion ?? void 0,
      url: run.url,
      githubUrl: run.html_url
    }));
  }, [page, pageSize, repo, owner]);
  return [
    {
      page,
      pageSize,
      loading,
      runs,
      branches,
      defaultBranch,
      projectName: `${owner}/${repo}`,
      total,
      error
    },
    {
      runs,
      setPage,
      setPageSize,
      retry
    }
  ];
}

export { useWorkflowRuns };
//# sourceMappingURL=useWorkflowRuns.esm.js.map
