{"version":3,"file":"useWorkflowRuns.esm.js","sources":["../../src/components/useWorkflowRuns.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useState } from 'react';\nimport useAsyncRetry from 'react-use/esm/useAsyncRetry';\nimport { githubActionsApiRef } from '../api/GithubActionsApi';\nimport { useApi, errorApiRef } from '@backstage/core-plugin-api';\nimport { Branch } from '../api';\n\nexport type WorkflowRun = {\n  workflowName?: string;\n  id: string;\n  message?: string;\n  url?: string;\n  githubUrl?: string;\n  source: {\n    branchName?: string;\n    commit: {\n      hash?: string;\n      url?: string;\n    };\n  };\n  status?: string;\n  conclusion?: string;\n  onReRunClick: () => void;\n};\n\nexport function useWorkflowRuns({\n  hostname,\n  owner,\n  repo,\n  branch,\n  initialPageSize = 6,\n}: {\n  hostname?: string;\n  owner: string;\n  repo: string;\n  branch?: string | undefined;\n  initialPageSize?: number;\n}) {\n  const api = useApi(githubActionsApiRef);\n\n  const errorApi = useApi(errorApiRef);\n\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(0);\n  const [pageSize, setPageSize] = useState(initialPageSize);\n  const [branches, setBranches] = useState<Branch[]>([]);\n  const [defaultBranch, setDefaultBranch] = useState<string>('');\n\n  const {\n    loading,\n    value: runs,\n    retry,\n    error,\n  } = useAsyncRetry<WorkflowRun[]>(async () => {\n    const fetchedDefaultBranch = await api.getDefaultBranch({\n      hostname,\n      owner,\n      repo,\n    });\n\n    setDefaultBranch(fetchedDefaultBranch);\n    let selectedBranch = branch;\n    if (branch === 'default') {\n      selectedBranch = fetchedDefaultBranch;\n    }\n\n    const fetchBranches = async () => {\n      let next = true;\n      let iteratePage = 1;\n      const branchSet: Branch[] = [];\n\n      while (next) {\n        const branchesData = await api.listBranches({\n          hostname,\n          owner,\n          repo,\n          page: iteratePage,\n        });\n        if (branchesData.length === 0) {\n          next = false;\n        }\n        iteratePage++;\n        branchSet.push(...branchesData);\n      }\n\n      return branchSet;\n    };\n\n    const branchSet = await fetchBranches();\n    setBranches(branchSet);\n\n    // GitHub API pagination count starts from 1\n    const workflowRunsData = await api.listWorkflowRuns({\n      hostname,\n      owner,\n      repo,\n      pageSize,\n      page: page + 1,\n      branch: selectedBranch,\n    });\n    setTotal(workflowRunsData.total_count);\n    // Transformation here\n    return workflowRunsData.workflow_runs.map(run => ({\n      workflowName: run.name ?? undefined,\n      message: run.head_commit?.message,\n      id: `${run.id}`,\n      onReRunClick: async () => {\n        try {\n          await api.reRunWorkflow({\n            hostname,\n            owner,\n            repo,\n            runId: run.id,\n          });\n        } catch (e) {\n          errorApi.post(\n            new Error(`Failed to rerun the workflow: ${(e as Error).message}`),\n          );\n        }\n      },\n      source: {\n        branchName: run.head_branch ?? undefined,\n        commit: {\n          hash: run.head_commit?.id,\n          url: run.head_repository?.branches_url?.replace(\n            '{/branch}',\n            run.head_branch ?? '',\n          ),\n        },\n      },\n      status: run.status ?? undefined,\n      conclusion: run.conclusion ?? undefined,\n      url: run.url,\n      githubUrl: run.html_url,\n    }));\n  }, [page, pageSize, repo, owner]);\n\n  return [\n    {\n      page,\n      pageSize,\n      loading,\n      runs,\n      branches,\n      defaultBranch,\n      projectName: `${owner}/${repo}`,\n      total,\n      error,\n    },\n    {\n      runs,\n      setPage,\n      setPageSize,\n      retry,\n    },\n  ] as const;\n}\n"],"names":["branchSet"],"mappings":"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"}