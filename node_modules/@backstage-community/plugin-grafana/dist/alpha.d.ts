/// <reference types="react" />
import * as _backstage_catalog_model_index from '@backstage/catalog-model/index';
import * as react from 'react';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import * as _backstage_core_plugin_api_index from '@backstage/core-plugin-api/index';

/**
 * The Grafana backstage plugin.
 *
 * @alpha
 */
declare const _default: _backstage_frontend_plugin_api.FrontendPlugin<{}, {}, {
    "api:grafana": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_core_plugin_api_index.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_core_plugin_api_index.AnyApiFactory;
        };
    }>;
    "entity-card:grafana/dashboards": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "dashboards";
        config: {
            filter: string | undefined;
        };
        configInput: {
            filter?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
        };
    }>;
    "entity-card:grafana/alerts": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "alerts";
        config: {
            filter: string | undefined;
        };
        configInput: {
            filter?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
        };
    }>;
    "entity-card:grafana/overview-dashboard": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-card";
        name: "overview-dashboard";
        config: {
            filter: string | undefined;
        };
        configInput: {
            filter?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model_index.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            filter?: string | ((entity: _backstage_catalog_model_index.Entity) => boolean) | undefined;
        };
    }>;
}>;

export { _default as default };
