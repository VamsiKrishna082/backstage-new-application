{"version":3,"file":"apis.esm.js","sources":["../../src/alpha/apis.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  configApiRef,\n  ApiBlueprint,\n  createApiFactory,\n  discoveryApiRef,\n  fetchApiRef,\n  identityApiRef,\n} from '@backstage/frontend-plugin-api';\nimport {\n  GrafanaApiClient,\n  grafanaApiRef,\n  UnifiedAlertingGrafanaApiClient,\n} from '../api';\n\n/**\n * @alpha\n */\nexport const grafanaApiExtension = ApiBlueprint.make({\n  params: {\n    factory: createApiFactory({\n      api: grafanaApiRef,\n      deps: {\n        discoveryApi: discoveryApiRef,\n        identityApi: identityApiRef,\n        configApi: configApiRef,\n        fetchApi: fetchApiRef,\n      },\n      factory: ({ discoveryApi, configApi, fetchApi }) => {\n        const unifiedAlertingEnabled =\n          configApi.getOptionalBoolean('grafana.unifiedAlerting') || false;\n\n        if (!unifiedAlertingEnabled) {\n          return new GrafanaApiClient({\n            fetchApi,\n            discoveryApi,\n            domain: configApi.getString('grafana.domain'),\n            proxyPath: configApi.getOptionalString('grafana.proxyPath'),\n          });\n        }\n\n        return new UnifiedAlertingGrafanaApiClient({\n          fetchApi,\n          discoveryApi,\n          domain: configApi.getString('grafana.domain'),\n          proxyPath: configApi.getOptionalString('grafana.proxyPath'),\n        });\n      },\n    }),\n  },\n});\n"],"names":[],"mappings":";;;AAgCa,MAAA,mBAAA,GAAsB,aAAa,IAAK,CAAA;AAAA,EACnD,MAAQ,EAAA;AAAA,IACN,SAAS,gBAAiB,CAAA;AAAA,MACxB,GAAK,EAAA,aAAA;AAAA,MACL,IAAM,EAAA;AAAA,QACJ,YAAc,EAAA,eAAA;AAAA,QACd,WAAa,EAAA,cAAA;AAAA,QACb,SAAW,EAAA,YAAA;AAAA,QACX,QAAU,EAAA;AAAA,OACZ;AAAA,MACA,SAAS,CAAC,EAAE,YAAc,EAAA,SAAA,EAAW,UAAe,KAAA;AAClD,QAAA,MAAM,sBACJ,GAAA,SAAA,CAAU,kBAAmB,CAAA,yBAAyB,CAAK,IAAA,KAAA;AAE7D,QAAA,IAAI,CAAC,sBAAwB,EAAA;AAC3B,UAAA,OAAO,IAAI,gBAAiB,CAAA;AAAA,YAC1B,QAAA;AAAA,YACA,YAAA;AAAA,YACA,MAAA,EAAQ,SAAU,CAAA,SAAA,CAAU,gBAAgB,CAAA;AAAA,YAC5C,SAAA,EAAW,SAAU,CAAA,iBAAA,CAAkB,mBAAmB;AAAA,WAC3D,CAAA;AAAA;AAGH,QAAA,OAAO,IAAI,+BAAgC,CAAA;AAAA,UACzC,QAAA;AAAA,UACA,YAAA;AAAA,UACA,MAAA,EAAQ,SAAU,CAAA,SAAA,CAAU,gBAAgB,CAAA;AAAA,UAC5C,SAAA,EAAW,SAAU,CAAA,iBAAA,CAAkB,mBAAmB;AAAA,SAC3D,CAAA;AAAA;AACH,KACD;AAAA;AAEL,CAAC;;;;"}