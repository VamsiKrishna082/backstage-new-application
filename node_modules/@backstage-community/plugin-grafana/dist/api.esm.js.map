{"version":3,"file":"api.esm.js","sources":["../src/api.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createApiRef,\n  DiscoveryApi,\n  FetchApi,\n} from '@backstage/frontend-plugin-api';\nimport { QueryEvaluator } from './query';\nimport { Alert, Dashboard } from './types';\n\n/**\n * Interface for the Grafana API\n * @public\n */\nexport interface GrafanaApi {\n  /**\n   * Returns the found dashboards in Grafana with the defined query\n   * @param query - The query used to list the dashboards\n   */\n  listDashboards(query: string): Promise<Dashboard[]>;\n  /**\n   * Returns a list of alerts found in Grafana that have any of the defined alert selectors\n   * @param selectors - One or multiple alert selectors\n   */\n  alertsForSelector(selectors: string | string[]): Promise<Alert[]>;\n}\n\ninterface AggregatedAlertState {\n  Normal: number;\n  Pending: number;\n  Alerting: number;\n  NoData: number;\n  Error: number;\n  Invalid: number;\n}\n\ntype AlertState =\n  | 'Normal'\n  | 'Pending'\n  | 'Alerting'\n  | 'NoData'\n  | 'Error'\n  | 'n/a';\n\ninterface AlertInstance {\n  labels: Record<string, string>;\n  state: AlertState;\n}\n\ninterface AlertsData {\n  data: { alerts: AlertInstance[] };\n}\n\ninterface AlertRuleGroupConfig {\n  name: string;\n  rules: AlertRule[];\n}\n\ninterface GrafanaAlert {\n  id: number;\n  panelId: number;\n  name: string;\n  state: string;\n  url: string;\n}\n\ninterface UnifiedGrafanaAlert {\n  uid: string;\n  title: string;\n}\n\ninterface AlertRule {\n  labels: Record<string, string>;\n  grafana_alert: UnifiedGrafanaAlert;\n}\n\n/**\n * The grafana API reference\n * @public\n */\nexport const grafanaApiRef = createApiRef<GrafanaApi>({\n  id: 'plugin.grafana.service',\n});\n\nexport type Options = {\n  discoveryApi: DiscoveryApi;\n  fetchApi: FetchApi;\n\n  /**\n   * Domain used by users to access Grafana web UI.\n   * Example: https://monitoring.my-company.com/\n   */\n  domain: string;\n\n  /**\n   * Path to use for requests via the proxy, defaults to /grafana/api\n   */\n  proxyPath?: string;\n};\n\nconst DEFAULT_PROXY_PATH = '/grafana/api';\n\nconst isSingleWord = (input: string): boolean => {\n  return input.match(/^[\\w-]+$/g) !== null;\n};\n\nclass Client {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly fetchApi: FetchApi;\n  private readonly proxyPath: string;\n  private readonly queryEvaluator: QueryEvaluator;\n\n  constructor(opts: Options) {\n    this.discoveryApi = opts.discoveryApi;\n    this.fetchApi = opts.fetchApi;\n    this.proxyPath = opts.proxyPath ?? DEFAULT_PROXY_PATH;\n    this.queryEvaluator = new QueryEvaluator();\n  }\n\n  public async fetch<T = any>(input: string, init?: RequestInit): Promise<T> {\n    const apiUrl = await this.apiUrl();\n    const resp = await this.fetchApi.fetch(`${apiUrl}${input}`, init);\n    if (!resp.ok) {\n      throw new Error(`Request failed with ${resp.status} ${resp.statusText}`);\n    }\n\n    return await resp.json();\n  }\n\n  async listDashboards(domain: string, query: string): Promise<Dashboard[]> {\n    if (isSingleWord(query)) {\n      return this.dashboardsByTag(domain, query);\n    }\n\n    return this.dashboardsForQuery(domain, query);\n  }\n\n  async dashboardsForQuery(\n    domain: string,\n    query: string,\n  ): Promise<Dashboard[]> {\n    const parsedQuery = this.queryEvaluator.parse(query);\n    const response = await this.fetch<Dashboard[]>(`/api/search?type=dash-db`);\n    const allDashboards = this.fullyQualifiedDashboardURLs(domain, response);\n\n    return allDashboards.filter(dashboard => {\n      return this.queryEvaluator.evaluate(parsedQuery, dashboard) === true;\n    });\n  }\n\n  async dashboardsByTag(domain: string, tag: string): Promise<Dashboard[]> {\n    const response = await this.fetch<Dashboard[]>(\n      `/api/search?type=dash-db&tag=${tag}`,\n    );\n\n    return this.fullyQualifiedDashboardURLs(domain, response);\n  }\n\n  private fullyQualifiedDashboardURLs(\n    domain: string,\n    dashboards: Dashboard[],\n  ): Dashboard[] {\n    return dashboards.map(dashboard => ({\n      ...dashboard,\n      url: domain + dashboard.url,\n      folderUrl: domain + dashboard.folderUrl,\n    }));\n  }\n\n  private async apiUrl() {\n    const proxyUrl = await this.discoveryApi.getBaseUrl('proxy');\n    return proxyUrl + this.proxyPath;\n  }\n}\n\nexport class GrafanaApiClient implements GrafanaApi {\n  private readonly domain: string;\n  private readonly client: Client;\n\n  constructor(opts: Options) {\n    this.domain = opts.domain;\n    this.client = new Client(opts);\n  }\n\n  async listDashboards(query: string): Promise<Dashboard[]> {\n    return this.client.listDashboards(this.domain, query);\n  }\n\n  async alertsForSelector(dashboardTag: string): Promise<Alert[]> {\n    const response = await this.client.fetch<GrafanaAlert[]>(\n      `/api/alerts?dashboardTag=${dashboardTag}`,\n    );\n\n    return response.map(alert => ({\n      name: alert.name,\n      state: alert.state,\n      matchingSelector: dashboardTag,\n      url: `${this.domain}${alert.url}?panelId=${alert.panelId}&fullscreen&refresh=30s`,\n    }));\n  }\n}\n\nexport class UnifiedAlertingGrafanaApiClient implements GrafanaApi {\n  private readonly domain: string;\n  private readonly client: Client;\n\n  constructor(opts: Options) {\n    this.domain = opts.domain;\n    this.client = new Client(opts);\n  }\n\n  async listDashboards(query: string): Promise<Dashboard[]> {\n    return this.client.listDashboards(this.domain, query);\n  }\n\n  async alertsForSelector(selectors: string | string[]): Promise<Alert[]> {\n    let labelSelectors: string[] = [];\n    if (typeof selectors === 'string') {\n      labelSelectors = [selectors];\n    } else {\n      labelSelectors = selectors;\n    }\n\n    const rulesResponse = await this.client.fetch<\n      Record<string, AlertRuleGroupConfig[]>\n    >('/api/ruler/grafana/api/v1/rules');\n    const rules = Object.values(rulesResponse)\n      .flat()\n      .map(ruleGroup => ruleGroup.rules)\n      .flat();\n    const alertsResponse = await this.client.fetch<AlertsData>(\n      '/api/prometheus/grafana/api/v1/alerts',\n    );\n\n    return labelSelectors\n      .map(selector => {\n        const [label, labelValue] = selector.split('=');\n\n        const matchingRules = rules.filter(\n          rule => rule.labels && rule.labels[label] === labelValue,\n        );\n        const alertInstances = alertsResponse.data.alerts.filter(\n          alertInstance => alertInstance.labels[label] === labelValue,\n        );\n\n        return matchingRules.map(rule => {\n          const matchingAlertInstances = alertInstances.filter(\n            alertInstance =>\n              alertInstance.labels.alertname === rule.grafana_alert.title,\n          );\n\n          const aggregatedAlertStates: AggregatedAlertState =\n            matchingAlertInstances.reduce(\n              (previous, alert) => {\n                switch (alert.state) {\n                  case 'Normal':\n                    previous.Normal += 1;\n                    break;\n                  case 'Pending':\n                    previous.Pending += 1;\n                    break;\n                  case 'Alerting':\n                    previous.Alerting += 1;\n                    break;\n                  case 'NoData':\n                    previous.NoData += 1;\n                    break;\n                  case 'Error':\n                    previous.Error += 1;\n                    break;\n                  default:\n                    previous.Invalid += 1;\n                }\n\n                return previous;\n              },\n              {\n                Normal: 0,\n                Pending: 0,\n                Alerting: 0,\n                NoData: 0,\n                Error: 0,\n                Invalid: 0,\n              },\n            );\n\n          return {\n            name: rule.grafana_alert.title,\n            url: `${this.domain}/alerting/grafana/${rule.grafana_alert.uid}/view`,\n            matchingSelector: selector,\n            state: this.getState(\n              aggregatedAlertStates,\n              matchingAlertInstances.length,\n            ),\n          };\n        });\n      })\n      .flat();\n  }\n\n  private getState(\n    states: AggregatedAlertState,\n    totalAlerts: number,\n  ): AlertState {\n    if (states.Alerting > 0) {\n      return 'Alerting';\n    } else if (states.Error > 0) {\n      return 'Error';\n    } else if (states.Pending > 0) {\n      return 'Pending';\n    }\n    if (states.NoData === totalAlerts) {\n      return 'NoData';\n    } else if (\n      states.Normal === totalAlerts ||\n      states.Normal + states.NoData === totalAlerts\n    ) {\n      return 'Normal';\n    }\n\n    return 'n/a';\n  }\n}\n"],"names":[],"mappings":"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"}