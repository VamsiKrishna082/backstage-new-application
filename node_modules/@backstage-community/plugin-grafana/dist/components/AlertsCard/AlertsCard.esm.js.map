{"version":3,"file":"AlertsCard.esm.js","sources":["../../../src/components/AlertsCard/AlertsCard.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport {\n  Progress,\n  TableColumn,\n  Table,\n  StatusOK,\n  StatusPending,\n  StatusWarning,\n  StatusError,\n  StatusAborted,\n  Link,\n} from '@backstage/core-components';\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  MissingAnnotationEmptyState,\n  useEntity,\n} from '@backstage/plugin-catalog-react';\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\nimport { grafanaApiRef } from '../../api';\nimport useAsync from 'react-use/lib/useAsync';\nimport { Alert } from '@material-ui/lab';\nimport { AlertsCardOpts, Alert as GrafanaAlert } from '../../types';\nimport {\n  GRAFANA_ANNOTATION_TAG_SELECTOR,\n  GRAFANA_ANNOTATION_ALERT_LABEL_SELECTOR,\n  isAlertSelectorAvailable,\n  isDashboardSelectorAvailable,\n  tagSelectorFromEntity,\n  alertSelectorFromEntity,\n} from '../../constants';\n\nconst AlertStatusBadge = ({ alert }: { alert: GrafanaAlert }) => {\n  let statusElmt: React.ReactElement;\n\n  switch (alert.state) {\n    case 'ok':\n    case 'Normal':\n      statusElmt = <StatusOK />;\n      break;\n    case 'paused':\n    case 'Pending':\n      statusElmt = <StatusPending />;\n      break;\n    case 'no_data':\n    case 'pending':\n    case 'NoData':\n      statusElmt = <StatusWarning />;\n      break;\n    case 'alerting':\n    case 'Alerting':\n    case 'Error':\n      statusElmt = <StatusError />;\n      break;\n    default:\n      statusElmt = <StatusAborted />;\n  }\n\n  return <div>{statusElmt}</div>;\n};\n\nexport const AlertsTable = ({\n  alerts,\n  opts,\n}: {\n  alerts: GrafanaAlert[];\n  opts: AlertsCardOpts;\n}) => {\n  const columns: TableColumn<GrafanaAlert>[] = [\n    {\n      title: 'Name',\n      field: 'name',\n      cellStyle: { width: '90%' },\n      render: (row: GrafanaAlert): React.ReactNode => (\n        <Link to={row.url} target=\"_blank\" rel=\"noopener\">\n          {row.name}\n        </Link>\n      ),\n    },\n  ];\n\n  if (opts.showState) {\n    columns.push({\n      title: 'State',\n      render: (row: GrafanaAlert): React.ReactNode => (\n        <AlertStatusBadge alert={row} />\n      ),\n    });\n  }\n\n  return (\n    <Table\n      title={opts.title || 'Alerts'}\n      options={{\n        paging: opts.paged ?? false,\n        pageSize: opts.pageSize ?? 5,\n        search: opts.searchable ?? false,\n        emptyRowsWhenPaging: false,\n        sorting: opts.sortable ?? false,\n        draggable: false,\n        padding: 'dense',\n      }}\n      data={alerts}\n      columns={columns}\n    />\n  );\n};\n\nconst Alerts = ({ entity, opts }: { entity: Entity; opts: AlertsCardOpts }) => {\n  const grafanaApi = useApi(grafanaApiRef);\n  const configApi = useApi(configApiRef);\n  const unifiedAlertingEnabled =\n    configApi.getOptionalBoolean('grafana.unifiedAlerting') || false;\n  const alertSelector = unifiedAlertingEnabled\n    ? alertSelectorFromEntity(entity)\n    : tagSelectorFromEntity(entity);\n\n  const { value, loading, error } = useAsync(\n    async () => await grafanaApi.alertsForSelector(alertSelector),\n  );\n\n  if (loading) {\n    return <Progress />;\n  } else if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  return <AlertsTable alerts={value || []} opts={opts} />;\n};\n\nexport const AlertsCard = (opts?: AlertsCardOpts) => {\n  const { entity } = useEntity();\n  const configApi = useApi(configApiRef);\n  const unifiedAlertingEnabled =\n    configApi.getOptionalBoolean('grafana.unifiedAlerting') || false;\n\n  if (!unifiedAlertingEnabled && !isDashboardSelectorAvailable(entity)) {\n    return (\n      <MissingAnnotationEmptyState\n        annotation={GRAFANA_ANNOTATION_TAG_SELECTOR}\n      />\n    );\n  }\n\n  if (unifiedAlertingEnabled && !isAlertSelectorAvailable(entity)) {\n    return (\n      <MissingAnnotationEmptyState\n        annotation={GRAFANA_ANNOTATION_ALERT_LABEL_SELECTOR}\n      />\n    );\n  }\n\n  const finalOpts = { ...opts, ...{ showState: opts?.showState } };\n\n  return <Alerts entity={entity} opts={finalOpts} />;\n};\n"],"names":[],"mappings":"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"}