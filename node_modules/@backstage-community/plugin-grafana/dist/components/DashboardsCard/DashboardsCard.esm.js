import React from 'react';
import { Progress, Table, Link } from '@backstage/core-components';
import { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';
import { useApi } from '@backstage/core-plugin-api';
import { grafanaApiRef } from '../../api.esm.js';
import useAsync from 'react-use/lib/useAsync';
import Alert from '@material-ui/lab/Alert';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { isDashboardSelectorAvailable, GRAFANA_ANNOTATION_DASHBOARD_SELECTOR, dashboardSelectorFromEntity } from '../../constants.esm.js';

const DashboardsTable = ({
  entity,
  dashboards,
  opts
}) => {
  const columns = [
    {
      title: "Title",
      field: "title",
      render: (row) => /* @__PURE__ */ React.createElement(Link, { to: row.url, target: "_blank", rel: "noopener" }, row.title)
    },
    {
      title: "Folder",
      field: "folderTitle",
      render: (row) => /* @__PURE__ */ React.createElement(Link, { to: row.folderUrl, target: "_blank", rel: "noopener" }, row.folderTitle)
    }
  ];
  const titleElm = /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: `Note: only dashboard with the "${dashboardSelectorFromEntity(
        entity
      )}" selector are displayed.`
    },
    /* @__PURE__ */ React.createElement(Typography, null, opts.title || "Dashboards")
  );
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      title: titleElm,
      options: {
        paging: opts.paged ?? false,
        pageSize: opts.pageSize ?? 5,
        search: opts.searchable ?? false,
        emptyRowsWhenPaging: false,
        sorting: opts.sortable ?? false,
        draggable: false,
        padding: "dense"
      },
      data: dashboards,
      columns
    }
  );
};
const Dashboards = ({
  entity,
  opts
}) => {
  const grafanaApi = useApi(grafanaApiRef);
  const { value, loading, error } = useAsync(async () => {
    const dashboards = await grafanaApi.listDashboards(
      dashboardSelectorFromEntity(entity)
    );
    if (opts?.additionalDashboards) {
      dashboards.push(...opts.additionalDashboards(entity));
    }
    return dashboards;
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  } else if (error) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.message);
  }
  return /* @__PURE__ */ React.createElement(DashboardsTable, { entity, dashboards: value || [], opts });
};
const DashboardsCard = (opts) => {
  const { entity } = useEntity();
  return !isDashboardSelectorAvailable(entity) ? /* @__PURE__ */ React.createElement(
    MissingAnnotationEmptyState,
    {
      annotation: GRAFANA_ANNOTATION_DASHBOARD_SELECTOR
    }
  ) : /* @__PURE__ */ React.createElement(Dashboards, { entity, opts: opts || {} });
};

export { DashboardsCard, DashboardsTable };
//# sourceMappingURL=DashboardsCard.esm.js.map
