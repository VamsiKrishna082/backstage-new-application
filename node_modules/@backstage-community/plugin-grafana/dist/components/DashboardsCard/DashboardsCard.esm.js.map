{"version":3,"file":"DashboardsCard.esm.js","sources":["../../../src/components/DashboardsCard/DashboardsCard.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { Progress, TableColumn, Table, Link } from '@backstage/core-components';\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  MissingAnnotationEmptyState,\n  useEntity,\n} from '@backstage/plugin-catalog-react';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { grafanaApiRef } from '../../api';\nimport useAsync from 'react-use/lib/useAsync';\nimport Alert from '@material-ui/lab/Alert';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { Dashboard, DashboardCardOpts } from '../../types';\nimport {\n  dashboardSelectorFromEntity,\n  GRAFANA_ANNOTATION_DASHBOARD_SELECTOR,\n  isDashboardSelectorAvailable,\n} from '../../constants';\n\nexport const DashboardsTable = ({\n  entity,\n  dashboards,\n  opts,\n}: {\n  entity: Entity;\n  dashboards: Dashboard[];\n  opts: DashboardCardOpts;\n}) => {\n  const columns: TableColumn<Dashboard>[] = [\n    {\n      title: 'Title',\n      field: 'title',\n      render: (row: Dashboard) => (\n        <Link to={row.url} target=\"_blank\" rel=\"noopener\">\n          {row.title}\n        </Link>\n      ),\n    },\n    {\n      title: 'Folder',\n      field: 'folderTitle',\n      render: (row: Dashboard) => (\n        <Link to={row.folderUrl} target=\"_blank\" rel=\"noopener\">\n          {row.folderTitle}\n        </Link>\n      ),\n    },\n  ];\n\n  const titleElm = (\n    <Tooltip\n      title={`Note: only dashboard with the \"${dashboardSelectorFromEntity(\n        entity,\n      )}\" selector are displayed.`}\n    >\n      <Typography>{opts.title || 'Dashboards'}</Typography>\n    </Tooltip>\n  );\n\n  return (\n    <Table\n      title={titleElm}\n      options={{\n        paging: opts.paged ?? false,\n        pageSize: opts.pageSize ?? 5,\n        search: opts.searchable ?? false,\n        emptyRowsWhenPaging: false,\n        sorting: opts.sortable ?? false,\n        draggable: false,\n        padding: 'dense',\n      }}\n      data={dashboards}\n      columns={columns}\n    />\n  );\n};\n\nconst Dashboards = ({\n  entity,\n  opts,\n}: {\n  entity: Entity;\n  opts: DashboardCardOpts;\n}) => {\n  const grafanaApi = useApi(grafanaApiRef);\n  const { value, loading, error } = useAsync(async () => {\n    const dashboards = await grafanaApi.listDashboards(\n      dashboardSelectorFromEntity(entity),\n    );\n    if (opts?.additionalDashboards) {\n      dashboards.push(...opts.additionalDashboards(entity));\n    }\n    return dashboards;\n  });\n\n  if (loading) {\n    return <Progress />;\n  } else if (error) {\n    return <Alert severity=\"error\">{error.message}</Alert>;\n  }\n\n  return (\n    <DashboardsTable entity={entity} dashboards={value || []} opts={opts} />\n  );\n};\n\nexport const DashboardsCard = (opts?: DashboardCardOpts) => {\n  const { entity } = useEntity();\n\n  return !isDashboardSelectorAvailable(entity) ? (\n    <MissingAnnotationEmptyState\n      annotation={GRAFANA_ANNOTATION_DASHBOARD_SELECTOR}\n    />\n  ) : (\n    <Dashboards entity={entity} opts={opts || {}} />\n  );\n};\n"],"names":[],"mappings":"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"}