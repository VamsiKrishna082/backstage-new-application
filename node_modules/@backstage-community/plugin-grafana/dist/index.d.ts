/// <reference types="react" />
import * as react from 'react';
import react__default from 'react';
import { Entity } from '@backstage/catalog-model';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_core_plugin_api_index from '@backstage/core-plugin-api/index';

/**
 * Component which embeds the defined URL contents
 * @public
 */
declare const DashboardViewer: ({ embedUrl }: {
    embedUrl: string;
}) => react__default.JSX.Element;
/**
 * Component which embeds the dashboard overview for an entity
 * @public
 */
declare const EntityDashboardViewer: () => react__default.JSX.Element;

/**
 * Grafana daashboard parameters
 * @public
 */
interface Dashboard {
    /**
     * The dashboard title
     * @public
     */
    title: string;
    /**
     * The endpoint to the dashboard
     * @public
     */
    url: string;
    /**
     * The folder title, if any
     * @public
     */
    folderTitle: string;
    /**
     * The endpoint to the folder
     * @public
     */
    folderUrl: string;
    /**
     * A list of tags assigned to the dashboard
     * @public
     */
    tags: string[];
}
/**
 * Grafana alert parameters
 * @public
 */
interface Alert {
    /**
     * The alert name
     * @public
     */
    name: string;
    /**
     * The alert state
     * @public
     */
    state: string;
    /**
     * The matching selector for the alert
     * @public
     */
    matchingSelector: string;
    /**
     * The endpoint to the alert
     * @public
     */
    url: string;
}
/**
 * Parameters used to display the alert card
 * @public
 */
type AlertsCardOpts = {
    paged?: boolean;
    searchable?: boolean;
    pageSize?: number;
    sortable?: boolean;
    title?: string;
    showState?: boolean;
};
/**
 * Parameters used to display the dashboard card
 * @public
 */
type DashboardCardOpts = {
    paged?: boolean;
    searchable?: boolean;
    pageSize?: number;
    sortable?: boolean;
    title?: string;
    additionalDashboards?: (entity: Entity) => Dashboard[];
};

/**
 * The grafana plugin.
 * @public
 */
declare const grafanaPlugin: _backstage_core_plugin_api.BackstagePlugin<{}, {}, {}>;
/**
 * Component which displays the grafana dashboards found for an entity
 * @public
 */
declare const EntityGrafanaDashboardsCard: (opts?: DashboardCardOpts | undefined) => react.JSX.Element;
/**
 * Component which displays the grafana alerts found for an entity
 * @public
 */
declare const EntityGrafanaAlertsCard: (opts?: AlertsCardOpts | undefined) => react.JSX.Element;
/**
 * Component which displays the defined grafana dashboard for an entity
 * @public
 */
declare const EntityOverviewDashboardViewer: () => react.JSX.Element;

/**
 * Grafana tag selector annotation
 * @public
 * @deprecated Use GRAFANA_ANNOTATION_DASHBOARD_SELECTOR instead.
 */
declare const GRAFANA_ANNOTATION_TAG_SELECTOR = "grafana/tag-selector";
/**
 * Grafana dashboard selector annotation
 * @public
 */
declare const GRAFANA_ANNOTATION_DASHBOARD_SELECTOR = "grafana/dashboard-selector";
/**
 * Grafana alert selector annotation
 * @public
 */
declare const GRAFANA_ANNOTATION_ALERT_LABEL_SELECTOR = "grafana/alert-label-selector";
/**
 * Grafana dashboard overview annotation
 * @public
 */
declare const GRAFANA_ANNOTATION_OVERVIEW_DASHBOARD = "grafana/overview-dashboard";
/**
 * Returns if the dashboard selector annotation for an entity is set
 * @public
 */
declare const isDashboardSelectorAvailable: (entity: Entity) => string | undefined;
/**
 * Returns if the alert selector annotation for an entity is set
 * @public
 */
declare const isAlertSelectorAvailable: (entity: Entity) => boolean;
/**
 * Returns if the overview dashboard annotation for an entity is set
 * @public
 */
declare const isOverviewDashboardAvailable: (entity: Entity) => boolean;
/**
 * Returns the dashboard selector annotation for an entity
 * @public
 */
declare const dashboardSelectorFromEntity: (entity: Entity) => string;
/**
 * Returns the alert selector annotation for an entity
 * @public
 */
declare const alertSelectorFromEntity: (entity: Entity) => string | string[];
/**
 * Returns the overview dashboard annotation for an entity
 * @public
 */
declare const overviewDashboardFromEntity: (entity: Entity) => string;
/**
 * Returns the dashboard selector annotation for an entity
 * @public
 * @deprecated Use dashboardSelectorFromEntity instead
 */
declare const tagSelectorFromEntity: (entity: Entity) => string;

/**
 * Interface for the Grafana API
 * @public
 */
interface GrafanaApi {
    /**
     * Returns the found dashboards in Grafana with the defined query
     * @param query - The query used to list the dashboards
     */
    listDashboards(query: string): Promise<Dashboard[]>;
    /**
     * Returns a list of alerts found in Grafana that have any of the defined alert selectors
     * @param selectors - One or multiple alert selectors
     */
    alertsForSelector(selectors: string | string[]): Promise<Alert[]>;
}
/**
 * The grafana API reference
 * @public
 */
declare const grafanaApiRef: _backstage_core_plugin_api_index.ApiRef<GrafanaApi>;

export { type Alert, type AlertsCardOpts, type Dashboard, type DashboardCardOpts, DashboardViewer, EntityDashboardViewer, EntityGrafanaAlertsCard, EntityGrafanaDashboardsCard, EntityOverviewDashboardViewer, GRAFANA_ANNOTATION_ALERT_LABEL_SELECTOR, GRAFANA_ANNOTATION_DASHBOARD_SELECTOR, GRAFANA_ANNOTATION_OVERVIEW_DASHBOARD, GRAFANA_ANNOTATION_TAG_SELECTOR, type GrafanaApi, alertSelectorFromEntity, dashboardSelectorFromEntity, grafanaApiRef, grafanaPlugin, isAlertSelectorAvailable, isDashboardSelectorAvailable, isOverviewDashboardAvailable, overviewDashboardFromEntity, tagSelectorFromEntity };
