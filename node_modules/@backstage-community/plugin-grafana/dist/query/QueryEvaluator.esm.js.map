{"version":3,"file":"QueryEvaluator.esm.js","sources":["../../src/query/QueryEvaluator.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport jsep from 'jsep';\n\nexport type EvaluationContext = Record<string, any>;\n\nconst includes = (haystack: any, needle: any): boolean => {\n  if (!Array.isArray(haystack)) {\n    throw Error(`@> operator can only be used on an array`);\n  }\n\n  return (haystack as any[]).includes(needle);\n};\n\nexport class QueryEvaluator {\n  constructor() {\n    // [A] @> B, is B in A\n    jsep.addBinaryOp('@>', 6);\n  }\n\n  parse(query: string): jsep.Expression {\n    return jsep(query);\n  }\n\n  evaluate(root: jsep.Expression, context: EvaluationContext): any {\n    switch (root.type) {\n      case 'UnaryExpression':\n        return this.evaluateUnaryExpression(\n          root as jsep.UnaryExpression,\n          context,\n        );\n      case 'BinaryExpression':\n        return this.evaluateBinaryExpression(\n          root as jsep.BinaryExpression,\n          context,\n        );\n      case 'Identifier':\n        if (!context.hasOwnProperty((root as jsep.Identifier).name)) {\n          throw Error(\n            `identifier ${(root as jsep.Identifier).name} does not exist`,\n          );\n        }\n\n        return context[(root as jsep.Identifier).name];\n      case 'Literal':\n        return (root as jsep.Literal).value;\n      default:\n        throw Error(`unknown node type ${root.type}`);\n    }\n  }\n\n  private evaluateUnaryExpression(\n    root: jsep.UnaryExpression,\n    context: EvaluationContext,\n  ): any {\n    switch (root.operator) {\n      case '!':\n        return !this.evaluate(root.argument, context);\n      default:\n        throw Error(`unknown unary operator ${root.operator}`);\n    }\n  }\n\n  private evaluateBinaryExpression(\n    root: jsep.BinaryExpression,\n    context: EvaluationContext,\n  ): any {\n    switch (root.operator) {\n      case '&&':\n        return (\n          this.evaluate(root.left, context) &&\n          this.evaluate(root.right, context)\n        );\n      case '||':\n        return (\n          this.evaluate(root.left, context) ||\n          this.evaluate(root.right, context)\n        );\n      case '==':\n        return (\n          this.evaluate(root.left, context) ===\n          this.evaluate(root.right, context)\n        );\n      case '!=':\n        return (\n          this.evaluate(root.left, context) !==\n          this.evaluate(root.right, context)\n        );\n      case '@>':\n        return includes(\n          this.evaluate(root.left, context),\n          this.evaluate(root.right, context),\n        );\n      default:\n        throw Error(`unknown binary operator ${root.operator}`);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}