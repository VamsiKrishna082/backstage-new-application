{"version":3,"file":"SidebarLanguageSwitcher.esm.js","sources":["../../../src/components/SidebarLanguageSwitcher/SidebarLanguageSwitcher.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MouseEvent, useState } from 'react';\nimport { appLanguageApiRef } from '@backstage/core-plugin-api/alpha';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { useApi } from '@backstage/core-plugin-api';\nimport useObservable from 'react-use/esm/useObservable';\nimport { SidebarItem } from '@backstage/core-components';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n/** @public */\nexport const SidebarLanguageSwitcher = () => {\n  const languageApi = useApi(appLanguageApiRef);\n\n  const [languageObservable] = useState(() => languageApi.language$());\n  const { language: currentLanguage } = useObservable(\n    languageObservable,\n    languageApi.getLanguage(),\n  );\n  const [anchorEl, setAnchorEl] = useState<Element | undefined>();\n\n  const { languages } = languageApi.getAvailableLanguages();\n\n  if (languages.length <= 1) {\n    return null;\n  }\n\n  const open = Boolean(anchorEl);\n\n  const handleClose = () => {\n    setAnchorEl(undefined);\n  };\n\n  const handleOpen = (event: MouseEvent) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleSetLanguage = (newLanguage: string | undefined) => {\n    languageApi.setLanguage(newLanguage);\n    setAnchorEl(undefined);\n  };\n\n  const getLanguageDisplayName = (language: string) => {\n    try {\n      const names = new Intl.DisplayNames([language], {\n        type: 'language',\n      });\n      return names.of(language) || language;\n    } catch (err) {\n      return language;\n    }\n  };\n\n  return (\n    <>\n      <SidebarItem\n        icon={TranslateIcon}\n        text=\"Language\"\n        id=\"language-button\"\n        aria-haspopup=\"listbox\"\n        aria-controls=\"language-menu\"\n        aria-label=\"switch language\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleOpen}\n      />\n      <Menu\n        id=\"language-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'language-button',\n          role: 'listbox',\n        }}\n      >\n        <MenuItem disabled>Choose language</MenuItem>\n        {languages.map(lang => {\n          const active = currentLanguage === lang;\n          return (\n            <MenuItem\n              key={lang}\n              selected={active}\n              aria-selected={active}\n              onClick={() => handleSetLanguage(lang)}\n            >\n              <ListItemText>{getLanguageDisplayName(lang)}</ListItemText>\n            </MenuItem>\n          );\n        })}\n      </Menu>\n    </>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;;AA2BO,MAAM,0BAA0B,MAAM;AAC3C,EAAM,MAAA,WAAA,GAAc,OAAO,iBAAiB,CAAA;AAE5C,EAAA,MAAM,CAAC,kBAAkB,CAAA,GAAI,SAAS,MAAM,WAAA,CAAY,WAAW,CAAA;AACnE,EAAM,MAAA,EAAE,QAAU,EAAA,eAAA,EAAoB,GAAA,aAAA;AAAA,IACpC,kBAAA;AAAA,IACA,YAAY,WAAY;AAAA,GAC1B;AACA,EAAA,MAAM,CAAC,QAAA,EAAU,WAAW,CAAA,GAAI,QAA8B,EAAA;AAE9D,EAAA,MAAM,EAAE,SAAA,EAAc,GAAA,WAAA,CAAY,qBAAsB,EAAA;AAExD,EAAI,IAAA,SAAA,CAAU,UAAU,CAAG,EAAA;AACzB,IAAO,OAAA,IAAA;AAAA;AAGT,EAAM,MAAA,IAAA,GAAO,QAAQ,QAAQ,CAAA;AAE7B,EAAA,MAAM,cAAc,MAAM;AACxB,IAAA,WAAA,CAAY,KAAS,CAAA,CAAA;AAAA,GACvB;AAEA,EAAM,MAAA,UAAA,GAAa,CAAC,KAAsB,KAAA;AACxC,IAAA,WAAA,CAAY,MAAM,aAAa,CAAA;AAAA,GACjC;AAEA,EAAM,MAAA,iBAAA,GAAoB,CAAC,WAAoC,KAAA;AAC7D,IAAA,WAAA,CAAY,YAAY,WAAW,CAAA;AACnC,IAAA,WAAA,CAAY,KAAS,CAAA,CAAA;AAAA,GACvB;AAEA,EAAM,MAAA,sBAAA,GAAyB,CAAC,QAAqB,KAAA;AACnD,IAAI,IAAA;AACF,MAAA,MAAM,QAAQ,IAAI,IAAA,CAAK,YAAa,CAAA,CAAC,QAAQ,CAAG,EAAA;AAAA,QAC9C,IAAM,EAAA;AAAA,OACP,CAAA;AACD,MAAO,OAAA,KAAA,CAAM,EAAG,CAAA,QAAQ,CAAK,IAAA,QAAA;AAAA,aACtB,GAAK,EAAA;AACZ,MAAO,OAAA,QAAA;AAAA;AACT,GACF;AAEA,EAAA,uBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,WAAA;AAAA,MAAA;AAAA,QACC,IAAM,EAAA,aAAA;AAAA,QACN,IAAK,EAAA,UAAA;AAAA,QACL,EAAG,EAAA,iBAAA;AAAA,QACH,eAAc,EAAA,SAAA;AAAA,QACd,eAAc,EAAA,eAAA;AAAA,QACd,YAAW,EAAA,iBAAA;AAAA,QACX,eAAA,EAAe,OAAO,MAAS,GAAA,KAAA,CAAA;AAAA,QAC/B,OAAS,EAAA;AAAA;AAAA,KACX;AAAA,oBACA,IAAA;AAAA,MAAC,IAAA;AAAA,MAAA;AAAA,QACC,EAAG,EAAA,eAAA;AAAA,QACH,QAAA;AAAA,QACA,IAAA;AAAA,QACA,OAAS,EAAA,WAAA;AAAA,QACT,aAAe,EAAA;AAAA,UACb,iBAAmB,EAAA,iBAAA;AAAA,UACnB,IAAM,EAAA;AAAA,SACR;AAAA,QAEA,QAAA,EAAA;AAAA,0BAAC,GAAA,CAAA,QAAA,EAAA,EAAS,QAAQ,EAAA,IAAA,EAAC,QAAe,EAAA,iBAAA,EAAA,CAAA;AAAA,UACjC,SAAA,CAAU,IAAI,CAAQ,IAAA,KAAA;AACrB,YAAA,MAAM,SAAS,eAAoB,KAAA,IAAA;AACnC,YACE,uBAAA,GAAA;AAAA,cAAC,QAAA;AAAA,cAAA;AAAA,gBAEC,QAAU,EAAA,MAAA;AAAA,gBACV,eAAe,EAAA,MAAA;AAAA,gBACf,OAAA,EAAS,MAAM,iBAAA,CAAkB,IAAI,CAAA;AAAA,gBAErC,QAAC,kBAAA,GAAA,CAAA,YAAA,EAAA,EAAc,QAAuB,EAAA,sBAAA,CAAA,IAAI,CAAE,EAAA;AAAA,eAAA;AAAA,cALvC;AAAA,aAMP;AAAA,WAEH;AAAA;AAAA;AAAA;AACH,GACF,EAAA,CAAA;AAEJ;;;;"}