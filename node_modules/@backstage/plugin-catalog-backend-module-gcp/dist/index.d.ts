import { EntityProvider, EntityProviderConnection } from '@backstage/plugin-catalog-node';
import * as container from '@google-cloud/container';
import { Config } from '@backstage/config';
import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { LoggerService, SchedulerService } from '@backstage/backend-plugin-api';

/**
 * Catalog provider to ingest GKE clusters
 *
 * @public
 */
declare class GkeEntityProvider implements EntityProvider {
    private readonly logger;
    private readonly scheduleFn;
    private readonly gkeParents;
    private readonly clusterManagerClient;
    private connection?;
    private constructor();
    static fromConfig({ logger, scheduler, config, }: {
        logger: LoggerService;
        scheduler: SchedulerService;
        config: Config;
    }): GkeEntityProvider;
    static fromConfigWithClient({ logger, scheduler, config, clusterManagerClient, }: {
        logger: LoggerService;
        scheduler: SchedulerService;
        config: Config;
        clusterManagerClient: container.v1.ClusterManagerClient;
    }): GkeEntityProvider;
    getProviderName(): string;
    connect(connection: EntityProviderConnection): Promise<void>;
    private filterOutUndefinedDeferredEntity;
    private filterOutUndefinedCluster;
    private clusterToResource;
    private createScheduleFn;
    private getClusters;
    refresh(): Promise<void>;
}

/**
 * Registers the GcpGkeEntityProvider with the catalog processing extension point.
 *
 * @public
 */
declare const catalogModuleGcpGkeEntityProvider: _backstage_backend_plugin_api.BackendFeature;

export { GkeEntityProvider, catalogModuleGcpGkeEntityProvider as default };
