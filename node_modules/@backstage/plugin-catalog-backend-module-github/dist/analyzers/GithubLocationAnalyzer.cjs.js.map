{"version":3,"file":"GithubLocationAnalyzer.cjs.js","sources":["../../src/analyzers/GithubLocationAnalyzer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi, CatalogClient } from '@backstage/catalog-client';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { Octokit } from '@octokit/rest';\nimport { isEmpty, trimEnd } from 'lodash';\nimport parseGitUrl from 'git-url-parse';\nimport {\n  AnalyzeOptions,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  TokenManager,\n  createLegacyAuthAdapters,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport { AuthService, DiscoveryService } from '@backstage/backend-plugin-api';\nimport { extname } from 'path';\n\n/** @public */\nexport type GithubLocationAnalyzerOptions = {\n  config: Config;\n  discovery: DiscoveryService;\n  tokenManager?: TokenManager;\n  auth?: AuthService;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n  catalog?: CatalogApi;\n};\n\n/** @public */\nexport class GithubLocationAnalyzer implements ScmLocationAnalyzer {\n  private readonly catalogClient: CatalogApi;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly auth: AuthService;\n\n  constructor(options: GithubLocationAnalyzerOptions) {\n    this.catalogClient =\n      options.catalog ?? new CatalogClient({ discoveryApi: options.discovery });\n    this.integrations = ScmIntegrations.fromConfig(options.config);\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n\n    this.auth = createLegacyAuthAdapters({\n      auth: options.auth,\n      discovery: options.discovery,\n      tokenManager: options.tokenManager,\n    }).auth;\n  }\n\n  supports(url: string) {\n    const integration = this.integrations.byUrl(url);\n    return integration?.type === 'github';\n  }\n\n  async analyze(options: AnalyzeOptions) {\n    const { url, catalogFilename } = options;\n    const { owner, name: repo } = parseGitUrl(url);\n\n    const catalogFile = catalogFilename || 'catalog-info.yaml';\n    const extension = extname(catalogFile);\n    const extensionQuery = !isEmpty(extension)\n      ? `extension:${extension.replace('.', '')}`\n      : '';\n\n    const query = `filename:${catalogFile} ${extensionQuery} repo:${owner}/${repo}`;\n\n    const integration = this.integrations.github.byUrl(url);\n    if (!integration) {\n      throw new Error('Make sure you have a GitHub integration configured');\n    }\n\n    const { token: githubToken } =\n      await this.githubCredentialsProvider.getCredentials({\n        url,\n      });\n\n    const octokitClient = new Octokit({\n      auth: githubToken,\n      baseUrl: integration.config.apiBaseUrl,\n    });\n\n    const searchResult = await octokitClient.search\n      .code({ q: query })\n      .catch(e => {\n        throw new Error(`Couldn't search repository for metadata file, ${e}`);\n      });\n\n    const exists = searchResult.data.total_count > 0;\n    if (exists) {\n      const repoInformation = await octokitClient.repos\n        .get({ owner, repo })\n        .catch(e => {\n          throw new Error(`Couldn't fetch repo data, ${e}`);\n        });\n      const defaultBranch = repoInformation.data.default_branch;\n\n      const { token: serviceToken } = await this.auth.getPluginRequestToken({\n        onBehalfOf: await this.auth.getOwnServiceCredentials(),\n        targetPluginId: 'catalog',\n      });\n\n      const result = await Promise.all(\n        searchResult.data.items\n          .map(i => `${trimEnd(url, '/')}/blob/${defaultBranch}/${i.path}`)\n          .map(async target => {\n            const addLocationResult = await this.catalogClient.addLocation(\n              {\n                type: 'url',\n                target,\n                dryRun: true,\n              },\n              { token: serviceToken },\n            );\n            return addLocationResult.entities.map(e => ({\n              location: { type: 'url', target },\n              isRegistered: !!addLocationResult.exists,\n              entity: e,\n            }));\n          }),\n      );\n\n      return { existing: result.flat() };\n    }\n    return { existing: [] };\n  }\n}\n"],"names":["CatalogClient","ScmIntegrations","DefaultGithubCredentialsProvider","createLegacyAuthAdapters","parseGitUrl","extname","isEmpty","Octokit","trimEnd"],"mappings":";;;;;;;;;;;;;;AAiDO,MAAM,sBAAsD,CAAA;AAAA,EAChD,aAAA;AAAA,EACA,yBAAA;AAAA,EACA,YAAA;AAAA,EACA,IAAA;AAAA,EAEjB,YAAY,OAAwC,EAAA;AAClD,IAAK,IAAA,CAAA,aAAA,GACH,QAAQ,OAAW,IAAA,IAAIA,4BAAc,EAAE,YAAA,EAAc,OAAQ,CAAA,SAAA,EAAW,CAAA;AAC1E,IAAA,IAAA,CAAK,YAAe,GAAAC,2BAAA,CAAgB,UAAW,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC7D,IAAA,IAAA,CAAK,4BACH,OAAQ,CAAA,yBAAA,IACRC,4CAAiC,CAAA,gBAAA,CAAiB,KAAK,YAAY,CAAA;AAErE,IAAA,IAAA,CAAK,OAAOC,sCAAyB,CAAA;AAAA,MACnC,MAAM,OAAQ,CAAA,IAAA;AAAA,MACd,WAAW,OAAQ,CAAA,SAAA;AAAA,MACnB,cAAc,OAAQ,CAAA;AAAA,KACvB,CAAE,CAAA,IAAA;AAAA;AACL,EAEA,SAAS,GAAa,EAAA;AACpB,IAAA,MAAM,WAAc,GAAA,IAAA,CAAK,YAAa,CAAA,KAAA,CAAM,GAAG,CAAA;AAC/C,IAAA,OAAO,aAAa,IAAS,KAAA,QAAA;AAAA;AAC/B,EAEA,MAAM,QAAQ,OAAyB,EAAA;AACrC,IAAM,MAAA,EAAE,GAAK,EAAA,eAAA,EAAoB,GAAA,OAAA;AACjC,IAAA,MAAM,EAAE,KAAO,EAAA,IAAA,EAAM,IAAK,EAAA,GAAIC,6BAAY,GAAG,CAAA;AAE7C,IAAA,MAAM,cAAc,eAAmB,IAAA,mBAAA;AACvC,IAAM,MAAA,SAAA,GAAYC,aAAQ,WAAW,CAAA;AACrC,IAAM,MAAA,cAAA,GAAiB,CAACC,cAAA,CAAQ,SAAS,CAAA,GACrC,CAAa,UAAA,EAAA,SAAA,CAAU,OAAQ,CAAA,GAAA,EAAK,EAAE,CAAC,CACvC,CAAA,GAAA,EAAA;AAEJ,IAAM,MAAA,KAAA,GAAQ,YAAY,WAAW,CAAA,CAAA,EAAI,cAAc,CAAS,MAAA,EAAA,KAAK,IAAI,IAAI,CAAA,CAAA;AAE7E,IAAA,MAAM,WAAc,GAAA,IAAA,CAAK,YAAa,CAAA,MAAA,CAAO,MAAM,GAAG,CAAA;AACtD,IAAA,IAAI,CAAC,WAAa,EAAA;AAChB,MAAM,MAAA,IAAI,MAAM,oDAAoD,CAAA;AAAA;AAGtE,IAAA,MAAM,EAAE,KAAO,EAAA,WAAA,KACb,MAAM,IAAA,CAAK,0BAA0B,cAAe,CAAA;AAAA,MAClD;AAAA,KACD,CAAA;AAEH,IAAM,MAAA,aAAA,GAAgB,IAAIC,YAAQ,CAAA;AAAA,MAChC,IAAM,EAAA,WAAA;AAAA,MACN,OAAA,EAAS,YAAY,MAAO,CAAA;AAAA,KAC7B,CAAA;AAED,IAAM,MAAA,YAAA,GAAe,MAAM,aAAA,CAAc,MACtC,CAAA,IAAA,CAAK,EAAE,CAAA,EAAG,KAAM,EAAC,CACjB,CAAA,KAAA,CAAM,CAAK,CAAA,KAAA;AACV,MAAA,MAAM,IAAI,KAAA,CAAM,CAAiD,8CAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAAA,KACrE,CAAA;AAEH,IAAM,MAAA,MAAA,GAAS,YAAa,CAAA,IAAA,CAAK,WAAc,GAAA,CAAA;AAC/C,IAAA,IAAI,MAAQ,EAAA;AACV,MAAM,MAAA,eAAA,GAAkB,MAAM,aAAA,CAAc,KACzC,CAAA,GAAA,CAAI,EAAE,KAAA,EAAO,IAAK,EAAC,CACnB,CAAA,KAAA,CAAM,CAAK,CAAA,KAAA;AACV,QAAA,MAAM,IAAI,KAAA,CAAM,CAA6B,0BAAA,EAAA,CAAC,CAAE,CAAA,CAAA;AAAA,OACjD,CAAA;AACH,MAAM,MAAA,aAAA,GAAgB,gBAAgB,IAAK,CAAA,cAAA;AAE3C,MAAA,MAAM,EAAE,KAAO,EAAA,YAAA,KAAiB,MAAM,IAAA,CAAK,KAAK,qBAAsB,CAAA;AAAA,QACpE,UAAY,EAAA,MAAM,IAAK,CAAA,IAAA,CAAK,wBAAyB,EAAA;AAAA,QACrD,cAAgB,EAAA;AAAA,OACjB,CAAA;AAED,MAAM,MAAA,MAAA,GAAS,MAAM,OAAQ,CAAA,GAAA;AAAA,QAC3B,aAAa,IAAK,CAAA,KAAA,CACf,IAAI,CAAK,CAAA,KAAA,CAAA,EAAGC,eAAQ,GAAK,EAAA,GAAG,CAAC,CAAS,MAAA,EAAA,aAAa,IAAI,CAAE,CAAA,IAAI,EAAE,CAC/D,CAAA,GAAA,CAAI,OAAM,MAAU,KAAA;AACnB,UAAM,MAAA,iBAAA,GAAoB,MAAM,IAAA,CAAK,aAAc,CAAA,WAAA;AAAA,YACjD;AAAA,cACE,IAAM,EAAA,KAAA;AAAA,cACN,MAAA;AAAA,cACA,MAAQ,EAAA;AAAA,aACV;AAAA,YACA,EAAE,OAAO,YAAa;AAAA,WACxB;AACA,UAAO,OAAA,iBAAA,CAAkB,QAAS,CAAA,GAAA,CAAI,CAAM,CAAA,MAAA;AAAA,YAC1C,QAAU,EAAA,EAAE,IAAM,EAAA,KAAA,EAAO,MAAO,EAAA;AAAA,YAChC,YAAA,EAAc,CAAC,CAAC,iBAAkB,CAAA,MAAA;AAAA,YAClC,MAAQ,EAAA;AAAA,WACR,CAAA,CAAA;AAAA,SACH;AAAA,OACL;AAEA,MAAA,OAAO,EAAE,QAAA,EAAU,MAAO,CAAA,IAAA,EAAO,EAAA;AAAA;AAEnC,IAAO,OAAA,EAAE,QAAU,EAAA,EAAG,EAAA;AAAA;AAE1B;;;;"}