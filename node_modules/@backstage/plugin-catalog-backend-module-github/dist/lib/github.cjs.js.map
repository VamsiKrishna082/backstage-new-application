{"version":3,"file":"github.cjs.js","sources":["../../src/lib/github.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { GithubCredentialType } from '@backstage/integration';\nimport { graphql } from '@octokit/graphql';\nimport {\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  TeamTransformer,\n  TransformerContext,\n  UserTransformer,\n} from './defaultTransformers';\nimport { withLocations } from './withLocations';\n\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\nimport { Octokit } from '@octokit/core';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { throttling } from '@octokit/plugin-throttling';\n// Graphql types\n\nexport type QueryResponse = {\n  organization?: OrganizationResponse;\n  repositoryOwner?: RepositoryOwnerResponse;\n  user?: UserResponse;\n};\n\ntype RepositoryOwnerResponse = {\n  repositories?: Connection<RepositoryResponse>;\n  repository?: RepositoryResponse;\n};\n\nexport type OrganizationResponse = {\n  membersWithRole?: Connection<GithubUser>;\n  team?: GithubTeamResponse;\n  teams?: Connection<GithubTeamResponse>;\n  repositories?: Connection<RepositoryResponse>;\n};\n\nexport type UserResponse = {\n  organizations?: Connection<GithubOrg>;\n};\n\nexport type PageInfo = {\n  hasNextPage: boolean;\n  endCursor?: string;\n};\n\nexport type GithubOrg = {\n  login: string;\n};\n\n/**\n * Github User\n *\n * @public\n */\nexport type GithubUser = {\n  login: string;\n  bio?: string;\n  avatarUrl?: string;\n  email?: string;\n  name?: string;\n  organizationVerifiedDomainEmails?: string[];\n};\n\n/**\n * Github Team\n *\n * @public\n */\nexport type GithubTeam = {\n  slug: string;\n  combinedSlug: string;\n  name?: string;\n  description?: string;\n  avatarUrl?: string;\n  editTeamUrl?: string;\n  parentTeam?: GithubTeam;\n  members: GithubUser[];\n};\n\nexport type GithubTeamResponse = Omit<GithubTeam, 'members'> & {\n  members: Connection<GithubUser>;\n};\n\nexport type RepositoryResponse = {\n  name: string;\n  url: string;\n  isArchived: boolean;\n  isFork: boolean;\n  repositoryTopics: RepositoryTopics;\n  defaultBranchRef: {\n    name: string;\n  } | null;\n  catalogInfoFile: {\n    __typename: string;\n    id: string;\n    text: string;\n  } | null;\n  visibility: string;\n};\n\ntype RepositoryTopics = {\n  nodes: TopicNodes[];\n};\n\ntype TopicNodes = {\n  topic: {\n    name: string;\n  };\n};\n\nexport type Connection<T> = {\n  pageInfo: PageInfo;\n  nodes: T[];\n};\n\n/**\n * Gets all the users out of a Github organization.\n *\n * Note that the users will not have their memberships filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n */\nexport async function getOrganizationUsers(\n  client: typeof graphql,\n  org: string,\n  tokenType: GithubCredentialType,\n  userTransformer: UserTransformer = defaultUserTransformer,\n): Promise<{ users: Entity[] }> {\n  const query = `\n    query users($org: String!, $email: Boolean!, $cursor: String) {\n      organization(login: $org) {\n        membersWithRole(first: 100, after: $cursor) {\n          pageInfo { hasNextPage, endCursor }\n          nodes {\n            avatarUrl,\n            bio,\n            email @include(if: $email),\n            login,\n            name,\n            organizationVerifiedDomainEmails(login: $org)\n          }\n        }\n      }\n    }`;\n\n  // There is no user -> teams edge, so we leave the memberships empty for\n  // now and let the team iteration handle it instead\n\n  const users = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.membersWithRole,\n    userTransformer,\n    {\n      org,\n      email: tokenType === 'token',\n    },\n  );\n\n  return { users };\n}\n\n/**\n * Gets all the teams out of a Github organization.\n *\n * Note that the teams will not have any relations apart from parent filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n */\nexport async function getOrganizationTeams(\n  client: typeof graphql,\n  org: string,\n  teamTransformer: TeamTransformer = defaultOrganizationTeamTransformer,\n): Promise<{\n  teams: Entity[];\n}> {\n  const query = `\n    query teams($org: String!, $cursor: String) {\n      organization(login: $org) {\n        teams(first: 50, after: $cursor) {\n          pageInfo { hasNextPage, endCursor }\n          nodes {\n            slug\n            combinedSlug\n            name\n            description\n            avatarUrl\n            editTeamUrl\n            parentTeam { slug }\n            members(first: 100, membership: IMMEDIATE) {\n              pageInfo { hasNextPage }\n              nodes {\n                avatarUrl,\n                bio,\n                email,\n                login,\n                name,\n                organizationVerifiedDomainEmails(login: $org)\n               }\n            }\n          }\n        }\n      }\n    }`;\n\n  const materialisedTeams = async (\n    item: GithubTeamResponse,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> => {\n    const memberNames: GithubUser[] = [];\n\n    if (!item.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of item.members.nodes) {\n        memberNames.push(user);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(ctx.client, ctx.org, item.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    const team: GithubTeam = {\n      ...item,\n      members: memberNames,\n    };\n\n    return await teamTransformer(team, ctx);\n  };\n\n  const teams = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.teams,\n    materialisedTeams,\n    { org },\n  );\n\n  return { teams };\n}\n\nexport async function getOrganizationTeamsFromUsers(\n  client: typeof graphql,\n  org: string,\n  userLogins: string[],\n  teamTransformer: TeamTransformer = defaultOrganizationTeamTransformer,\n): Promise<{\n  teams: Entity[];\n}> {\n  const query = `\n   query teams($org: String!, $cursor: String, $userLogins: [String!] = \"\") {\n  organization(login: $org) {\n    teams(first: 100, after: $cursor, userLogins: $userLogins) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        slug\n        combinedSlug\n        name\n        description\n        avatarUrl\n        editTeamUrl\n        parentTeam {\n          slug\n        }\n        members(first: 100, membership: IMMEDIATE) {\n          pageInfo {\n            hasNextPage\n          }\n          nodes {\n            avatarUrl,\n            bio,\n            email,\n            login,\n            name,\n            organizationVerifiedDomainEmails(login: $org)\n          }\n        }\n      }\n    }\n  }\n}`;\n\n  const materialisedTeams = async (\n    item: GithubTeamResponse,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> => {\n    const memberNames: GithubUser[] = [];\n\n    if (!item.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of item.members.nodes) {\n        memberNames.push(user);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(ctx.client, ctx.org, item.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    const team: GithubTeam = {\n      ...item,\n      members: memberNames,\n    };\n\n    return await teamTransformer(team, ctx);\n  };\n\n  const teams = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.teams,\n    materialisedTeams,\n    { org, userLogins },\n  );\n\n  return { teams };\n}\n\nexport async function getOrganizationsFromUser(\n  client: typeof graphql,\n  user: string,\n): Promise<{\n  orgs: string[];\n}> {\n  const query = `\n  query orgs($user: String!) {\n    user(login: $user) {\n      organizations(first: 100) {\n        nodes { login }\n        pageInfo { hasNextPage, endCursor }\n      }\n    }\n  }`;\n\n  const orgs = await queryWithPaging(\n    client,\n    query,\n    '',\n    r => r.user?.organizations,\n    async o => o.login,\n    { user },\n  );\n\n  return { orgs };\n}\n\nexport async function getOrganizationTeam(\n  client: typeof graphql,\n  org: string,\n  teamSlug: string,\n  teamTransformer: TeamTransformer = defaultOrganizationTeamTransformer,\n): Promise<{\n  team: Entity;\n}> {\n  const query = `\n  query teams($org: String!, $teamSlug: String!) {\n      organization(login: $org) {\n        team(slug:$teamSlug) {\n            slug\n            combinedSlug\n            name\n            description\n            avatarUrl\n            editTeamUrl\n            parentTeam { slug }\n            members(first: 100, membership: IMMEDIATE) {\n              pageInfo { hasNextPage }\n              nodes { login }\n            }\n        }\n      }\n    }`;\n\n  const materialisedTeam = async (\n    item: GithubTeamResponse,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> => {\n    const memberNames: GithubUser[] = [];\n\n    if (!item.members.pageInfo.hasNextPage) {\n      // We got all the members in one go, run the fast path\n      for (const user of item.members.nodes) {\n        memberNames.push(user);\n      }\n    } else {\n      // There were more than a hundred immediate members - run the slow\n      // path of fetching them explicitly\n      const { members } = await getTeamMembers(ctx.client, ctx.org, item.slug);\n      for (const userLogin of members) {\n        memberNames.push(userLogin);\n      }\n    }\n\n    const team: GithubTeam = {\n      ...item,\n      members: memberNames,\n    };\n\n    return await teamTransformer(team, ctx);\n  };\n\n  const response: QueryResponse = await client(query, {\n    org,\n    teamSlug,\n  });\n\n  if (!response.organization?.team)\n    throw new Error(`Found no match for team ${teamSlug}`);\n\n  const team = await materialisedTeam(response.organization?.team, {\n    query,\n    client,\n    org,\n  });\n\n  if (!team) throw new Error(`Can't transform for team ${teamSlug}`);\n\n  return { team };\n}\n\nexport async function getOrganizationRepositories(\n  client: typeof graphql,\n  org: string,\n  catalogPath: string,\n): Promise<{ repositories: RepositoryResponse[] }> {\n  let relativeCatalogPathRef: string;\n  // We must strip the leading slash or the query for objects does not work\n  if (catalogPath.startsWith('/')) {\n    relativeCatalogPathRef = catalogPath.substring(1);\n  } else {\n    relativeCatalogPathRef = catalogPath;\n  }\n  const catalogPathRef = `HEAD:${relativeCatalogPathRef}`;\n  const query = `\n    query repositories($org: String!, $catalogPathRef: String!, $cursor: String) {\n      repositoryOwner(login: $org) {\n        login\n        repositories(first: 50, after: $cursor) {\n          nodes {\n            name\n            catalogInfoFile: object(expression: $catalogPathRef) {\n              __typename\n              ... on Blob {\n                id\n                text\n              }\n            }\n            url\n            isArchived\n            isFork\n            visibility\n            repositoryTopics(first: 100) {\n              nodes {\n                ... on RepositoryTopic {\n                  topic {\n                    name\n                  }\n                }\n              }\n            }\n            defaultBranchRef {\n              name\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }`;\n\n  const repositories = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.repositoryOwner?.repositories,\n    async x => x,\n    { org, catalogPathRef },\n  );\n\n  return { repositories };\n}\n\nexport async function getOrganizationRepository(\n  client: typeof graphql,\n  org: string,\n  repoName: string,\n  catalogPath: string,\n): Promise<RepositoryResponse | null> {\n  let relativeCatalogPathRef: string;\n  // We must strip the leading slash or the query for objects does not work\n  if (catalogPath.startsWith('/')) {\n    relativeCatalogPathRef = catalogPath.substring(1);\n  } else {\n    relativeCatalogPathRef = catalogPath;\n  }\n  const catalogPathRef = `HEAD:${relativeCatalogPathRef}`;\n  const query = `\n    query repository($org: String!, $repoName: String!, $catalogPathRef: String!) {\n      repositoryOwner(login: $org) {\n        repository(name: $repoName) {\n          name\n          catalogInfoFile: object(expression: $catalogPathRef) {\n            __typename\n            ... on Blob {\n              id\n              text\n            }\n          }\n          url\n          isArchived\n          isFork\n          visibility\n          repositoryTopics(first: 100) {\n            nodes {\n              ... on RepositoryTopic {\n                topic {\n                  name\n                }\n              }\n            }\n          }\n          defaultBranchRef {\n            name\n          }\n        }\n      }\n    }`;\n\n  const response: QueryResponse = await client(query, {\n    org,\n    repoName,\n    catalogPathRef,\n  });\n\n  return response.repositoryOwner?.repository || null;\n}\n\n/**\n * Gets all the users out of a Github organization.\n *\n * Note that the users will not have their memberships filled in.\n *\n * @param client - An octokit graphql client\n * @param org - The slug of the org to read\n * @param teamSlug - The slug of the team to read\n */\nexport async function getTeamMembers(\n  client: typeof graphql,\n  org: string,\n  teamSlug: string,\n): Promise<{ members: GithubUser[] }> {\n  const query = `\n    query members($org: String!, $teamSlug: String!, $cursor: String) {\n      organization(login: $org) {\n        team(slug: $teamSlug) {\n          members(first: 100, after: $cursor, membership: IMMEDIATE) {\n            pageInfo { hasNextPage, endCursor }\n            nodes { login }\n          }\n        }\n      }\n    }`;\n\n  const members = await queryWithPaging(\n    client,\n    query,\n    org,\n    r => r.organization?.team?.members,\n    async user => user,\n    { org, teamSlug },\n  );\n\n  return { members };\n}\n\n//\n// Helpers\n//\n\n/**\n * Assists in repeatedly executing a query with a paged response.\n *\n * Requires that the query accepts a $cursor variable.\n *\n * @param client - The octokit client\n * @param query - The query to execute\n * @param org - The slug of the org to read\n * @param connection - A function that, given the response, picks out the actual\n *                   Connection object that's being iterated\n * @param transformer - A function that, given one of the nodes in the Connection,\n *               returns the model mapped form of it\n * @param variables - The variable values that the query needs, minus the cursor\n */\nexport async function queryWithPaging<\n  GraphqlType,\n  OutputType,\n  Variables extends {},\n  Response = QueryResponse,\n>(\n  client: typeof graphql,\n  query: string,\n  org: string,\n  connection: (response: Response) => Connection<GraphqlType> | undefined,\n  transformer: (\n    item: GraphqlType,\n    ctx: TransformerContext,\n  ) => Promise<OutputType | undefined>,\n  variables: Variables,\n): Promise<OutputType[]> {\n  const result: OutputType[] = [];\n  const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));\n\n  let cursor: string | undefined = undefined;\n  for (let j = 0; j < 1000 /* just for sanity */; ++j) {\n    const response: Response = await client(query, {\n      ...variables,\n      cursor,\n    });\n\n    const conn = connection(response);\n    if (!conn) {\n      throw new Error(`Found no match for ${JSON.stringify(variables)}`);\n    }\n\n    for (const node of conn.nodes) {\n      const transformedNode = await transformer(node, {\n        client,\n        query,\n        org,\n      });\n\n      if (transformedNode) {\n        result.push(transformedNode);\n      }\n    }\n\n    if (!conn.pageInfo.hasNextPage) {\n      break;\n    } else {\n      await sleep(1000);\n      cursor = conn.pageInfo.endCursor;\n    }\n  }\n\n  return result;\n}\n\nexport type DeferredEntitiesBuilder = (\n  org: string,\n  entities: Entity[],\n) => { added: DeferredEntity[]; removed: DeferredEntity[] };\n\nexport const createAddEntitiesOperation =\n  (id: string, host: string) => (org: string, entities: Entity[]) => ({\n    removed: [],\n    added: entities.map(entity => ({\n      locationKey: `github-org-provider:${id}`,\n      entity: withLocations(`https://${host}`, org, entity),\n    })),\n  });\n\nexport const createRemoveEntitiesOperation =\n  (id: string, host: string) => (org: string, entities: Entity[]) => ({\n    added: [],\n    removed: entities.map(entity => ({\n      locationKey: `github-org-provider:${id}`,\n      entity: withLocations(`https://${host}`, org, entity),\n    })),\n  });\n\nexport const createReplaceEntitiesOperation =\n  (id: string, host: string) => (org: string, entities: Entity[]) => {\n    const entitiesToReplace = entities.map(entity => ({\n      locationKey: `github-org-provider:${id}`,\n      entity: withLocations(`https://${host}`, org, entity),\n    }));\n\n    return {\n      removed: entitiesToReplace,\n      added: entitiesToReplace,\n    };\n  };\n\n/**\n * Creates a GraphQL Client with Throttling\n */\nexport const createGraphqlClient = (args: {\n  headers:\n    | {\n        [name: string]: string;\n      }\n    | undefined;\n  baseUrl: string;\n  logger: LoggerService;\n}): typeof graphql => {\n  const { headers, baseUrl, logger } = args;\n  const ThrottledOctokit = Octokit.plugin(throttling);\n  const octokit = new ThrottledOctokit({\n    throttle: {\n      onRateLimit: (retryAfter, rateLimitData, _, retryCount) => {\n        logger.warn(\n          `Request quota exhausted for request ${rateLimitData?.method} ${rateLimitData?.url}`,\n        );\n\n        if (retryCount < 2) {\n          logger.warn(\n            `Retrying after ${retryAfter} seconds for the ${retryCount} time due to Rate Limit!`,\n          );\n          return true;\n        }\n\n        return false;\n      },\n      onSecondaryRateLimit: (retryAfter, rateLimitData, _, retryCount) => {\n        logger.warn(\n          `Secondary Rate Limit Exhausted for request ${rateLimitData?.method} ${rateLimitData?.url}`,\n        );\n\n        if (retryCount < 2) {\n          logger.warn(\n            `Retrying after ${retryAfter} seconds for the ${retryCount} time due to Secondary Rate Limit!`,\n          );\n          return true;\n        }\n\n        return false;\n      },\n    },\n  });\n\n  const client = octokit.graphql.defaults({\n    headers,\n    baseUrl,\n  });\n\n  return client;\n};\n"],"names":["defaultUserTransformer","defaultOrganizationTeamTransformer","team","withLocations","Octokit","throttling"],"mappings":"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"}