{"version":3,"file":"GithubDiscoveryProcessor.cjs.js","sources":["../../src/processors/GithubDiscoveryProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { graphql } from '@octokit/graphql';\nimport { getOrganizationRepositories } from '../lib';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Extracts repositories out of a GitHub org.\n *\n * The following will create locations for all projects which have a catalog-info.yaml\n * on the default branch. The first is shorthand for the second.\n *\n *    target: \"https://github.com/backstage\"\n *    or\n *    target: https://github.com/backstage/*\\/blob/-/catalog-info.yaml\n *\n * You may also explicitly specify the source branch:\n *\n *    target: https://github.com/backstage/*\\/blob/main/catalog-info.yaml\n *\n * @public\n */\nexport class GithubDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: LoggerService;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: LoggerService;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubDiscoveryProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: LoggerService;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n  }\n  getProcessorName(): string {\n    return 'GithubDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-discovery') {\n      return false;\n    }\n\n    const gitHubConfig = this.integrations.github.byUrl(\n      location.target,\n    )?.config;\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${location.target}. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    const { org, repoSearchPath, catalogPath, branch, host } = parseUrl(\n      location.target,\n    );\n\n    // Building the org url here so that the github creds provider doesn't need to know\n    // about how to handle the wild card which is special for this processor.\n    const orgUrl = `https://${host}/${org}`;\n\n    const { headers } = await this.githubCredentialsProvider.getCredentials({\n      url: orgUrl,\n    });\n\n    const client = graphql.defaults({\n      baseUrl: gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info(`Reading GitHub repositories from ${location.target}`);\n\n    const { repositories } = await getOrganizationRepositories(\n      client,\n      org,\n      catalogPath,\n    );\n    const matching = repositories.filter(\n      r => !r.isArchived && repoSearchPath.test(r.name),\n    );\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${repositories.length} GitHub repositories (${matching.length} matching the pattern) in ${duration} seconds`,\n    );\n\n    for (const repository of matching) {\n      const branchName =\n        branch === '-' ? repository.defaultBranchRef?.name : branch;\n\n      if (!branchName) {\n        this.logger.info(\n          `the repository ${repository.url} does not have a default branch, skipping`,\n        );\n        continue;\n      }\n\n      const path = `/blob/${branchName}${catalogPath}`;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          target: `${repository.url}${path}`,\n          // Not all locations may actually exist, since the user defined them as a wildcard pattern.\n          // Thus, we emit them as optional and let the downstream processor find them while not outputting\n          // an error if it couldn't.\n          presence: 'optional',\n        }),\n      );\n    }\n\n    return true;\n  }\n}\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  org: string;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n  branch: string;\n  host: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  // /backstage/techdocs-*/blob/master/catalog-info.yaml\n  // can also be\n  // /backstage\n  if (path.length > 2 && path[0].length && path[1].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      branch: decodeURIComponent(path[3]),\n      catalogPath: `/${decodeURIComponent(path.slice(4).join('/'))}`,\n      host: url.host,\n    };\n  } else if (path.length === 1 && path[0].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      host: url.host,\n      repoSearchPath: escapeRegExp('*'),\n      catalogPath: '/catalog-info.yaml',\n      branch: '-',\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nexport function escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n"],"names":["ScmIntegrations","DefaultGithubCredentialsProvider","graphql","getOrganizationRepositories","processingResult"],"mappings":"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"}