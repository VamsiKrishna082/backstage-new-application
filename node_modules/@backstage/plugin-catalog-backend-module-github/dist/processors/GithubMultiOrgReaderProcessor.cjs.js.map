{"version":3,"file":"GithubMultiOrgReaderProcessor.cjs.js","sources":["../../src/processors/GithubMultiOrgReaderProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_NAMESPACE,\n  Entity,\n  isGroupEntity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubAppCredentialsMux,\n  GithubCredentialsProvider,\n  GithubIntegrationConfig,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { graphql } from '@octokit/graphql';\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  GithubMultiOrgConfig,\n  readGithubMultiOrgConfig,\n  TeamTransformer,\n  UserTransformer,\n} from '../lib';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Extracts teams and users out of a multiple GitHub orgs namespaced per org.\n *\n * Be aware that this processor may not be compatible with future org structures in the catalog.\n *\n * @public\n */\nexport class GithubMultiOrgReaderProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly orgs: GithubMultiOrgConfig;\n  private readonly logger: LoggerService;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: LoggerService;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {\n    const c = config.getOptionalConfig('catalog.processors.githubMultiOrg');\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubMultiOrgReaderProcessor({\n      ...options,\n      integrations,\n      orgs: c ? readGithubMultiOrgConfig(c) : [],\n    });\n  }\n\n  constructor(\n    private options: {\n      integrations: ScmIntegrationRegistry;\n      logger: LoggerService;\n      orgs: GithubMultiOrgConfig;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.orgs = options.orgs;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n  }\n  getProcessorName(): string {\n    return 'GithubMultiOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-multi-org') {\n      return false;\n    }\n\n    const gitHubConfig = this.integrations.github.byUrl(\n      location.target,\n    )?.config;\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${location.target}. Please add a configuration entry for it under integrations.github`,\n      );\n    }\n\n    const allUsersMap = new Map();\n    const baseUrl = new URL(location.target).origin;\n\n    const orgsToProcess = this.orgs.length\n      ? this.orgs\n      : await this.getAllOrgs(gitHubConfig);\n\n    for (const orgConfig of orgsToProcess) {\n      try {\n        const { headers, type: tokenType } =\n          await this.githubCredentialsProvider.getCredentials({\n            url: `${baseUrl}/${orgConfig.name}`,\n          });\n        const client = graphql.defaults({\n          baseUrl: gitHubConfig.apiBaseUrl,\n          headers,\n        });\n\n        const startTimestamp = Date.now();\n        this.logger.info(\n          `Reading GitHub users and teams for org: ${orgConfig.name}`,\n        );\n        const { users } = await getOrganizationUsers(\n          client,\n          orgConfig.name,\n          tokenType,\n          async (githubUser, ctx): Promise<Entity | undefined> => {\n            const result = this.options.userTransformer\n              ? await this.options.userTransformer(githubUser, ctx)\n              : await defaultUserTransformer(githubUser, ctx);\n\n            if (result) {\n              result.metadata.namespace = orgConfig.userNamespace;\n            }\n\n            return result;\n          },\n        );\n\n        const { teams } = await getOrganizationTeams(\n          client,\n          orgConfig.name,\n          async (team, ctx): Promise<Entity | undefined> => {\n            const result = this.options.teamTransformer\n              ? await this.options.teamTransformer(team, ctx)\n              : await defaultOrganizationTeamTransformer(team, ctx);\n\n            if (result && isGroupEntity(result)) {\n              result.metadata.namespace = orgConfig.groupNamespace;\n              // Group `spec.members` inherits the namespace of it's group so need to explicitly specify refs here\n              result.spec.members = team.members.map(\n                user =>\n                  `${orgConfig.userNamespace ?? DEFAULT_NAMESPACE}/${\n                    user.login\n                  }`,\n              );\n            }\n\n            return result;\n          },\n        );\n\n        const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n        this.logger.debug(\n          `Read ${users.length} GitHub users and ${teams.length} GitHub teams from ${orgConfig.name} in ${duration} seconds`,\n        );\n\n        // Grab current users from `allUsersMap` if they already exist in our\n        // pending users so we can append to their group membership relations\n        const pendingUsers = users.map(u => {\n          const userRef = stringifyEntityRef(u);\n          if (!allUsersMap.has(userRef)) {\n            allUsersMap.set(userRef, u);\n          }\n\n          return allUsersMap.get(userRef);\n        });\n\n        if (areGroupEntities(teams)) {\n          buildOrgHierarchy(teams);\n          if (areUserEntities(pendingUsers)) {\n            assignGroupsToUsers(pendingUsers, teams);\n          }\n        }\n\n        for (const team of teams) {\n          emit(processingResult.entity(location, team));\n        }\n      } catch (e) {\n        this.logger.error(\n          `Failed to read GitHub org data for ${orgConfig.name}: ${e}`,\n        );\n      }\n    }\n\n    // Emit all users at the end after all orgs have been processed\n    // so all memberships across org groups are accounted for\n    const allUsers = Array.from(allUsersMap.values());\n    for (const user of allUsers) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n\n  // Note: Does not support usage of PATs\n  private async getAllOrgs(\n    gitHubConfig: GithubIntegrationConfig,\n  ): Promise<GithubMultiOrgConfig> {\n    const githubAppMux = new GithubAppCredentialsMux(gitHubConfig);\n    const installs = await githubAppMux.getAllInstallations();\n\n    return installs\n      .map(install =>\n        install.target_type === 'Organization' &&\n        install.account &&\n        'login' in install.account &&\n        install.account.login\n          ? {\n              name: install.account.login,\n              groupNamespace: install.account.login.toLowerCase(),\n            }\n          : undefined,\n      )\n      .filter(Boolean) as GithubMultiOrgConfig;\n  }\n}\n"],"names":["DefaultGithubCredentialsProvider","config","ScmIntegrations","readGithubMultiOrgConfig","graphql","getOrganizationUsers","defaultUserTransformer","getOrganizationTeams","defaultOrganizationTeamTransformer","isGroupEntity","DEFAULT_NAMESPACE","stringifyEntityRef","areGroupEntities","buildOrgHierarchy","areUserEntities","assignGroupsToUsers","processingResult","GithubAppCredentialsMux"],"mappings":"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"}