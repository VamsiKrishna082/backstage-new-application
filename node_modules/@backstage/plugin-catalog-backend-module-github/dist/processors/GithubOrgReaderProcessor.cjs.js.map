{"version":3,"file":"GithubOrgReaderProcessor.cjs.js","sources":["../../src/processors/GithubOrgReaderProcessor.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubCredentialType,\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { graphql } from '@octokit/graphql';\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  parseGithubOrgUrl,\n} from '../lib';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\ntype GraphQL = typeof graphql;\n\n/**\n * Extracts teams and users out of a GitHub org.\n *\n * @remarks\n *\n * Consider using {@link GithubOrgEntityProvider} instead.\n *\n * @public\n */\nexport class GithubOrgReaderProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: LoggerService;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      logger: LoggerService;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n    },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new GithubOrgReaderProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: LoggerService;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n  }) {\n    this.integrations = options.integrations;\n    this.githubCredentialsProvider =\n      options.githubCredentialsProvider ||\n      DefaultGithubCredentialsProvider.fromIntegrations(this.integrations);\n    this.logger = options.logger;\n  }\n  getProcessorName(): string {\n    return 'GithubOrgReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'github-org') {\n      return false;\n    }\n\n    const { client, tokenType } = await this.createClient(location.target);\n    const { org } = parseGithubOrgUrl(location.target);\n\n    // Read out all of the raw data\n    const startTimestamp = Date.now();\n    this.logger.info('Reading GitHub users and groups');\n\n    const { users } = await getOrganizationUsers(client, org, tokenType);\n    const { teams } = await getOrganizationTeams(client, org);\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${users.length} GitHub users and ${teams.length} GitHub teams in ${duration} seconds`,\n    );\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(users)) {\n        assignGroupsToUsers(users, teams);\n      }\n    }\n\n    // Done!\n    for (const team of teams) {\n      emit(processingResult.entity(location, team));\n    }\n    for (const user of users) {\n      emit(processingResult.entity(location, user));\n    }\n\n    return true;\n  }\n\n  private async createClient(\n    orgUrl: string,\n  ): Promise<{ client: GraphQL; tokenType: GithubCredentialType }> {\n    const gitHubConfig = this.integrations.github.byUrl(orgUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub Org provider that matches ${orgUrl}. Please add a configuration for an integration.`,\n      );\n    }\n\n    const { headers, type: tokenType } =\n      await this.githubCredentialsProvider.getCredentials({\n        url: orgUrl,\n      });\n\n    const client = graphql.defaults({\n      baseUrl: gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    return { client, tokenType };\n  }\n}\n"],"names":["ScmIntegrations","DefaultGithubCredentialsProvider","org","parseGithubOrgUrl","getOrganizationUsers","getOrganizationTeams","areGroupEntities","buildOrgHierarchy","areUserEntities","assignGroupsToUsers","processingResult","graphql"],"mappings":"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"}