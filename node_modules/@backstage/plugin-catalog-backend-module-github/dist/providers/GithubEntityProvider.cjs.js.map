{"version":3,"file":"GithubEntityProvider.cjs.js","sources":["../../src/providers/GithubEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  GithubCredentialsProvider,\n  GithubIntegration,\n  GithubIntegrationConfig,\n  ScmIntegrations,\n  SingleInstanceGithubCredentialsProvider,\n} from '@backstage/integration';\nimport {\n  DeferredEntity,\n  EntityProvider,\n  EntityProviderConnection,\n  locationSpecToLocationEntity,\n} from '@backstage/plugin-catalog-node';\n\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\n\nimport { graphql } from '@octokit/graphql';\nimport * as uuid from 'uuid';\nimport {\n  GithubEntityProviderConfig,\n  readProviderConfigs,\n} from './GithubEntityProviderConfig';\nimport {\n  getOrganizationRepositories,\n  getOrganizationRepository,\n  RepositoryResponse,\n} from '../lib/github';\nimport {\n  satisfiesForkFilter,\n  satisfiesTopicFilter,\n  satisfiesVisibilityFilter,\n} from '../lib/util';\n\nimport {\n  EventParams,\n  EventsService,\n  EventSubscriber,\n} from '@backstage/plugin-events-node';\nimport {\n  Commit,\n  PushEvent,\n  RepositoryArchivedEvent,\n  RepositoryDeletedEvent,\n  RepositoryEditedEvent,\n  RepositoryEvent,\n  RepositoryRenamedEvent,\n  RepositoryTransferredEvent,\n  RepositoryUnarchivedEvent,\n} from '@octokit/webhooks-types';\nimport { Minimatch } from 'minimatch';\nimport {\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskRunner,\n} from '@backstage/backend-plugin-api';\n\nconst EVENT_TOPICS = ['github.push', 'github.repository'];\n\ntype Repository = {\n  name: string;\n  url: string;\n  isArchived: boolean;\n  isFork: boolean;\n  repositoryTopics: string[];\n  defaultBranchRef?: string;\n  isCatalogInfoFilePresent: boolean;\n  visibility: string;\n};\n\n/**\n * Discovers catalog files located in [GitHub](https://github.com).\n * The provider will search your GitHub account and register catalog files matching the configured path\n * as Location entity and via following processing steps add all contained catalog entities.\n * This can be useful as an alternative to static locations or manually adding things to the catalog.\n *\n * @public\n */\nexport class GithubEntityProvider implements EntityProvider, EventSubscriber {\n  private readonly config: GithubEntityProviderConfig;\n  private readonly events?: EventsService;\n  private readonly logger: LoggerService;\n  private readonly integration: GithubIntegrationConfig;\n  private readonly scheduleFn: () => Promise<void>;\n  private connection?: EntityProviderConnection;\n  private readonly githubCredentialsProvider: GithubCredentialsProvider;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      events?: EventsService;\n      logger: LoggerService;\n      schedule?: SchedulerServiceTaskRunner;\n      scheduler?: SchedulerService;\n    },\n  ): GithubEntityProvider[] {\n    if (!options.schedule && !options.scheduler) {\n      throw new Error('Either schedule or scheduler must be provided.');\n    }\n\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return readProviderConfigs(config).map(providerConfig => {\n      const integrationHost = providerConfig.host;\n      const integration = integrations.github.byHost(integrationHost);\n\n      if (!integration) {\n        throw new Error(\n          `There is no GitHub config that matches host ${integrationHost}. Please add a configuration entry for it under integrations.github`,\n        );\n      }\n\n      const taskRunner =\n        options.schedule ??\n        options.scheduler!.createScheduledTaskRunner(providerConfig.schedule!);\n\n      return new GithubEntityProvider(\n        providerConfig,\n        integration,\n        options.logger,\n        taskRunner,\n        options.events,\n      );\n    });\n  }\n\n  private constructor(\n    config: GithubEntityProviderConfig,\n    integration: GithubIntegration,\n    logger: LoggerService,\n    taskRunner: SchedulerServiceTaskRunner,\n    events?: EventsService,\n  ) {\n    this.config = config;\n    this.events = events;\n    this.integration = integration.config;\n    this.logger = logger.child({\n      target: this.getProviderName(),\n    });\n    this.scheduleFn = this.createScheduleFn(taskRunner);\n    this.githubCredentialsProvider =\n      SingleInstanceGithubCredentialsProvider.create(integration.config);\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-node#EntityProvider.getProviderName} */\n  getProviderName(): string {\n    return `github-provider:${this.config.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-node#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n    await this.events?.subscribe({\n      id: this.getProviderName(),\n      topics: EVENT_TOPICS,\n      onEvent: params => this.onEvent(params),\n    });\n    return await this.scheduleFn();\n  }\n\n  private createScheduleFn(\n    taskRunner: SchedulerServiceTaskRunner,\n  ): () => Promise<void> {\n    return async () => {\n      const taskId = `${this.getProviderName()}:refresh`;\n      return taskRunner.run({\n        id: taskId,\n        fn: async () => {\n          const logger = this.logger.child({\n            class: GithubEntityProvider.prototype.constructor.name,\n            taskId,\n            taskInstanceId: uuid.v4(),\n          });\n          try {\n            await this.refresh(logger);\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  async refresh(logger: LoggerService) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const targets = await this.findCatalogFiles();\n    const matchingTargets = this.matchesFilters(targets);\n    const entities = this.toDeferredEntitiesFromRepos(matchingTargets);\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    logger.info(\n      `Read ${targets.length} GitHub repositories (${entities.length} matching the pattern)`,\n    );\n  }\n\n  private async createGraphqlClient() {\n    const organization = this.config.organization;\n    const host = this.integration.host;\n    const orgUrl = `https://${host}/${organization}`;\n\n    const { headers } = await this.githubCredentialsProvider.getCredentials({\n      url: orgUrl,\n    });\n\n    return graphql.defaults({\n      baseUrl: this.integration.apiBaseUrl,\n      headers,\n    });\n  }\n\n  // go to the server and get all repositories\n  private async findCatalogFiles(): Promise<Repository[]> {\n    const organization = this.config.organization;\n    const catalogPath = this.config.catalogPath;\n    const client = await this.createGraphqlClient();\n\n    const { repositories: repositoriesFromGithub } =\n      await getOrganizationRepositories(client, organization, catalogPath);\n    const repositories = repositoriesFromGithub.map(\n      this.createRepoFromGithubResponse,\n    );\n\n    if (this.config.validateLocationsExist) {\n      return repositories.filter(\n        repository => repository.isCatalogInfoFilePresent,\n      );\n    }\n\n    return repositories;\n  }\n\n  private matchesFilters(repositories: Repository[]): Repository[] {\n    const repositoryFilter = this.config.filters?.repository;\n    const topicFilters = this.config.filters?.topic;\n    const allowForks = this.config.filters?.allowForks ?? true;\n    const visibilities = this.config.filters?.visibility ?? [];\n\n    return repositories.filter(r => {\n      const repoTopics: string[] = r.repositoryTopics;\n      return (\n        !r.isArchived &&\n        (!repositoryFilter || repositoryFilter.test(r.name)) &&\n        satisfiesTopicFilter(repoTopics, topicFilters) &&\n        satisfiesForkFilter(allowForks, r.isFork) &&\n        satisfiesVisibilityFilter(visibilities, r.visibility) &&\n        r.defaultBranchRef\n      );\n    });\n  }\n\n  private createLocationUrl(repository: Repository): string {\n    const branch =\n      this.config.filters?.branch || repository.defaultBranchRef || '-';\n    const catalogFile = this.config.catalogPath.startsWith('/')\n      ? this.config.catalogPath.substring(1)\n      : this.config.catalogPath;\n    return `${repository.url}/blob/${branch}/${catalogFile}`;\n  }\n\n  private static toLocationSpec(target: string): LocationSpec {\n    return {\n      type: 'url',\n      target: target,\n      presence: 'optional',\n    };\n  }\n\n  /** {@inheritdoc @backstage/plugin-events-node#EventSubscriber.onEvent} */\n  async onEvent(params: EventParams): Promise<void> {\n    this.logger.debug(`Received event for topic ${params.topic}`);\n    if (EVENT_TOPICS.some(topic => topic === params.topic)) {\n      if (!this.connection) {\n        throw new Error('Not initialized');\n      }\n\n      switch (params.topic) {\n        case 'github.push':\n          await this.onPush(params.eventPayload as PushEvent);\n          return;\n\n        case 'github.repository':\n          await this.onRepoChange(params.eventPayload as RepositoryEvent);\n          return;\n\n        default: // should never be reached\n          this.logger.warn(\n            `Missing implementation for event of topic ${params.topic}`,\n          );\n      }\n    }\n  }\n\n  /** {@inheritdoc @backstage/plugin-events-node#EventSubscriber.supportsEventTopics} */\n  supportsEventTopics(): string[] {\n    return EVENT_TOPICS;\n  }\n\n  private async onPush(event: PushEvent) {\n    if (this.config.organization !== event.organization?.login) {\n      this.logger.debug(\n        `skipping push event from organization ${event.organization?.login}`,\n      );\n      return;\n    }\n\n    const repoName = event.repository.name;\n    const repoUrl = event.repository.html_url;\n    this.logger.debug(`handle github:push event for ${repoName} - ${repoUrl}`);\n\n    const branch =\n      this.config.filters?.branch || event.repository.default_branch;\n\n    if (!event.ref.includes(branch)) {\n      this.logger.debug(`skipping push event from ref ${event.ref}`);\n      return;\n    }\n\n    const repository = this.createRepoFromEvent(event);\n\n    const matchingTargets = this.matchesFilters([repository]);\n    if (matchingTargets.length === 0) {\n      this.logger.debug(\n        `skipping push event from repository ${repoName} because didn't match provider filters`,\n      );\n      return;\n    }\n\n    // the commit has information about the files (added,removed,modified)\n    // so we will process the change based in this data\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push\n    const added = this.collectDeferredEntitiesFromCommit(\n      repoUrl,\n      branch,\n      event.commits,\n      (commit: Commit) => [...commit.added],\n    );\n    const removed = this.collectDeferredEntitiesFromCommit(\n      repoUrl,\n      branch,\n      event.commits,\n      (commit: Commit) => [...commit.removed],\n    );\n    const modified = this.collectFilesFromCommit(\n      event.commits,\n      (commit: Commit) => [...commit.modified],\n    );\n\n    if (modified.length > 0) {\n      const catalogPath = this.config.catalogPath.startsWith('/')\n        ? this.config.catalogPath.substring(1)\n        : this.config.catalogPath;\n\n      await this.connection!.refresh({\n        keys: [\n          ...new Set([\n            ...modified.map(\n              filePath => `url:${repoUrl}/tree/${branch}/${filePath}`,\n            ),\n            ...modified.map(\n              filePath => `url:${repoUrl}/blob/${branch}/${filePath}`,\n            ),\n            `url:${repoUrl}/tree/${branch}/${catalogPath}`,\n          ]),\n        ],\n      });\n    }\n\n    if (added.length > 0 || removed.length > 0) {\n      await this.connection!.applyMutation({\n        type: 'delta',\n        added: added,\n        removed: removed,\n      });\n    }\n\n    this.logger.info(\n      `Processed Github push event: added ${added.length} - removed ${removed.length} - modified ${modified.length}`,\n    );\n  }\n\n  private async onRepoChange(event: RepositoryEvent) {\n    if (this.config.organization !== event.organization?.login) {\n      this.logger.debug(\n        `skipping repository event from organization ${event.organization?.login}`,\n      );\n      return;\n    }\n\n    const action = event.action;\n    switch (action) {\n      case 'archived':\n        await this.onRepoArchived(event as RepositoryArchivedEvent);\n        return;\n\n      // A repository was created.\n      case 'created':\n        // skip these events\n        return;\n\n      case 'deleted':\n        await this.onRepoDeleted(event as RepositoryDeletedEvent);\n        return;\n\n      case 'edited':\n        await this.onRepoEdited(event as RepositoryEditedEvent);\n        return;\n\n      // The visibility of a repository was changed to `private`.\n      case 'privatized':\n        // skip these events\n        return;\n\n      // The visibility of a repository was changed to `public`.\n      case 'publicized':\n        // skip these events\n        return;\n\n      case 'renamed':\n        await this.onRepoRenamed(event as RepositoryRenamedEvent);\n        return;\n\n      case 'transferred':\n        await this.onRepoTransferred(event as RepositoryTransferredEvent);\n        return;\n\n      case 'unarchived':\n        await this.onRepoUnarchived(event as RepositoryUnarchivedEvent);\n        return;\n\n      default: // should never be reached\n        this.logger.warn(\n          `Missing implementation for event of topic repository with action ${action}`,\n        );\n    }\n  }\n\n  /**\n   * A repository was archived.\n   *\n   * Removes all entities associated with the repository.\n   *\n   * @param event - The repository archived event.\n   */\n  private async onRepoArchived(event: RepositoryArchivedEvent) {\n    const repository = this.createRepoFromEvent(event);\n    await this.removeEntitiesForRepo(repository);\n    this.logger.debug(\n      `Removed entities for archived repository ${repository.name}`,\n    );\n  }\n\n  /**\n   * A repository was deleted.\n   *\n   * Removes all entities associated with the repository.\n   *\n   * @param event - The repository deleted event.\n   */\n  private async onRepoDeleted(event: RepositoryDeletedEvent) {\n    const repository = this.createRepoFromEvent(event);\n    await this.removeEntitiesForRepo(repository);\n    this.logger.debug(\n      `Removed entities for deleted repository ${repository.name}`,\n    );\n  }\n\n  /**\n   * The topics, default branch, description, or homepage of a repository was changed.\n   *\n   * We are interested in potential topic changes as these can be used as part of the filters.\n   *\n   * Removes all entities associated with the repository if the repository no longer matches the filters.\n   *\n   * @param event - The repository edited event.\n   */\n  private async onRepoEdited(event: RepositoryEditedEvent) {\n    const repository = this.createRepoFromEvent(event);\n\n    const matchingTargets = this.matchesFilters([repository]);\n    if (matchingTargets.length === 0) {\n      await this.removeEntitiesForRepo(repository);\n    }\n    // else: repository is (still) matching the filters, so we don't need to do anything\n  }\n\n  /**\n   * The name of a repository was changed.\n   *\n   * Removes all entities associated with the repository's old name.\n   * Creates new entities for the repository's new name if it still matches the filters.\n   *\n   * @param event - The repository renamed event.\n   */\n  private async onRepoRenamed(event: RepositoryRenamedEvent) {\n    const repository = this.createRepoFromEvent(event);\n    const oldRepoName = event.changes.repository.name.from;\n    const urlParts = repository.url.split('/');\n    urlParts[urlParts.length - 1] = oldRepoName;\n    const oldRepoUrl = urlParts.join('/');\n    const oldRepository: Repository = {\n      ...repository,\n      name: oldRepoName,\n      url: oldRepoUrl,\n    };\n    await this.removeEntitiesForRepo(oldRepository);\n\n    const matchingTargets = this.matchesFilters([repository]);\n    if (matchingTargets.length === 0) {\n      this.logger.debug(\n        `skipping repository renamed event for repository ${repository.name} because it didn't match provider filters`,\n      );\n      return;\n    }\n\n    await this.addEntitiesForRepo(repository);\n  }\n\n  /**\n   * Ownership of the repository was transferred to a user or organization account.\n   * This event is only sent to the account where the ownership is transferred.\n   * To receive the `repository.transferred` event, the new owner account must have the GitHub App installed,\n   * and the App must be subscribed to \"Repository\" events.\n   *\n   * Creates new entities for the repository if it matches the filters.\n   *\n   * @param event - The repository unarchived event.\n   */\n  private async onRepoTransferred(event: RepositoryTransferredEvent) {\n    const repository = this.createRepoFromEvent(event);\n\n    const matchingTargets = this.matchesFilters([repository]);\n    if (matchingTargets.length === 0) {\n      this.logger.debug(\n        `skipping repository transferred event for repository ${repository.name} because it didn't match provider filters`,\n      );\n      return;\n    }\n\n    await this.addEntitiesForRepo(repository);\n  }\n\n  /**\n   * A previously archived repository was unarchived.\n   *\n   * Creates new entities for the repository if it matches the filters.\n   *\n   * @param event - The repository unarchived event.\n   */\n  private async onRepoUnarchived(event: RepositoryUnarchivedEvent) {\n    const repository = this.createRepoFromEvent(event);\n\n    const matchingTargets = this.matchesFilters([repository]);\n    if (matchingTargets.length === 0) {\n      this.logger.debug(\n        `skipping repository unarchived event for repository ${repository.name} because it didn't match provider filters`,\n      );\n      return;\n    }\n\n    await this.addEntitiesForRepo(repository);\n  }\n\n  private async removeEntitiesForRepo(repository: Repository) {\n    const removed = this.toDeferredEntitiesFromRepos([repository]);\n    await this.connection!.applyMutation({\n      type: 'delta',\n      added: [],\n      removed: removed,\n    });\n  }\n\n  private async addEntitiesForRepo(repository: Repository) {\n    if (this.config.validateLocationsExist) {\n      const organization = this.config.organization;\n      const catalogPath = this.config.catalogPath;\n      const client = await this.createGraphqlClient();\n\n      const repositoryFromGithub = await getOrganizationRepository(\n        client,\n        organization,\n        repository.name,\n        catalogPath,\n      ).then(r => (r ? this.createRepoFromGithubResponse(r) : null));\n\n      if (!repositoryFromGithub?.isCatalogInfoFilePresent) {\n        return;\n      }\n    }\n\n    const added = this.toDeferredEntitiesFromRepos([repository]);\n    await this.connection!.applyMutation({\n      type: 'delta',\n      added: added,\n      removed: [],\n    });\n  }\n\n  private createRepoFromEvent(event: RepositoryEvent | PushEvent): Repository {\n    return {\n      // $.repository.url can be a value like\n      // \"https://api.github.com/repos/{org}/{repo}\"\n      // or \"https://github.com/{org}/{repo}\"\n      url: event.repository.html_url,\n      name: event.repository.name,\n      defaultBranchRef: event.repository.default_branch,\n      repositoryTopics: event.repository.topics,\n      isArchived: event.repository.archived,\n      isFork: event.repository.fork,\n      // we can consider this file present because\n      // only the catalog file will be recovered from the commits\n      isCatalogInfoFilePresent: true,\n      visibility: event.repository.visibility,\n    };\n  }\n\n  private createRepoFromGithubResponse(\n    repositoryResponse: RepositoryResponse,\n  ): Repository {\n    return {\n      url: repositoryResponse.url,\n      name: repositoryResponse.name,\n      defaultBranchRef: repositoryResponse.defaultBranchRef?.name,\n      repositoryTopics: repositoryResponse.repositoryTopics.nodes.map(\n        t => t.topic.name,\n      ),\n      isArchived: repositoryResponse.isArchived,\n      isFork: repositoryResponse.isFork,\n      isCatalogInfoFilePresent:\n        repositoryResponse.catalogInfoFile?.__typename === 'Blob' &&\n        repositoryResponse.catalogInfoFile.text !== '',\n      visibility: repositoryResponse.visibility,\n    };\n  }\n\n  private collectDeferredEntitiesFromCommit(\n    repositoryUrl: string,\n    branch: string,\n    commits: Commit[],\n    transformOperation: (commit: Commit) => string[],\n  ): DeferredEntity[] {\n    const catalogFiles = this.collectFilesFromCommit(\n      commits,\n      transformOperation,\n    );\n    return this.toDeferredEntities(\n      catalogFiles.map(\n        filePath => `${repositoryUrl}/blob/${branch}/${filePath}`,\n      ),\n    );\n  }\n\n  private collectFilesFromCommit(\n    commits: Commit[],\n    transformOperation: (commit: Commit) => string[],\n  ): string[] {\n    const catalogFile = this.config.catalogPath.startsWith('/')\n      ? this.config.catalogPath.substring(1)\n      : this.config.catalogPath;\n\n    const matcher = new Minimatch(catalogFile);\n    return commits\n      .map(transformOperation)\n      .flat()\n      .filter(file => matcher.match(file));\n  }\n\n  private toDeferredEntities(targets: string[]): DeferredEntity[] {\n    return targets\n      .map(target => {\n        const location = GithubEntityProvider.toLocationSpec(target);\n\n        return locationSpecToLocationEntity({ location });\n      })\n      .map(entity => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: entity,\n        };\n      });\n  }\n\n  private toDeferredEntitiesFromRepos(\n    repositories: Repository[],\n  ): DeferredEntity[] {\n    return repositories\n      .map(repository => this.createLocationUrl(repository))\n      .map(GithubEntityProvider.toLocationSpec)\n      .map(location => {\n        return {\n          locationKey: this.getProviderName(),\n          entity: locationSpecToLocationEntity({ location }),\n        };\n      });\n  }\n}\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  org: string;\n  repoSearchPath: RegExp;\n  catalogPath: string;\n  branch: string;\n  host: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.slice(1).split('/');\n\n  // /backstage/techdocs-*/blob/master/catalog-info.yaml\n  // can also be\n  // /backstage\n  if (path.length > 2 && path[0].length && path[1].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp(decodeURIComponent(path[1])),\n      catalogPath: `/${decodeURIComponent(path.slice(4).join('/'))}`,\n      branch: decodeURIComponent(path[3]),\n      host: url.host,\n    };\n  } else if (path.length === 1 && path[0].length) {\n    return {\n      org: decodeURIComponent(path[0]),\n      repoSearchPath: escapeRegExp('*'),\n      catalogPath: '/catalog-info.yaml',\n      branch: '-',\n      host: url.host,\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n\nexport function escapeRegExp(str: string): RegExp {\n  return new RegExp(`^${str.replace(/\\*/g, '.*')}$`);\n}\n"],"names":["ScmIntegrations","readProviderConfigs","integration","SingleInstanceGithubCredentialsProvider","uuid","graphql","getOrganizationRepositories","satisfiesTopicFilter","satisfiesForkFilter","satisfiesVisibilityFilter","getOrganizationRepository","Minimatch","locationSpecToLocationEntity"],"mappings":"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"}