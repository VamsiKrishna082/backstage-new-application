{"version":3,"file":"GithubMultiOrgEntityProvider.cjs.js","sources":["../../src/providers/GithubMultiOrgEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  DEFAULT_NAMESPACE,\n  Entity,\n  isGroupEntity,\n  isUserEntity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubAppCredentialsMux,\n  GithubCredentialsProvider,\n  GithubIntegrationConfig,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  DeferredEntity,\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { EventParams, EventsService } from '@backstage/plugin-events-node';\nimport { graphql } from '@octokit/graphql';\nimport {\n  InstallationCreatedEvent,\n  InstallationEvent,\n  MembershipEvent,\n  OrganizationEvent,\n  OrganizationMemberAddedEvent,\n  OrganizationMemberRemovedEvent,\n  TeamCreatedEvent,\n  TeamDeletedEvent,\n  TeamEditedEvent,\n  TeamEvent,\n} from '@octokit/webhooks-types';\nimport { merge } from 'lodash';\nimport * as uuid from 'uuid';\n\nimport {\n  assignGroupsToUsers,\n  buildOrgHierarchy,\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  getOrganizationTeams,\n  getOrganizationUsers,\n  GithubTeam,\n  TeamTransformer,\n  TransformerContext,\n  UserTransformer,\n} from '../lib';\nimport {\n  ANNOTATION_GITHUB_TEAM_SLUG,\n  ANNOTATION_GITHUB_USER_LOGIN,\n} from '../lib/annotation';\nimport {\n  getOrganizationsFromUser,\n  getOrganizationTeam,\n  getOrganizationTeamsFromUsers,\n} from '../lib/github';\nimport { splitTeamSlug } from '../lib/util';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\nimport {\n  LoggerService,\n  SchedulerServiceTaskRunner,\n} from '@backstage/backend-plugin-api';\n\nconst EVENT_TOPICS = [\n  'github.installation',\n  'github.membership',\n  'github.organization',\n  'github.team',\n];\n\n/**\n * Options for {@link GithubMultiOrgEntityProvider}.\n *\n * @public\n */\nexport interface GithubMultiOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The target that this provider should consume.\n   *\n   * @example \"https://mycompany.github.com\"\n   */\n  githubUrl: string;\n\n  /**\n   * The list of the GitHub orgs to consume. By default, it will consume all accessible\n   * orgs on the given GitHub instance (support for GitHub App integration only).\n   */\n  orgs?: string[];\n\n  /**\n   * Passing the optional EventsService enables event-based delta updates.\n   */\n  events?: EventsService;\n\n  /**\n   * The refresh schedule to use.\n   *\n   * @defaultValue \"manual\"\n   * @remarks\n   *\n   * If you pass in 'manual', you are responsible for calling the `read` method\n   * manually at some interval.\n   *\n   * But more commonly you will pass in the result of\n   * {@link @backstage/backend-plugin-api#SchedulerService.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule?: 'manual' | SchedulerServiceTaskRunner;\n\n  /**\n   * The logger to use.\n   */\n  logger: LoggerService;\n\n  /**\n   * Optionally supply a custom credentials provider, replacing the default one.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n\n  /**\n   * Use the default namespace for groups. By default, groups will be namespaced according to their GitHub org.\n   *\n   * @remarks\n   *\n   * If set to true, groups with the same name across different orgs will be considered the same group.\n   */\n  alwaysUseDefaultNamespace?: boolean;\n\n  /**\n   * Optionally include a user transformer for transforming from GitHub users to User Entities\n   */\n  userTransformer?: UserTransformer;\n\n  /**\n   * Optionally include a team transformer for transforming from GitHub teams to Group Entities.\n   * By default, groups will be namespaced according to their GitHub org.\n   */\n  teamTransformer?: TeamTransformer;\n}\n\ntype CreateDeltaOperation = (entities: Entity[]) => {\n  added: DeferredEntity[];\n  removed: DeferredEntity[];\n};\n\n/**\n * Ingests org data (users and groups) from GitHub.\n *\n * @public\n */\nexport class GithubMultiOrgEntityProvider implements EntityProvider {\n  private connection?: EntityProviderConnection;\n  private scheduleFn?: () => Promise<void>;\n\n  static fromConfig(\n    config: Config,\n    options: GithubMultiOrgEntityProviderOptions,\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const gitHubConfig = integrations.github.byUrl(options.githubUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub integration that matches ${options.githubUrl}. Please add a configuration entry for it under integrations.github.`,\n      );\n    }\n\n    const logger = options.logger.child({\n      target: options.githubUrl,\n    });\n\n    const provider = new GithubMultiOrgEntityProvider({\n      id: options.id,\n      gitHubConfig,\n      githubCredentialsProvider:\n        options.githubCredentialsProvider ||\n        DefaultGithubCredentialsProvider.fromIntegrations(integrations),\n      githubUrl: new URL(options.githubUrl).origin,\n      logger,\n      orgs: options.orgs,\n      userTransformer: options.userTransformer,\n      teamTransformer: options.teamTransformer,\n      events: options.events,\n      alwaysUseDefaultNamespace: options.alwaysUseDefaultNamespace,\n    });\n\n    provider.schedule(options.schedule);\n\n    return provider;\n  }\n\n  constructor(\n    private readonly options: {\n      events?: EventsService;\n      id: string;\n      gitHubConfig: GithubIntegrationConfig;\n      githubCredentialsProvider: GithubCredentialsProvider;\n      githubUrl: string;\n      logger: LoggerService;\n      orgs?: string[];\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n      alwaysUseDefaultNamespace?: boolean;\n    },\n  ) {}\n\n  /** {@inheritdoc @backstage/plugin-catalog-node#EntityProvider.getProviderName} */\n  getProviderName() {\n    return `GithubMultiOrgEntityProvider:${this.options.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-node#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.options.events?.subscribe({\n      id: this.getProviderName(),\n      topics: EVENT_TOPICS,\n      onEvent: params => this.onEvent(params),\n    });\n    await this.scheduleFn?.();\n  }\n\n  /**\n   * Runs one single complete ingestion. This is only necessary if you use\n   * manual scheduling.\n   */\n  async read(options?: { logger?: LoggerService }) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const { markReadComplete } = trackProgress(logger);\n\n    const allUsersMap = new Map();\n    const allTeams: Entity[] = [];\n\n    const orgsToProcess = this.options.orgs?.length\n      ? this.options.orgs\n      : await this.getAllOrgs(this.options.gitHubConfig);\n\n    for (const org of orgsToProcess) {\n      const { headers, type: tokenType } =\n        await this.options.githubCredentialsProvider.getCredentials({\n          url: `${this.options.githubUrl}/${org}`,\n        });\n      const client = graphql.defaults({\n        baseUrl: this.options.gitHubConfig.apiBaseUrl,\n        headers,\n      });\n\n      logger.info(`Reading GitHub users and teams for org: ${org}`);\n\n      const { users } = await getOrganizationUsers(\n        client,\n        org,\n        tokenType,\n        this.options.userTransformer,\n      );\n\n      const { teams } = await getOrganizationTeams(\n        client,\n        org,\n        this.defaultMultiOrgTeamTransformer.bind(this),\n      );\n\n      // Grab current users from `allUsersMap` if they already exist in our\n      // pending users so we can append to their group membership relations\n      const pendingUsers = users.map(u => {\n        const userRef = stringifyEntityRef(u);\n        if (!allUsersMap.has(userRef)) {\n          allUsersMap.set(userRef, u);\n        }\n\n        return allUsersMap.get(userRef);\n      });\n\n      if (areGroupEntities(teams)) {\n        buildOrgHierarchy(teams);\n        if (areUserEntities(pendingUsers)) {\n          assignGroupsToUsers(pendingUsers, teams);\n        }\n      }\n\n      allTeams.push(...teams);\n    }\n\n    const allUsers = Array.from(allUsersMap.values());\n\n    const { markCommitComplete } = markReadComplete({ allUsers, allTeams });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...allUsers, ...allTeams].map(entity => ({\n        locationKey: `github-multi-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          entity,\n        ),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  private async onEvent(params: EventParams): Promise<void> {\n    const { logger } = this.options;\n    logger.debug(`Received event from ${params.topic}`);\n\n    const orgs = this.options.orgs?.length\n      ? this.options.orgs\n      : await this.getAllOrgs(this.options.gitHubConfig);\n\n    const eventPayload = params.eventPayload as\n      | InstallationEvent\n      | OrganizationEvent\n      | MembershipEvent\n      | TeamEvent;\n\n    if (\n      !orgs.includes(\n        (eventPayload as InstallationEvent).installation?.account?.login,\n      ) &&\n      !orgs.includes(\n        (eventPayload as OrganizationEvent | MembershipEvent | TeamEvent)\n          .organization?.login,\n      )\n    ) {\n      return;\n    }\n\n    // https://docs.github.com/webhooks-and-events/webhooks/webhook-events-and-payloads#installation\n    if (\n      params.topic.includes('installation') &&\n      eventPayload.action === 'created'\n    ) {\n      // We can only respond to installation.created events to add new users/groups since a\n      // installation.deleted event won't provide us info on what user/groups we should remove and\n      // we can't query the uninstalled org since we will no longer have access. This will need to be\n      // eventually resolved via occasional full mutation runs by calling read()\n      await this.onInstallationChange(\n        eventPayload as InstallationCreatedEvent,\n        orgs,\n      );\n    }\n\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization\n    if (\n      params.topic.includes('organization') &&\n      (eventPayload.action === 'member_added' ||\n        eventPayload.action === 'member_removed')\n    ) {\n      await this.onMemberChangeInOrganization(eventPayload, orgs);\n    }\n\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team\n    if (params.topic.includes('team')) {\n      if (\n        eventPayload.action === 'created' ||\n        eventPayload.action === 'deleted'\n      ) {\n        await this.onTeamChangeInOrganization(\n          eventPayload as TeamCreatedEvent | TeamDeletedEvent,\n        );\n      } else if (eventPayload.action === 'edited') {\n        await this.onTeamEditedInOrganization(\n          eventPayload as TeamEditedEvent,\n          orgs,\n        );\n      }\n    }\n\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (params.topic.includes('membership')) {\n      await this.onMembershipChangedInTeam(\n        eventPayload as MembershipEvent,\n        orgs,\n      );\n    }\n\n    return;\n  }\n\n  private async onInstallationChange(\n    event: InstallationCreatedEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const org = event.installation.account.login;\n    const { headers, type: tokenType } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    const { teams } = await getOrganizationTeams(\n      client,\n      org,\n      this.defaultMultiOrgTeamTransformer.bind(this),\n    );\n\n    if (users.length) {\n      // Fetch group memberships of users in case they already exist and\n      // have memberships in groups from other applicable orgs\n      for (const userOrg of applicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams: userTeams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          users.map(\n            u =>\n              u.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n              u.metadata.name,\n          ),\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (areGroupEntities(userTeams) && areUserEntities(users)) {\n          assignGroupsToUsers(users, userTeams);\n        }\n      }\n    }\n\n    const { added, removed } = this.createAddEntitiesOperation([\n      ...users,\n      ...teams,\n    ]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMemberChangeInOrganization(\n    event: OrganizationMemberAddedEvent | OrganizationMemberRemovedEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const userTransformer =\n      this.options.userTransformer || defaultUserTransformer;\n    const { name, avatar_url: avatarUrl, email, login } = event.membership.user;\n    const org = event.organization.login;\n    const { headers } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { orgs } = await getOrganizationsFromUser(client, login);\n    const userApplicableOrgs = orgs.filter(o => applicableOrgs.includes(o));\n\n    let updateMemberships: boolean;\n    let createDeltaOperation: CreateDeltaOperation;\n    if (event.action === 'member_removed') {\n      if (userApplicableOrgs.length) {\n        // If the user is still associated with another applicable org then we don't want to remove\n        // them, just update the entity to remove any potential group memberships from the old org\n        createDeltaOperation = this.createAddEntitiesOperation.bind(this);\n        updateMemberships = true;\n      } else {\n        // User is no longer part of any applicable orgs so we can remove it,\n        // no need to take memberships into account\n        createDeltaOperation = this.createRemoveEntitiesOperation.bind(this);\n        updateMemberships = false;\n      }\n    } else {\n      // We're not sure if this user was already added as part of another applicable org\n      // so grab the latest memberships (potentially from teams of other orgs) to ensure\n      // we're not accidentally omitting them\n      createDeltaOperation = this.createAddEntitiesOperation.bind(this);\n      updateMemberships = true;\n    }\n\n    const user = await userTransformer(\n      {\n        name,\n        avatarUrl,\n        login,\n        email: email ?? undefined,\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    );\n\n    if (!user) {\n      return;\n    }\n\n    if (updateMemberships) {\n      for (const userOrg of userApplicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          [login],\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (isUserEntity(user) && areGroupEntities(teams)) {\n          assignGroupsToUsers([user], teams);\n        }\n      }\n    }\n\n    const { added, removed } = createDeltaOperation([user]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onTeamChangeInOrganization(\n    event: TeamCreatedEvent | TeamDeletedEvent,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const org = event.organization.login;\n    const { headers } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { name, html_url: url, description, slug } = event.team;\n    const group = (await this.defaultMultiOrgTeamTransformer(\n      {\n        name,\n        slug,\n        editTeamUrl: `${url}/edit`,\n        combinedSlug: `${org}/${slug}`,\n        description: description ?? undefined,\n        parentTeam: event.team?.parent?.slug\n          ? ({ slug: event.team.parent.slug } as GithubTeam)\n          : undefined,\n        // entity will be removed or is new\n        members: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    const createDeltaOperation =\n      event.action === 'created'\n        ? this.createAddEntitiesOperation.bind(this)\n        : this.createRemoveEntitiesOperation.bind(this);\n    const { added, removed } = createDeltaOperation([group]);\n\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onTeamEditedInOrganization(\n    event: TeamEditedEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const org = event.organization.login;\n    const { headers, type: tokenType } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const teamSlug = event.team.slug;\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.defaultMultiOrgTeamTransformer.bind(this),\n    );\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    const usersFromChangedGroup = isGroupEntity(team)\n      ? team.spec.members?.map(m =>\n          stringifyEntityRef(parseEntityRef(m, { defaultKind: 'user' })),\n        ) || []\n      : [];\n    const usersToRebuild = users.filter(u =>\n      usersFromChangedGroup.includes(stringifyEntityRef(u)),\n    );\n\n    if (usersToRebuild.length) {\n      // Update memberships of associated members of this group in case the group entity ref changed\n      for (const userOrg of applicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          usersToRebuild.map(\n            u =>\n              u.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n              u.metadata.name,\n          ),\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (areGroupEntities(teams) && areUserEntities(usersToRebuild)) {\n          assignGroupsToUsers(usersToRebuild, teams);\n        }\n      }\n    }\n\n    const oldName = event.changes.name?.from || '';\n    const oldSlug = oldName.toLowerCase().replaceAll(/\\s/gi, '-');\n    const oldGroup = (await this.defaultMultiOrgTeamTransformer(\n      {\n        name: event.changes.name?.from,\n        slug: oldSlug,\n        combinedSlug: `${org}/${oldSlug}`,\n        description: event.changes.description?.from,\n        parentTeam: event.team?.parent?.slug\n          ? ({ slug: event.team.parent.slug } as GithubTeam)\n          : undefined,\n        // entity will be removed\n        members: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    // Remove the old group entity in case the entity ref is now different\n    const { removed } = this.createRemoveEntitiesOperation([oldGroup]);\n    const { added } = this.createAddEntitiesOperation([\n      ...usersToRebuild,\n      team,\n    ]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMembershipChangedInTeam(\n    event: MembershipEvent,\n    applicableOrgs: string[],\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    // The docs are saying I will receive the slug for the removed event,\n    // but the types don't reflect that,\n    // so I will just check to be sure the slug is there\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (!('slug' in event.team)) {\n      return;\n    }\n\n    const org = event.organization.login;\n    const { headers } =\n      await this.options.githubCredentialsProvider.getCredentials({\n        url: `${this.options.githubUrl}/${org}`,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const teamSlug = event.team.slug;\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.defaultMultiOrgTeamTransformer.bind(this),\n    );\n\n    const userTransformer =\n      this.options.userTransformer || defaultUserTransformer;\n    const { name, avatar_url: avatarUrl, email, login } = event.member;\n    const user = await userTransformer(\n      {\n        name,\n        avatarUrl,\n        login,\n        email: email ?? undefined,\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    );\n\n    const mutationEntities = [team];\n\n    if (user && isUserEntity(user)) {\n      const { orgs } = await getOrganizationsFromUser(client, login);\n      const userApplicableOrgs = orgs.filter(o => applicableOrgs.includes(o));\n      for (const userOrg of userApplicableOrgs) {\n        const { headers: orgHeaders } =\n          await this.options.githubCredentialsProvider.getCredentials({\n            url: `${this.options.githubUrl}/${userOrg}`,\n          });\n        const orgClient = graphql.defaults({\n          baseUrl: this.options.gitHubConfig.apiBaseUrl,\n          headers: orgHeaders,\n        });\n\n        const { teams } = await getOrganizationTeamsFromUsers(\n          orgClient,\n          userOrg,\n          [login],\n          this.defaultMultiOrgTeamTransformer.bind(this),\n        );\n\n        if (areGroupEntities(teams)) {\n          assignGroupsToUsers([user], teams);\n        }\n      }\n\n      mutationEntities.push(user);\n    }\n\n    const { added, removed } =\n      this.createAddEntitiesOperation(mutationEntities);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private schedule(schedule: GithubMultiOrgEntityProviderOptions['schedule']) {\n    if (!schedule || schedule === 'manual') {\n      return;\n    }\n\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await schedule.run({\n        id,\n        fn: async () => {\n          const logger = this.options.logger.child({\n            class: GithubMultiOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.read({ logger });\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n\n  private async defaultMultiOrgTeamTransformer(\n    team: GithubTeam,\n    ctx: TransformerContext,\n  ): Promise<Entity | undefined> {\n    if (this.options.teamTransformer) {\n      return await this.options.teamTransformer(team, ctx);\n    }\n\n    const result = await defaultOrganizationTeamTransformer(team, ctx);\n\n    if (result && result.spec) {\n      if (!this.options.alwaysUseDefaultNamespace) {\n        result.metadata.namespace = ctx.org.toLocaleLowerCase('en-US');\n      }\n\n      // Group `spec.members` inherits the namespace of it's group so need to explicitly specify refs here\n      result.spec.members = team.members.map(\n        user => `${DEFAULT_NAMESPACE}/${user.login}`,\n      );\n    }\n\n    return result;\n  }\n\n  // Note: Does not support usage of PATs\n  private async getAllOrgs(\n    gitHubConfig: GithubIntegrationConfig,\n  ): Promise<string[]> {\n    const githubAppMux = new GithubAppCredentialsMux(gitHubConfig);\n    const installs = await githubAppMux.getAllInstallations();\n\n    return installs\n      .map(install =>\n        install.target_type === 'Organization' &&\n        install.account &&\n        'login' in install.account &&\n        install.account.login\n          ? install.account.login\n          : undefined,\n      )\n      .filter(Boolean) as string[];\n  }\n\n  private createAddEntitiesOperation(entities: Entity[]) {\n    return {\n      removed: [],\n      added: entities.map(entity => ({\n        locationKey: `github-multi-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          entity,\n        ),\n      })),\n    };\n  }\n\n  private createRemoveEntitiesOperation(entities: Entity[]) {\n    return {\n      added: [],\n      removed: entities.map(entity => ({\n        locationKey: `github-multi-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          entity,\n        ),\n      })),\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: LoggerService) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading GitHub users and groups');\n\n  function markReadComplete(read: {\n    allUsers: unknown[];\n    allTeams: unknown[];\n  }) {\n    summary = `${read.allUsers.length} GitHub users and ${read.allTeams.length} GitHub groups`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n\n// Makes sure that emitted entities have a proper location\nexport function withLocations(baseUrl: string, entity: Entity): Entity {\n  const login =\n    entity.metadata.annotations?.[ANNOTATION_GITHUB_USER_LOGIN] ||\n    entity.metadata.name;\n\n  let org = entity.metadata.namespace;\n  let team = entity.metadata.name;\n  const slug = entity.metadata.annotations?.[ANNOTATION_GITHUB_TEAM_SLUG];\n  if (slug) {\n    const [slugOrg, slugTeam] = splitTeamSlug(slug);\n    org = slugOrg;\n    team = slugTeam;\n  }\n\n  const location =\n    entity.kind === 'Group'\n      ? `url:${baseUrl}/orgs/${org}/teams/${team}`\n      : `url:${baseUrl}/${login}`;\n  return merge(\n    {\n      metadata: {\n        annotations: {\n          [ANNOTATION_LOCATION]: location,\n          [ANNOTATION_ORIGIN_LOCATION]: location,\n        },\n      },\n    },\n    entity,\n  ) as Entity;\n}\n"],"names":["ScmIntegrations","DefaultGithubCredentialsProvider","org","graphql","getOrganizationUsers","getOrganizationTeams","stringifyEntityRef","areGroupEntities","buildOrgHierarchy","areUserEntities","assignGroupsToUsers","getOrganizationTeamsFromUsers","ANNOTATION_GITHUB_USER_LOGIN","defaultUserTransformer","getOrganizationsFromUser","isUserEntity","getOrganizationTeam","isGroupEntity","parseEntityRef","uuid","defaultOrganizationTeamTransformer","DEFAULT_NAMESPACE","GithubAppCredentialsMux","ANNOTATION_GITHUB_TEAM_SLUG","splitTeamSlug","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION"],"mappings":"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"}