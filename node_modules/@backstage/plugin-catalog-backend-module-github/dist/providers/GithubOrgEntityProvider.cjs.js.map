{"version":3,"file":"GithubOrgEntityProvider.cjs.js","sources":["../../src/providers/GithubOrgEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  SchedulerServiceTaskRunner,\n} from '@backstage/backend-plugin-api';\nimport { Entity, isGroupEntity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubIntegrationConfig,\n  ScmIntegrations,\n  SingleInstanceGithubCredentialsProvider,\n} from '@backstage/integration';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { EventParams, EventsService } from '@backstage/plugin-events-node';\nimport { graphql } from '@octokit/graphql';\nimport {\n  MembershipEvent,\n  OrganizationEvent,\n  OrganizationMemberAddedEvent,\n  OrganizationMemberRemovedEvent,\n  TeamEditedEvent,\n  TeamEvent,\n} from '@octokit/webhooks-types';\nimport * as uuid from 'uuid';\nimport {\n  defaultOrganizationTeamTransformer,\n  defaultUserTransformer,\n  TeamTransformer,\n  UserTransformer,\n} from '../lib/defaultTransformers';\nimport {\n  createAddEntitiesOperation,\n  createGraphqlClient,\n  createRemoveEntitiesOperation,\n  createReplaceEntitiesOperation,\n  DeferredEntitiesBuilder,\n  getOrganizationTeam,\n  getOrganizationTeams,\n  getOrganizationTeamsFromUsers,\n  getOrganizationUsers,\n  GithubTeam,\n} from '../lib/github';\nimport { areGroupEntities, areUserEntities } from '../lib/guards';\nimport { assignGroupsToUsers, buildOrgHierarchy } from '../lib/org';\nimport { parseGithubOrgUrl } from '../lib/util';\nimport { withLocations } from '../lib/withLocations';\n\nconst EVENT_TOPICS = [\n  'github.membership',\n  'github.organization',\n  'github.team',\n];\n\n/**\n * Options for {@link GithubOrgEntityProvider}.\n *\n * @public\n */\nexport interface GithubOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The target that this provider should consume.\n   *\n   * @example \"https://github.com/backstage\"\n   */\n  orgUrl: string;\n\n  /**\n   * Passing the optional EventsService enables event-based delta updates.\n   */\n  events?: EventsService;\n\n  /**\n   * The refresh schedule to use.\n   *\n   * @defaultValue \"manual\"\n   * @remarks\n   *\n   * If you pass in 'manual', you are responsible for calling the `read` method\n   * manually at some interval.\n   *\n   * But more commonly you will pass in the result of\n   * {@link @backstage/backend-plugin-api#SchedulerService.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule?: 'manual' | SchedulerServiceTaskRunner;\n\n  /**\n   * The logger to use.\n   */\n  logger: LoggerService;\n\n  /**\n   * Optionally supply a custom credentials provider, replacing the default one.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n\n  /**\n   * Optionally include a user transformer for transforming from GitHub users to User Entities\n   */\n  userTransformer?: UserTransformer;\n\n  /**\n   * Optionally include a team transformer for transforming from GitHub teams to Group Entities\n   */\n  teamTransformer?: TeamTransformer;\n}\n\n/**\n * Ingests org data (users and groups) from GitHub.\n *\n * @public\n */\nexport class GithubOrgEntityProvider implements EntityProvider {\n  private readonly credentialsProvider: GithubCredentialsProvider;\n  private connection?: EntityProviderConnection;\n  private scheduleFn?: () => Promise<void>;\n\n  static fromConfig(config: Config, options: GithubOrgEntityProviderOptions) {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const gitHubConfig = integrations.github.byUrl(options.orgUrl)?.config;\n\n    if (!gitHubConfig) {\n      throw new Error(\n        `There is no GitHub Org provider that matches ${options.orgUrl}. Please add a configuration for an integration.`,\n      );\n    }\n\n    const logger = options.logger.child({\n      target: options.orgUrl,\n    });\n\n    const provider = new GithubOrgEntityProvider({\n      id: options.id,\n      orgUrl: options.orgUrl,\n      logger,\n      gitHubConfig,\n      githubCredentialsProvider:\n        options.githubCredentialsProvider ||\n        DefaultGithubCredentialsProvider.fromIntegrations(integrations),\n      userTransformer: options.userTransformer,\n      teamTransformer: options.teamTransformer,\n      events: options.events,\n    });\n\n    provider.schedule(options.schedule);\n\n    return provider;\n  }\n\n  constructor(\n    private options: {\n      events?: EventsService;\n      id: string;\n      orgUrl: string;\n      gitHubConfig: GithubIntegrationConfig;\n      logger: LoggerService;\n      githubCredentialsProvider?: GithubCredentialsProvider;\n      userTransformer?: UserTransformer;\n      teamTransformer?: TeamTransformer;\n    },\n  ) {\n    this.credentialsProvider =\n      options.githubCredentialsProvider ||\n      SingleInstanceGithubCredentialsProvider.create(this.options.gitHubConfig);\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-node#EntityProvider.getProviderName} */\n  getProviderName() {\n    return `GithubOrgEntityProvider:${this.options.id}`;\n  }\n\n  /** {@inheritdoc @backstage/plugin-catalog-node#EntityProvider.connect} */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.options.events?.subscribe({\n      id: this.getProviderName(),\n      topics: EVENT_TOPICS,\n      onEvent: params => this.onEvent(params),\n    });\n    await this.scheduleFn?.();\n  }\n\n  /**\n   * Runs one single complete ingestion. This is only necessary if you use\n   * manual scheduling.\n   */\n  async read(options?: { logger?: LoggerService }) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const { markReadComplete } = trackProgress(logger);\n\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n\n    const client = createGraphqlClient({\n      headers,\n      baseUrl: this.options.gitHubConfig.apiBaseUrl!,\n      logger,\n    });\n\n    const { org } = parseGithubOrgUrl(this.options.orgUrl);\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n    const { teams } = await getOrganizationTeams(\n      client,\n      org,\n      this.options.teamTransformer,\n    );\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(users)) {\n        assignGroupsToUsers(users, teams);\n      }\n    }\n\n    const { markCommitComplete } = markReadComplete({ users, teams });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...users, ...teams].map(entity => ({\n        locationKey: `github-org-provider:${this.options.id}`,\n        entity: withLocations(\n          `https://${this.options.gitHubConfig.host}`,\n          org,\n          entity,\n        ),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  private async onEvent(params: EventParams): Promise<void> {\n    const { logger } = this.options;\n    logger.debug(`Received event from ${params.topic}`);\n\n    const addEntitiesOperation = createAddEntitiesOperation(\n      this.options.id,\n      this.options.gitHubConfig.host,\n    );\n    const removeEntitiesOperation = createRemoveEntitiesOperation(\n      this.options.id,\n      this.options.gitHubConfig.host,\n    );\n\n    const replaceEntitiesOperation = createReplaceEntitiesOperation(\n      this.options.id,\n      this.options.gitHubConfig.host,\n    );\n\n    // handle change users in the org\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#organization\n    if (params.topic.includes('organization')) {\n      const orgEvent = params.eventPayload as OrganizationEvent;\n\n      if (\n        orgEvent.action === 'member_added' ||\n        orgEvent.action === 'member_removed'\n      ) {\n        const createDeltaOperation =\n          orgEvent.action === 'member_added'\n            ? addEntitiesOperation\n            : removeEntitiesOperation;\n        await this.onMemberChangeInOrganization(orgEvent, createDeltaOperation);\n      }\n    }\n\n    // handle change teams in the org\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#team\n    if (params.topic.includes('team')) {\n      const teamEvent = params.eventPayload as TeamEvent;\n      if (teamEvent.action === 'created' || teamEvent.action === 'deleted') {\n        const createDeltaOperation =\n          teamEvent.action === 'created'\n            ? addEntitiesOperation\n            : removeEntitiesOperation;\n        await this.onTeamChangeInOrganization(teamEvent, createDeltaOperation);\n      } else if (teamEvent.action === 'edited') {\n        await this.onTeamEditedInOrganization(\n          teamEvent,\n          replaceEntitiesOperation,\n        );\n      }\n    }\n\n    // handle change membership in the org\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (params.topic.includes('membership')) {\n      const membershipEvent = params.eventPayload as MembershipEvent;\n      this.onMembershipChangedInOrganization(\n        membershipEvent,\n        replaceEntitiesOperation,\n      );\n    }\n\n    return;\n  }\n\n  private async onTeamEditedInOrganization(\n    event: TeamEditedEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const teamSlug = event.team.slug;\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { org } = parseGithubOrgUrl(this.options.orgUrl);\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.options.teamTransformer,\n    );\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    if (!isGroupEntity(team)) {\n      return;\n    }\n\n    const usersFromChangedGroup = team.spec.members || [];\n    const usersToRebuild = users.filter(u =>\n      usersFromChangedGroup.includes(u.metadata.name),\n    );\n\n    const { teams } = await getOrganizationTeamsFromUsers(\n      client,\n      org,\n      usersToRebuild.map(u => u.metadata.name),\n      this.options.teamTransformer,\n    );\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(usersToRebuild)) {\n        assignGroupsToUsers(usersToRebuild, teams);\n      }\n    }\n\n    const oldName = event.changes.name?.from || event.team.name;\n    const oldSlug = oldName.toLowerCase().replaceAll(/\\s/gi, '-');\n\n    const oldDescription =\n      event.changes.description?.from || event.team.description;\n    const oldDescriptionSlug = oldDescription\n      ?.toLowerCase()\n      .replaceAll(/\\s/gi, '-');\n\n    const { removed } = createDeltaOperation(org, [\n      {\n        ...team,\n        metadata: {\n          name: oldSlug,\n          description: oldDescriptionSlug,\n        },\n      },\n    ]);\n    const { added } = createDeltaOperation(org, [...usersToRebuild, ...teams]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMembershipChangedInOrganization(\n    event: MembershipEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    // The docs are saying I will receive the slug for the removed event,\n    // but the types don't reflect that,\n    // so I will just check to be sure the slug is there\n    // https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership\n    if (!('slug' in event.team)) {\n      return;\n    }\n\n    const teamSlug = event.team.slug;\n    const userLogin = event.member.login;\n    const { headers, type: tokenType } =\n      await this.credentialsProvider.getCredentials({\n        url: this.options.orgUrl,\n      });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const { org } = parseGithubOrgUrl(this.options.orgUrl);\n    const { team } = await getOrganizationTeam(\n      client,\n      org,\n      teamSlug,\n      this.options.teamTransformer,\n    );\n\n    const { users } = await getOrganizationUsers(\n      client,\n      org,\n      tokenType,\n      this.options.userTransformer,\n    );\n\n    const usersToRebuild = users.filter(u => u.metadata.name === userLogin);\n\n    const { teams } = await getOrganizationTeamsFromUsers(\n      client,\n      org,\n      [userLogin],\n      this.options.teamTransformer,\n    );\n\n    // we include group because the removed event need to update the old group too\n    if (!teams.some(t => t.metadata.name === team.metadata.name)) {\n      teams.push(team);\n    }\n\n    if (areGroupEntities(teams)) {\n      buildOrgHierarchy(teams);\n      if (areUserEntities(usersToRebuild)) {\n        assignGroupsToUsers(usersToRebuild, teams);\n      }\n    }\n\n    const { added, removed } = createDeltaOperation(org, [\n      ...usersToRebuild,\n      ...teams,\n    ]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onTeamChangeInOrganization(\n    event: TeamEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const organizationTeamTransformer =\n      this.options.teamTransformer || defaultOrganizationTeamTransformer;\n    const { name, html_url: url, description, slug } = event.team;\n    const org = event.organization.login;\n    const { headers } = await this.credentialsProvider.getCredentials({\n      url: this.options.orgUrl,\n    });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const group = (await organizationTeamTransformer(\n      {\n        name,\n        slug,\n        editTeamUrl: `${url}/edit`,\n        combinedSlug: `${org}/${slug}`,\n        description: description || undefined,\n        parentTeam: event.team?.parent?.slug\n          ? ({ slug: event.team.parent.slug } as GithubTeam)\n          : undefined,\n        // entity will be removed\n        members: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    const { added, removed } = createDeltaOperation(org, [group]);\n\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private async onMemberChangeInOrganization(\n    event: OrganizationMemberAddedEvent | OrganizationMemberRemovedEvent,\n    createDeltaOperation: DeferredEntitiesBuilder,\n  ) {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    const userTransformer =\n      this.options.userTransformer || defaultUserTransformer;\n    const { name, avatar_url: avatarUrl, email, login } = event.membership.user;\n    const org = event.organization.login;\n    const { headers } = await this.credentialsProvider.getCredentials({\n      url: this.options.orgUrl,\n    });\n    const client = graphql.defaults({\n      baseUrl: this.options.gitHubConfig.apiBaseUrl,\n      headers,\n    });\n\n    const user = (await userTransformer(\n      {\n        name,\n        avatarUrl,\n        login,\n        email: email || undefined,\n        // we don't have this information in the event, so the refresh will handle that for us\n        organizationVerifiedDomainEmails: [],\n      },\n      {\n        org,\n        client,\n        query: '',\n      },\n    )) as Entity;\n\n    const { added, removed } = createDeltaOperation(org, [user]);\n    await this.connection.applyMutation({\n      type: 'delta',\n      removed,\n      added,\n    });\n  }\n\n  private schedule(schedule: GithubOrgEntityProviderOptions['schedule']) {\n    if (!schedule || schedule === 'manual') {\n      return;\n    }\n\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await schedule.run({\n        id,\n        fn: async () => {\n          const logger = this.options.logger.child({\n            class: GithubOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: uuid.v4(),\n          });\n\n          try {\n            await this.read({ logger });\n          } catch (error) {\n            logger.error(\n              `${this.getProviderName()} refresh failed, ${error}`,\n              error,\n            );\n          }\n        },\n      });\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: LoggerService) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading GitHub users and teams');\n\n  function markReadComplete(read: { users: unknown[]; teams: unknown[] }) {\n    summary = `${read.users.length} GitHub users and ${read.teams.length} GitHub teams`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n"],"names":["SingleInstanceGithubCredentialsProvider","ScmIntegrations","DefaultGithubCredentialsProvider","createGraphqlClient","org","parseGithubOrgUrl","getOrganizationUsers","getOrganizationTeams","areGroupEntities","buildOrgHierarchy","areUserEntities","assignGroupsToUsers","withLocations","createAddEntitiesOperation","createRemoveEntitiesOperation","createReplaceEntitiesOperation","graphql","getOrganizationTeam","isGroupEntity","getOrganizationTeamsFromUsers","defaultOrganizationTeamTransformer","defaultUserTransformer","uuid"],"mappings":"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"}