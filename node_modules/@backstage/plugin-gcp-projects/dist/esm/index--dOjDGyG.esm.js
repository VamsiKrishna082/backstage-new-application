import { createApiRef, createRouteRef, createPlugin, createApiFactory, googleAuthApiRef, createRoutableExtension } from '@backstage/core-plugin-api';

const gcpApiRef = createApiRef({
  id: "plugin.gcpprojects.service"
});

var name = "@backstage/plugin-gcp-projects";
var version = "0.3.51";
var description = "A Backstage plugin that helps you manage projects in GCP";
var backstage = {
	role: "frontend-plugin",
	moved: "@backstage-community/plugin-gcp-projects"
};
var publishConfig = {
	access: "public",
	main: "dist/index.esm.js",
	types: "dist/index.d.ts"
};
var keywords = [
	"backstage",
	"google cloud"
];
var homepage = "https://backstage.io";
var repository = {
	type: "git",
	url: "https://github.com/backstage/backstage",
	directory: "plugins/gcp-projects"
};
var license = "Apache-2.0";
var sideEffects = false;
var main = "src/index.ts";
var types = "src/index.ts";
var files = [
	"dist"
];
var scripts = {
	build: "backstage-cli package build",
	clean: "backstage-cli package clean",
	lint: "backstage-cli package lint",
	prepack: "backstage-cli package prepack",
	postpack: "backstage-cli package postpack",
	start: "backstage-cli package start",
	test: "backstage-cli package test"
};
var dependencies = {
	"@backstage/core-components": "workspace:^",
	"@backstage/core-plugin-api": "workspace:^",
	"@material-ui/core": "^4.12.2",
	"@react-hookz/web": "^24.0.0",
	"@types/react": "^16.13.1 || ^17.0.0"
};
var devDependencies = {
	"@backstage/cli": "workspace:^",
	"@backstage/dev-utils": "workspace:^",
	"@testing-library/dom": "^10.0.0",
	"@testing-library/jest-dom": "^6.0.0",
	"@testing-library/react": "^15.0.0"
};
var peerDependencies = {
	react: "^16.13.1 || ^17.0.0 || ^18.0.0",
	"react-dom": "^16.13.1 || ^17.0.0 || ^18.0.0",
	"react-router-dom": "6.0.0-beta.0 || ^6.3.0"
};
var deprecated = "This package has been moved to the backstage/community-plugins repository. You should migrate to using @backstage-community/plugin-gcp-projects instead.";
var packageinfo = {
	name: name,
	version: version,
	description: description,
	backstage: backstage,
	publishConfig: publishConfig,
	keywords: keywords,
	homepage: homepage,
	repository: repository,
	license: license,
	sideEffects: sideEffects,
	main: main,
	types: types,
	files: files,
	scripts: scripts,
	dependencies: dependencies,
	devDependencies: devDependencies,
	peerDependencies: peerDependencies,
	deprecated: deprecated
};

const BASE_URL = "https://content-cloudresourcemanager.googleapis.com/v1/projects";
class GcpClient {
  constructor(googleAuthApi) {
    this.googleAuthApi = googleAuthApi;
  }
  async listProjects() {
    const response = await fetch(BASE_URL, {
      headers: {
        Accept: "*/*",
        Authorization: `Bearer ${await this.getToken()}`,
        "X-Goog-Api-Client": `backstage/gcpprojects/${packageinfo.version}`
      }
    });
    if (!response.ok) {
      throw new Error(
        `List request failed to ${BASE_URL} with ${response.status} ${response.statusText}`
      );
    }
    const { projects } = await response.json();
    return projects;
  }
  async getProject(projectId) {
    const url = `${BASE_URL}/${projectId}`;
    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${await this.getToken()}`,
        "X-Goog-Api-Client": `backstage/gcpprojects/${packageinfo.version}`
      }
    });
    if (!response.ok) {
      throw new Error(
        `Get request failed to ${url} with ${response.status} ${response.statusText}`
      );
    }
    return await response.json();
  }
  async createProject(options) {
    const newProject = {
      name: options.projectName,
      projectId: options.projectId
    };
    const response = await fetch(BASE_URL, {
      method: "POST",
      headers: {
        Accept: "*/*",
        Authorization: `Bearer ${await this.getToken()}`,
        "X-Goog-Api-Client": `backstage/gcpprojects/${packageinfo.version}`
      },
      body: JSON.stringify(newProject)
    });
    if (!response.ok) {
      throw new Error(
        `Create request failed to ${BASE_URL} with ${response.status} ${response.statusText}`
      );
    }
    return await response.json();
  }
  async getToken() {
    return this.googleAuthApi.getAccessToken(
      "https://www.googleapis.com/auth/cloud-platform"
    );
  }
}

const rootRouteRef = createRouteRef({
  id: "gcp-projects"
});
createRouteRef({
  id: "gcp-projects:project"
});
createRouteRef({
  id: "gcp-projects:new"
});

const gcpProjectsPlugin = createPlugin({
  id: "gcp-projects",
  routes: {
    root: rootRouteRef
  },
  apis: [
    createApiFactory({
      api: gcpApiRef,
      deps: { googleAuthApi: googleAuthApiRef },
      factory({ googleAuthApi }) {
        return new GcpClient(googleAuthApi);
      }
    })
  ]
});
const GcpProjectsPage = gcpProjectsPlugin.provide(
  createRoutableExtension({
    name: "GcpProjectsPage",
    component: () => import('./index-DtGq-t-5.esm.js').then((m) => m.GcpProjectsPage),
    mountPoint: rootRouteRef
  })
);

export { GcpProjectsPage as G, gcpProjectsPlugin as a, GcpClient as b, gcpApiRef as g, rootRouteRef as r };
//# sourceMappingURL=index--dOjDGyG.esm.js.map
