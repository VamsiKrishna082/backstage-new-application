{"version":3,"file":"index--dOjDGyG.esm.js","sources":["../../src/api/GcpApi.ts","../../src/api/GcpClient.ts","../../src/routes.ts","../../src/plugin.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Project, Operation } from './types';\nimport { createApiRef } from '@backstage/core-plugin-api';\n\n/** @public */\nexport const gcpApiRef = createApiRef<GcpApi>({\n  id: 'plugin.gcpprojects.service',\n});\n\n/** @public */\nexport type GcpApi = {\n  listProjects(): Promise<Project[]>;\n  getProject(projectId: string): Promise<Project>;\n  createProject(options: {\n    projectId: string;\n    projectName: string;\n  }): Promise<Operation>;\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GcpApi } from './GcpApi';\nimport { Operation, Project } from './types';\nimport { OAuthApi } from '@backstage/core-plugin-api';\nimport packageinfo from '../../package.json';\n\nconst BASE_URL =\n  'https://content-cloudresourcemanager.googleapis.com/v1/projects';\n\n/** @public */\nexport class GcpClient implements GcpApi {\n  constructor(private readonly googleAuthApi: OAuthApi) {}\n\n  async listProjects(): Promise<Project[]> {\n    const response = await fetch(BASE_URL, {\n      headers: {\n        Accept: '*/*',\n        Authorization: `Bearer ${await this.getToken()}`,\n        'X-Goog-Api-Client': `backstage/gcpprojects/${packageinfo.version}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `List request failed to ${BASE_URL} with ${response.status} ${response.statusText}`,\n      );\n    }\n\n    const { projects } = await response.json();\n    return projects;\n  }\n\n  async getProject(projectId: string): Promise<Project> {\n    const url = `${BASE_URL}/${projectId}`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${await this.getToken()}`,\n        'X-Goog-Api-Client': `backstage/gcpprojects/${packageinfo.version}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Get request failed to ${url} with ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return await response.json();\n  }\n\n  async createProject(options: {\n    projectId: string;\n    projectName: string;\n  }): Promise<Operation> {\n    const newProject: Project = {\n      name: options.projectName,\n      projectId: options.projectId,\n    };\n\n    const response = await fetch(BASE_URL, {\n      method: 'POST',\n      headers: {\n        Accept: '*/*',\n        Authorization: `Bearer ${await this.getToken()}`,\n        'X-Goog-Api-Client': `backstage/gcpprojects/${packageinfo.version}`,\n      },\n      body: JSON.stringify(newProject),\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Create request failed to ${BASE_URL} with ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return await response.json();\n  }\n\n  async getToken(): Promise<string> {\n    // NOTE(freben): There's a .read-only variant of this scope that we could\n    // use for readonly operations, but that means we would ask the user for a\n    // second auth during creation and I decided to keep the wider scope for\n    // all ops for now\n    return this.googleAuthApi.getAccessToken(\n      'https://www.googleapis.com/auth/cloud-platform',\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createRouteRef } from '@backstage/core-plugin-api';\n\nexport const rootRouteRef = createRouteRef({\n  id: 'gcp-projects',\n});\nexport const projectRouteRef = createRouteRef({\n  id: 'gcp-projects:project',\n});\nexport const newProjectRouteRef = createRouteRef({\n  id: 'gcp-projects:new',\n});\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { gcpApiRef, GcpClient } from './api';\nimport { rootRouteRef } from './routes';\nimport {\n  createApiFactory,\n  createPlugin,\n  createRoutableExtension,\n  googleAuthApiRef,\n} from '@backstage/core-plugin-api';\n\n/** @public */\nexport const gcpProjectsPlugin = createPlugin({\n  id: 'gcp-projects',\n  routes: {\n    root: rootRouteRef,\n  },\n  apis: [\n    createApiFactory({\n      api: gcpApiRef,\n      deps: { googleAuthApi: googleAuthApiRef },\n      factory({ googleAuthApi }) {\n        return new GcpClient(googleAuthApi);\n      },\n    }),\n  ],\n});\n\n/** @public */\nexport const GcpProjectsPage = gcpProjectsPlugin.provide(\n  createRoutableExtension({\n    name: 'GcpProjectsPage',\n    component: () =>\n      import('./components/GcpProjectsPage').then(m => m.GcpProjectsPage),\n    mountPoint: rootRouteRef,\n  }),\n);\n"],"names":[],"mappings":"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"}