{"version":3,"file":"index.cjs.js","sources":["../src/service/router.ts","../src/utils.ts","../src/headlamp.ts","../src/plugin.ts"],"sourcesContent":["import { MiddlewareFactory } from \"@backstage/backend-defaults/rootHttpRouter\";\nimport {\n  LoggerService,\n  RootConfigService,\n} from \"@backstage/backend-plugin-api\";\nimport express from \"express\";\nimport Router from \"express-promise-router\";\nimport { HeadlampKubernetesBuilder } from \"../headlamp\";\nimport { HttpAuthService } from \"@backstage/backend-plugin-api\";\nimport fs from \"fs\";\nimport { spawn, ChildProcessWithoutNullStreams } from \"child_process\";\nimport { BackstageCredentials } from \"@backstage/backend-plugin-api\";\nimport { ObjectsByEntityRequest } from \"@backstage/plugin-kubernetes-backend\";\nimport { KubernetesRequestAuth } from \"@backstage/plugin-kubernetes-common\";\n\nexport interface RouterOptions {\n  logger: LoggerService;\n  config: RootConfigService;\n  kubernetesBuilder: HeadlampKubernetesBuilder;\n  httpAuth: HttpAuthService;\n  kubeconfigPath: string;\n  headlampBinaryPath: string;\n  pluginsPath: string;\n}\n\nexport async function createRouter(\n  options: RouterOptions\n): Promise<express.Router> {\n  const {\n    logger,\n    config,\n    kubernetesBuilder,\n    httpAuth,\n    kubeconfigPath,\n    headlampBinaryPath,\n    pluginsPath,\n  } = options;\n\n  const router = Router();\n  let headlampProcess: ChildProcessWithoutNullStreams | null = null;\n\n  logger.info(\"Creating Headlamp Server router\");\n\n  router.use(express.json());\n\n  router.get(\"/health\", (_, response) => {\n    response.json({ status: \"ok\" });\n  });\n\n  router.post(\"/refreshKubeconfig\", async (req, res) => {\n    try {\n      const credentials = await httpAuth.credentials(req);\n      const requestBody: ObjectsByEntityRequest = req.body; \n      const auth = requestBody.auth;\n\n      const kubeconfig = await kubernetesBuilder.getKubeconfig(credentials,auth);\n\n      // write kubeconfig to file\n      fs.writeFileSync(kubeconfigPath, kubeconfig);\n      res.json({ status: \"ok\" });\n    } catch (error) {\n      logger.error(`Error refreshing kubeconfig: ${error}`);\n      res.status(500).json({ message: \"Error refreshing kubeconfig\" });\n    }\n  });\n\n  // spawn headlamp server if not already running\n  router.post(\"/start\", async (req, res) => {\n    try {\n      const credentials = await httpAuth.credentials(req);\n      const requestBody: ObjectsByEntityRequest = req.body;\n      const auth: KubernetesRequestAuth = requestBody.auth;\n\n      if (!headlampProcess) {\n        headlampProcess = await spawnHeadlamp(\n          logger,\n          credentials,\n          kubernetesBuilder,\n          auth,\n          headlampBinaryPath,\n          kubeconfigPath,\n          pluginsPath\n        );\n        res.json({ message: \"Headlamp Server started\" });\n      } else {\n        logger.info(\"Headlamp Server already running, refreshing kubeconfig\");\n        const kubeconfig = await kubernetesBuilder.getKubeconfig(credentials,auth);\n\n        // write kubeconfig to file\n        fs.writeFileSync(kubeconfigPath, kubeconfig);\n        res.json({ message: \"Headlamp Server kubeconfig refreshed\" });\n      }\n    } catch (error) {\n      logger.error(`Error starting Headlamp Server: ${error}`);\n      res.status(500).json({ message: \"Error starting Headlamp Server\" });\n    }\n  });\n\n  const middleware = MiddlewareFactory.create({ logger, config });\n\n  router.use(middleware.error());\n  return router;\n}\n\nasync function spawnHeadlamp(\n  logger: LoggerService,\n  credentials: BackstageCredentials,\n  kubernetesBuilder: HeadlampKubernetesBuilder,\n  auth: KubernetesRequestAuth,\n  headlampBinaryPath: string,\n  kubeconfigPath: string,\n  pluginsPath: string\n) {\n  try {\n    const kubeconfig = await kubernetesBuilder.getKubeconfig(credentials,auth);\n    fs.writeFileSync(kubeconfigPath, kubeconfig);\n  } catch (error) {\n    logger.error(`Error creating kubeconfig from kubernetes config: ${error}`);\n  }\n  const headlampProcess = spawn(headlampBinaryPath, [\n    \"--kubeconfig\",\n    kubeconfigPath,\n    \"--plugins-dir\",\n    pluginsPath,\n  ]);\n\n  headlampProcess.stdout.on(\"data\", (data) => {\n    logger.info(`Headlamp Server stdout: ${data}`);\n  });\n\n  headlampProcess.stderr.on(\"data\", (data) => {\n    logger.error(`Headlamp Server stderr: ${data}`);\n  });\n\n  return headlampProcess;\n}\n","import fs from 'fs';\nimport { BackstageCredentials } from '@backstage/backend-plugin-api';\nimport { HeadlampKubernetesBuilder } from './headlamp';\nimport yaml from 'js-yaml';\nimport { KubernetesRequestAuth } from '@backstage/plugin-kubernetes-common';\n\n/**\n * Represents a cluster configuration in a kubeconfig file\n * @interface KubeconfigCluster\n * @property {string} name - The unique name identifier for the cluster\n * @property {object} cluster - The cluster configuration details\n * @property {string} cluster.server - The URL/address of the Kubernetes API server\n * @property {boolean} [cluster.insecure-skip-tls-verify] - Whether to skip TLS certificate verification\n * @property {string} [cluster.certificate-authority-data] - The certificate authority data in base64 format\n * @property {string} [cluster.certificate-authority] - Path to the certificate authority file\n */\ninterface KubeconfigCluster {\n    name: string;\n    cluster: {\n      server: string;\n      'insecure-skip-tls-verify'?: boolean;\n      'certificate-authority-data'?: string;\n      'certificate-authority'?: string;\n    };\n  }\n  \n  /**\n   * Represents a user configuration in a kubeconfig file\n   * @interface KubeconfigUser\n   * @property {string} name - The unique name identifier for the user\n   * @property {object} user - The user authentication details\n   * @property {string} [user.client-certificate-data] - The client certificate data in base64 format\n   * @property {string} [user.client-key-data] - The client key data in base64 format\n   * @property {string} [user.token] - The bearer token for authentication\n   * @property {object} [user.exec] - Configuration for executable-based authentication\n   * @property {string} user.exec.apiVersion - API version for the exec configuration\n   * @property {string} user.exec.command - The command to execute\n   * @property {string[]} user.exec.args - Arguments to pass to the command\n   */\n  interface KubeconfigUser {\n    name: string;\n    user: {\n      'client-certificate-data'?: string;\n      'client-key-data'?: string;\n      token?: string;\n      exec?: {\n        apiVersion: string;\n        command: string;\n        args: string[];\n      };\n    };\n  }\n  \n  /**\n   * Represents a context configuration in a kubeconfig file\n   * @interface KubeconfigContext\n   * @property {string} name - The unique name identifier for the context\n   * @property {object} context - The context configuration details\n   * @property {string} context.cluster - Name of the cluster for this context\n   * @property {string} context.user - Name of the user for this context\n   */\n  interface KubeconfigContext {\n    name: string;\n    context: {\n      cluster: string;\n      user: string;\n    };\n  }\n  \n  /**\n   * Represents the full kubeconfig file structure\n   * @interface Kubeconfig\n   * @property {string} apiVersion - The API version of the kubeconfig file\n   * @property {string} kind - The type of the configuration (should be \"Config\")\n   * @property {KubeconfigCluster[]} clusters - Array of cluster configurations\n   * @property {KubeconfigUser[]} users - Array of user configurations\n   * @property {KubeconfigContext[]} contexts - Array of context configurations\n   * @property {string} [current-context] - The name of the current active context\n   */\n  export interface Kubeconfig {\n    apiVersion: string;\n    kind: string;\n    clusters: KubeconfigCluster[];\n    users: KubeconfigUser[];\n    contexts: KubeconfigContext[];\n    'current-context'?: string;\n  }\n  \n  /**\n   * Combines multiple kubeconfig files into a single kubeconfig file\n   * @param {Kubeconfig[]} kubeconfigs - Array of kubeconfig objects to combine\n   * @returns {string} - The combined kubeconfig file as a string\n   */\n  export function combineKubeconfigs(kubeconfigs: Kubeconfig[]): string {\n    const combinedConfig: Kubeconfig = {\n      apiVersion: 'v1',\n      kind: 'Config',\n      clusters: [],\n      users: [],\n      contexts: [],\n    };\n  \n    kubeconfigs.forEach(config => {\n      combinedConfig.clusters.push(...config.clusters);\n      combinedConfig.users.push(...config.users);\n      combinedConfig.contexts.push(...config.contexts);\n    });\n  \n    // Set the current-context to the first context if available\n    if (combinedConfig.contexts.length > 0) {\n      combinedConfig['current-context'] = combinedConfig.contexts[0].name;\n    }\n  \n    return yaml.dump(combinedConfig, {\n      lineWidth: -1, // Disable line wrapping\n      noRefs: true, // Avoid aliases for repeated nodes\n      quotingType: '\"', // Use double quotes for strings\n    });\n  }\n\n/**\n * Writes a kubeconfig file to the specified path using the provided config and kubernetes builder\n * @param config - The Backstage config object\n * @param kubernetesBuilder - The HeadlampKubernetesBuilder instance used to generate the kubeconfig\n * @param filePath - The file path where the kubeconfig should be written\n */\nexport async function writeKubeconfig(\n    credentials: BackstageCredentials,\n    kubernetesBuilder: HeadlampKubernetesBuilder,\n    filePath: string,\n    auth: KubernetesRequestAuth\n  ) {\n    const kubeconfig = await kubernetesBuilder.getKubeconfig(credentials,auth);\n  \n    fs.writeFileSync(filePath, kubeconfig);\n  }\n  ","import { KubernetesBuilder } from '@backstage/plugin-kubernetes-backend';\nimport { Duration } from 'luxon';\nimport { AuthMetadata } from '@backstage/plugin-kubernetes-node';\nimport {\n  ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER,\n  ANNOTATION_KUBERNETES_AUTH_PROVIDER,\n} from '@backstage/plugin-kubernetes-common';\nimport { KubernetesRequestAuth } from '@backstage/plugin-kubernetes-common';\nimport { KubernetesCredential } from '@backstage/plugin-kubernetes-node';\nimport { Kubeconfig,combineKubeconfigs } from './utils';\nimport { BackstageCredentials } from '@backstage/backend-plugin-api';\n\n\n/**\n * HeadlampKubernetesBuilder extends KubernetesBuilder to provide functionality for generating kubeconfig files\n * and managing Kubernetes cluster details for Headlamp integration.\n * @extends KubernetesBuilder\n */\nexport class HeadlampKubernetesBuilder extends KubernetesBuilder {\n  /**\n   * Lists details for all configured Kubernetes clusters\n   * @param {BackstageCredentials} credentials - The Backstage credentials for authentication\n   * @returns {Promise<Array<{name: string, url: string, skipTLSVerify: boolean, credential: KubernetesCredential, caData: string}>>} \n   * Array of cluster details including connection info and credentials\n   */\n  public async listClusterDetails(credentials: BackstageCredentials,auth: KubernetesRequestAuth): Promise<\n    Array<{\n      name: string;\n      url: string;\n      skipTLSVerify: boolean;\n      credential: KubernetesCredential;\n      caData: string;\n    }>\n  > {\n    const duration = Duration.fromObject({\n      minutes: 1,\n    });\n\n    const clusterSupplier = this.buildClusterSupplier(duration);\n    \n    const clusterDetails = await clusterSupplier.getClusters({credentials});\n\n    const clusterInfo = clusterDetails.map(async cd => {\n      const oidcTokenProvider =\n        cd.authMetadata[ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER];\n      const authProvider = cd.authMetadata[ANNOTATION_KUBERNETES_AUTH_PROVIDER];\n\n      const authStrategyMap = this.getAuthStrategyMap();\n\n      const currentAuthStrategy = authStrategyMap[authProvider];\n\n      const currentCredential = await currentAuthStrategy.getCredential(\n        cd,\n        auth,\n      );\n\n      return {\n        name: cd.name,\n        url: cd.url,\n        skipTLSVerify: cd.skipTLSVerify ?? false,\n        title: cd.title,\n        caData: cd.caData,\n        credential: currentCredential,\n        authProvider,\n        ...(oidcTokenProvider && { oidcTokenProvider }),\n        ...(auth && Object.keys(auth).length !== 0 && { auth }),\n      };\n    });\n\n    return Promise.all(clusterInfo).then(clusters =>\n      clusters.map(cluster => ({\n        name: cluster.name,\n        url: cluster.url,\n        skipTLSVerify: cluster.skipTLSVerify,\n        credential: cluster.credential,\n        caData: cluster.caData || '',\n      })),\n    );\n  }\n\n  /**\n   * Converts a cluster details object into a kubeconfig format\n   * @param {Object} cluster - The cluster details object\n   * @param {string} cluster.name - Name of the cluster\n   * @param {string} cluster.url - URL of the cluster API server\n   * @param {boolean} cluster.skipTLSVerify - Whether to skip TLS verification\n   * @param {KubernetesCredential} cluster.credential - Credentials for cluster authentication\n   * @param {string} cluster.caData - Certificate authority data\n   * @returns {Kubeconfig} Kubeconfig object for the cluster\n   * @private\n   */\n  private convertClusterToKubeconfig(cluster: {\n    name: string;\n    url: string;\n    skipTLSVerify: boolean;\n    credential: KubernetesCredential;\n    caData: string;\n  }): Kubeconfig {\n    const kubeconfig: Kubeconfig = {\n      apiVersion: 'v1',\n      kind: 'Config',\n      clusters: [\n        {\n          name: cluster.name,\n          cluster: {\n            server: cluster.url,\n            'insecure-skip-tls-verify': cluster.skipTLSVerify,\n            'certificate-authority-data': cluster.caData,\n          },\n        },\n      ],\n      users: [\n        {\n          name: cluster.name,\n          user: {},\n        },\n      ],\n      contexts: [\n        {\n          name: cluster.name,\n          context: {\n            cluster: cluster.name,\n            user: cluster.name,\n          },\n        },\n      ],\n      'current-context': cluster.name,\n    };\n\n    // Handle different credential types\n    switch (cluster.credential.type) {\n      case 'bearer token':\n        kubeconfig.users[0].user.token = cluster.credential.token;\n        break;\n      case 'x509 client certificate':\n        kubeconfig.users[0].user = {\n          'client-certificate-data': cluster.credential.cert,\n          'client-key-data': cluster.credential.key,\n        };\n        break;\n      case 'anonymous':\n        // No additional configuration needed for anonymous\n        break;\n      default:\n        break;\n    }\n\n    return kubeconfig;\n  }\n\n  /**\n   * Generates a complete kubeconfig file string for all configured clusters\n   * @param {BackstageCredentials} credentials - The Backstage credentials for authentication\n   * @returns {Promise<string>} Combined kubeconfig file contents as a string\n   */\n  public async getKubeconfig(credentials: BackstageCredentials,auth: KubernetesRequestAuth): Promise<string> {\n    const clusters = await this.listClusterDetails(credentials,auth);\n\n    const kubeconfigs = clusters.map(cluster =>\n      this.convertClusterToKubeconfig(cluster),\n    );\n\n    return combineKubeconfigs(kubeconfigs);\n  }\n}\n","import {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport os from 'os';\nimport { createRouter } from './service/router';\nimport path from 'path';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node/alpha';\nimport { HeadlampKubernetesBuilder } from './headlamp';\n\n\n/**\n * headlampPlugin backend plugin\n *\n * @public\n */\nexport const headlampPlugin = createBackendPlugin({\n  pluginId: 'headlamp',\n  register(env) {\n    env.registerInit({\n      deps: {\n        httpRouter: coreServices.httpRouter,\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        discovery: coreServices.discovery,\n        catalogApi: catalogServiceRef,\n        permissions: coreServices.permissions,\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n      },\n\n      async init({ httpRouter, logger, config, discovery, catalogApi, permissions, auth, httpAuth }) {\n        \n        \n        \n        const kubeconfigPath = path.join(os.tmpdir(), 'kubeconfig.yaml');\n        const headlampBinaryPath = config.getOptionalString('headlampBackend.binaryPath') || path.join(process.cwd(), 'bin', process.platform === 'win32' ? 'headlamp-standalone.exe' : 'headlamp-standalone');\n        const pluginsPath = config.getOptionalString('headlampBackend.pluginsPath') || path.join(process.cwd(), 'plugins');\n\n        logger.info(`Headlamp Binary Path: ${headlampBinaryPath}`);\n        logger.info(`Kubeconfig Path: ${kubeconfigPath}`);\n        const builder: HeadlampKubernetesBuilder = new HeadlampKubernetesBuilder({\n          logger,\n          config,\n          discovery,\n          catalogApi,\n          permissions,\n          auth,\n          httpAuth,\n        });\n\n        httpRouter.use(\n          await createRouter({\n            logger,\n            config,\n            kubernetesBuilder: builder,\n            httpAuth,\n            kubeconfigPath,\n            headlampBinaryPath,\n            pluginsPath\n          }),\n        );\n        httpRouter.addAuthPolicy({\n          path: '/health',\n          allow: 'unauthenticated',\n        });\n      },\n    });\n  },\n});\n"],"names":["Router","express","fs","MiddlewareFactory","spawn","yaml","KubernetesBuilder","Duration","ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER","ANNOTATION_KUBERNETES_AUTH_PROVIDER","createBackendPlugin","coreServices","catalogServiceRef","path","os"],"mappings":"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"}