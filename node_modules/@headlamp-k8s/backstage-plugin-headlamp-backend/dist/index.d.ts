import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { BackstageCredentials, LoggerService, RootConfigService, HttpAuthService } from '@backstage/backend-plugin-api';
import express from 'express';
import { KubernetesBuilder } from '@backstage/plugin-kubernetes-backend';
import { KubernetesRequestAuth } from '@backstage/plugin-kubernetes-common';
import { KubernetesCredential } from '@backstage/plugin-kubernetes-node';

/**
 * HeadlampKubernetesBuilder extends KubernetesBuilder to provide functionality for generating kubeconfig files
 * and managing Kubernetes cluster details for Headlamp integration.
 * @extends KubernetesBuilder
 */
declare class HeadlampKubernetesBuilder extends KubernetesBuilder {
    /**
     * Lists details for all configured Kubernetes clusters
     * @param {BackstageCredentials} credentials - The Backstage credentials for authentication
     * @returns {Promise<Array<{name: string, url: string, skipTLSVerify: boolean, credential: KubernetesCredential, caData: string}>>}
     * Array of cluster details including connection info and credentials
     */
    listClusterDetails(credentials: BackstageCredentials, auth: KubernetesRequestAuth): Promise<Array<{
        name: string;
        url: string;
        skipTLSVerify: boolean;
        credential: KubernetesCredential;
        caData: string;
    }>>;
    /**
     * Converts a cluster details object into a kubeconfig format
     * @param {Object} cluster - The cluster details object
     * @param {string} cluster.name - Name of the cluster
     * @param {string} cluster.url - URL of the cluster API server
     * @param {boolean} cluster.skipTLSVerify - Whether to skip TLS verification
     * @param {KubernetesCredential} cluster.credential - Credentials for cluster authentication
     * @param {string} cluster.caData - Certificate authority data
     * @returns {Kubeconfig} Kubeconfig object for the cluster
     * @private
     */
    private convertClusterToKubeconfig;
    /**
     * Generates a complete kubeconfig file string for all configured clusters
     * @param {BackstageCredentials} credentials - The Backstage credentials for authentication
     * @returns {Promise<string>} Combined kubeconfig file contents as a string
     */
    getKubeconfig(credentials: BackstageCredentials, auth: KubernetesRequestAuth): Promise<string>;
}

interface RouterOptions {
    logger: LoggerService;
    config: RootConfigService;
    kubernetesBuilder: HeadlampKubernetesBuilder;
    httpAuth: HttpAuthService;
    kubeconfigPath: string;
    headlampBinaryPath: string;
    pluginsPath: string;
}
declare function createRouter(options: RouterOptions): Promise<express.Router>;

/**
 * headlampPlugin backend plugin
 *
 * @public
 */
declare const headlampPlugin: _backstage_backend_plugin_api.BackendFeatureCompat;

export { RouterOptions, createRouter, headlampPlugin as default };
