import { createApiRef, createRouteRef, createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, createRoutableExtension } from '@backstage/core-plugin-api';
import React from 'react';

const headlampApiRef = createApiRef({
  id: "plugin.headlamp.service"
});

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class HeadlampClient {
  constructor(options) {
    __publicField(this, "discoveryApi");
    __publicField(this, "fetchApi");
    this.discoveryApi = options.discoveryApi;
    this.fetchApi = options.fetchApi;
  }
  async getBaseUrl() {
    return await this.discoveryApi.getBaseUrl("headlamp");
  }
  async startServer(auth) {
    const baseUrl = await this.getBaseUrl();
    await this.fetchApi.fetch(`${baseUrl}/start`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        auth
      })
    });
  }
  async refreshKubeconfig(auth) {
    const baseUrl = await this.getBaseUrl();
    await this.fetchApi.fetch(`${baseUrl}/refreshKubeconfig`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        "auth": auth
      })
    });
  }
  async health() {
    const baseUrl = await this.getBaseUrl();
    const response = await this.fetchApi.fetch(`${baseUrl}/health`);
    return await response.json();
  }
}

const rootRouteRef = createRouteRef({
  id: "headlamp"
});

const headlampPlugin = createPlugin({
  id: "headlamp",
  apis: [createApiFactory({
    api: headlampApiRef,
    deps: { discoveryApi: discoveryApiRef, fetchApi: fetchApiRef },
    factory: ({ discoveryApi, fetchApi }) => new HeadlampClient({ discoveryApi, fetchApi })
  })],
  routes: {
    root: rootRouteRef
  }
});
const HeadlampPage = headlampPlugin.provide(
  createRoutableExtension({
    name: "HeadlampPage",
    component: () => import('./index-cc6d4405.esm.js').then((m) => m.HeadlampComponent),
    mountPoint: rootRouteRef
  })
);

const HeadlampIcon = ({ fontSize = "medium" }) => {
  const getSize = () => {
    switch (fontSize) {
      case "small":
        return 20;
      case "large":
        return 35;
      case "medium":
      case "inherit":
        return "1em";
      default:
        return 24;
    }
  };
  const size = getSize();
  const numericSize = typeof size === "string" ? 24 : size;
  return /* @__PURE__ */ React.createElement(
    "svg",
    {
      width: size,
      height: numericSize * (512 / 408),
      viewBox: "0 0 408 512",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ React.createElement(
      "path",
      {
        d: "M407.951 324.939V204.686L376.111 163.18V93.246L274.052 56.573V0H133.899V56.573L31.8399 93.246V163.18L0 204.686V324.939L31.8399 367.867L0 466.798L204.117 512L407.951 466.798L376.111 367.867L407.951 324.939Z",
        fill: "black"
      }
    ),
    /* @__PURE__ */ React.createElement(
      "path",
      {
        d: "M204.118 367.867C260.406 367.867 306.176 322.097 306.176 265.808C306.176 209.519 260.406 163.749 204.118 163.749C147.829 163.749 102.059 209.519 102.059 265.808C102.059 322.097 147.829 367.867 204.118 367.867Z",
        fill: "#FFF200"
      }
    )
  );
};

export { HeadlampPage as H, headlampPlugin as a, HeadlampIcon as b, headlampApiRef as h };
//# sourceMappingURL=index-668854a6.esm.js.map
