{"version":3,"file":"index.esm.js","sources":["../../src/api/index.ts"],"sourcesContent":["import {\n  createApiRef,\n  DiscoveryApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport {\n  argoCDAppDetails,\n  ArgoCDAppDetails,\n  argoCDAppList,\n  ArgoCDAppList,\n  argoCDAppDeployRevisionDetails,\n  ArgoCDAppDeployRevisionDetails,\n  argoCDServiceList,\n  ArgoCDServiceList,\n} from '../types';\nimport { Type as tsType } from 'io-ts';\nimport {\n  decode as tsDecode,\n  isDecodeError as tsIsDecodeError,\n} from 'io-ts-promise';\nimport reporter from 'io-ts-reporters';\n\nexport interface ArgoCDApi {\n  listApps(options: {\n    url: string;\n    appSelector?: string;\n    appNamespace?: string;\n    projectName?: string;\n  }): Promise<ArgoCDAppList>;\n  getRevisionDetails(options: {\n    url: string;\n    app: string;\n    appNamespace?: string;\n    revisionID: string;\n    instanceName?: string;\n  }): Promise<ArgoCDAppDeployRevisionDetails>;\n  getAppDetails(options: {\n    url: string;\n    appName: string;\n    appNamespace?: string;\n    instance?: string;\n  }): Promise<ArgoCDAppDetails>;\n  getAppListDetails(options: {\n    url: string;\n    appSelector: string;\n    appNamespace?: string;\n    instance?: string;\n  }): Promise<ArgoCDAppList>;\n  serviceLocatorUrl(options: {\n    appName?: string;\n    appSelector?: string;\n    appNamespace?: string;\n  }): Promise<ArgoCDServiceList | Error>;\n}\n\nexport const argoCDApiRef = createApiRef<ArgoCDApi>({\n  id: 'plugin.argocd.service',\n});\n\nexport type Options = {\n  discoveryApi: DiscoveryApi;\n  backendBaseUrl: string;\n  searchInstances: boolean;\n  identityApi: IdentityApi;\n  proxyPath?: string;\n  useNamespacedApps: boolean;\n};\n\nconst APP_NAMESPACE_QUERY_PARAM = 'appNamespace';\n\nexport class ArgoCDApiClient implements ArgoCDApi {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly backendBaseUrl: string;\n  private readonly searchInstances: boolean;\n  private readonly identityApi: IdentityApi;\n  private readonly useNamespacedApps: boolean;\n\n  constructor(options: Options) {\n    this.discoveryApi = options.discoveryApi;\n    this.backendBaseUrl = options.backendBaseUrl;\n    this.searchInstances = options.searchInstances;\n    this.identityApi = options.identityApi;\n    this.useNamespacedApps = options.useNamespacedApps;\n  }\n\n  async getBaseUrl() {\n    if (this.searchInstances) {\n      return `${this.backendBaseUrl}/api/argocd`;\n    }\n    return await this.discoveryApi.getBaseUrl('proxy');\n  }\n\n  getQueryParams(params: { [p: string]: string | undefined }) {\n    const result = Object.keys(params)\n      .filter(key => params[key] !== undefined)\n      .filter(\n        key => key !== APP_NAMESPACE_QUERY_PARAM || this.useNamespacedApps,\n      )\n      .map(\n        k =>\n          `${encodeURIComponent(k)}=${encodeURIComponent(params[k] as string)}`,\n      )\n      .join('&');\n    return result ? `?${result}` : '';\n  }\n\n  async fetchDecode<A, O, I>(url: string, typeCodec: tsType<A, O, I>) {\n    const { token } = await this.identityApi.getCredentials();\n    const response = await fetch(url, {\n      headers: token\n        ? {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`,\n          }\n        : undefined,\n    });\n    if (!response.ok) {\n      throw new Error(\n        `failed to fetch data, status ${response.status}: ${response.statusText}`,\n      );\n    }\n    const json = await response.json();\n    try {\n      return await tsDecode(typeCodec, json);\n    } catch (e) {\n      if (tsIsDecodeError(e)) {\n        throw new Error(\n          `remote data validation failed: ${reporter\n            .report(typeCodec.decode(json))\n            .join('; ')}`,\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async listApps(options: {\n    url: string;\n    appSelector?: string;\n    appNamespace?: string;\n    projectName?: string;\n  }) {\n    const proxyUrl = await this.getBaseUrl();\n    const query = this.getQueryParams({\n      selector: options.appSelector,\n      project: options.projectName,\n      appNamespace: options.appNamespace,\n    });\n    return this.fetchDecode(\n      `${proxyUrl}${options.url}/applications${query}`,\n      argoCDAppList,\n    );\n  }\n\n  async getRevisionDetails(options: {\n    url: string;\n    app: string;\n    appNamespace?: string;\n    revisionID: string;\n    instanceName?: string;\n  }) {\n    const proxyUrl = await this.getBaseUrl();\n    const query = this.getQueryParams({\n      appNamespace: options.appNamespace,\n    });\n    if (this.searchInstances) {\n      return this.fetchDecode(\n        `${proxyUrl}/argoInstance/${\n          options.instanceName\n        }/applications/name/${encodeURIComponent(\n          options.app as string,\n        )}/revisions/${encodeURIComponent(\n          options.revisionID as string,\n        )}/metadata${query}`,\n        argoCDAppDeployRevisionDetails,\n      );\n    }\n    return this.fetchDecode(\n      `${proxyUrl}${options.url}/applications/${encodeURIComponent(\n        options.app as string,\n      )}/revisions/${encodeURIComponent(\n        options.revisionID as string,\n      )}/metadata${query}`,\n      argoCDAppDeployRevisionDetails,\n    );\n  }\n\n  async getAppDetails(options: {\n    url: string;\n    appName: string;\n    appNamespace?: string;\n    instance?: string;\n  }) {\n    const proxyUrl = await this.getBaseUrl();\n    const query = this.getQueryParams({\n      appNamespace: options.appNamespace,\n    });\n    if (this.searchInstances) {\n      return this.fetchDecode(\n        `${proxyUrl}/argoInstance/${\n          options.instance\n        }/applications/name/${encodeURIComponent(\n          options.appName as string,\n        )}${query}`,\n        argoCDAppDetails,\n      );\n    }\n    return this.fetchDecode(\n      `${proxyUrl}${options.url}/applications/${encodeURIComponent(\n        options.appName as string,\n      )}${query}`,\n      argoCDAppDetails,\n    );\n  }\n\n  async getAppListDetails(options: {\n    url: string;\n    appSelector: string;\n    appNamespace?: string;\n    instance?: string;\n  }) {\n    const proxyUrl = await this.getBaseUrl();\n    const query = this.getQueryParams({\n      appNamespace: options.appNamespace,\n    });\n    if (this.searchInstances) {\n      return this.fetchDecode(\n        `${proxyUrl}/argoInstance/${\n          options.instance\n        }/applications/selector/${encodeURIComponent(\n          options.appSelector as string,\n        )}${query}`,\n        argoCDAppList,\n      );\n    }\n    return this.fetchDecode(\n      `${proxyUrl}${options.url}/applications/selector/${encodeURIComponent(\n        options.appSelector as string,\n      )}${query}`,\n      argoCDAppList,\n    );\n  }\n\n  async serviceLocatorUrl(options: {\n    appName?: string;\n    appSelector?: string;\n    appNamespace?: string;\n  }) {\n    if (!options.appName && !options.appSelector) {\n      throw new Error('Need to provide appName or appSelector');\n    }\n    const baseUrl = await this.getBaseUrl();\n    const query = this.getQueryParams({\n      appNamespace: options.appNamespace,\n    });\n    const url = options.appName\n      ? `${baseUrl}/find/name/${encodeURIComponent(\n          options.appName as string,\n        )}${query}`\n      : `${baseUrl}/find/selector/${encodeURIComponent(\n          options.appSelector as string,\n        )}${query}`;\n\n    return this.fetchDecode(url, argoCDServiceList).catch(_ => {\n      throw new Error('Cannot get argo location(s) for service');\n    });\n  }\n}\n"],"names":["tsDecode","tsIsDecodeError"],"mappings":"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"}