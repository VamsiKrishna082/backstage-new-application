import React, { useState, useEffect } from 'react';
import { LinearProgress, Tooltip, Box, Button, List, ListItem } from '@material-ui/core';
import { DateTime } from 'luxon';
import { ARGOCD_ANNOTATION_APP_NAME, useArgoCDAppData } from './useArgoCDAppData.esm.js';
import { ErrorBoundary, InfoCard, Table } from '@backstage/core-components';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { isArgocdAvailable } from '../conditions.esm.js';
import { useAppDetails } from './useAppDetails.esm.js';
import SyncIcon from '@material-ui/icons/Sync';
import { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';
import { DetailsDrawerComponent } from './DetailsDrawer.esm.js';

const MessageComponent = ({
  conditions
}) => {
  const [mapped, setMapped] = useState([]);
  useEffect(() => {
    setMapped(
      conditions?.map((condition) => {
        return {
          key: `${condition.lastTransitionTime}-${condition.type}`,
          ...condition
        };
      }) || []
    );
  }, [conditions]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, mapped ? /* @__PURE__ */ React.createElement(List, { dense: true }, mapped.map((condition) => /* @__PURE__ */ React.createElement(ListItem, { style: { padding: 0 }, key: condition.key }, condition.message))) : null);
};
const getElapsedTime = (start) => {
  return DateTime.fromISO(start).toRelative();
};
const getLastSyncState = (operationState) => {
  return operationState.finishedAt ? getElapsedTime(operationState.finishedAt) : operationState.phase;
};
const State = ({
  value,
  conditions
}) => {
  const colorMap = {
    Pending: "#dcbc21",
    Synced: "green",
    Healthy: "green",
    Inactive: "black",
    Failed: "red"
  };
  if (conditions !== void 0) {
    return /* @__PURE__ */ React.createElement(
      Tooltip,
      {
        title: /* @__PURE__ */ React.createElement(MessageComponent, { conditions }),
        placement: "bottom-start"
      },
      /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(Button, { style: { paddingLeft: "0px" } }, /* @__PURE__ */ React.createElement(
        "span",
        {
          style: {
            display: "block",
            width: "8px",
            height: "8px",
            borderRadius: "50%",
            backgroundColor: colorMap[value] || "#dcbc21",
            marginRight: "5px"
          }
        }
      ), value))
    );
  }
  return /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(
    "span",
    {
      style: {
        display: "block",
        width: "8px",
        height: "8px",
        borderRadius: "50%",
        backgroundColor: colorMap[value] || "#dcbc21",
        marginRight: "5px"
      }
    }
  ), value);
};
const OverviewComponent = ({
  data,
  extraColumns,
  retry
}) => {
  const configApi = useApi(configApiRef);
  const baseUrl = configApi.getOptionalString("argocd.baseUrl");
  const supportsMultipleArgoInstances = Boolean(
    configApi.getOptionalConfigArray("argocd.appLocatorMethods")?.length
  );
  const getBaseUrl = (row) => {
    if (supportsMultipleArgoInstances && !baseUrl) {
      const instanceConfig = configApi.getConfigArray("argocd.appLocatorMethods").find((value) => value.getOptionalString("type") === "config")?.getOptionalConfigArray("instances")?.find(
        (value) => value.getOptionalString("name") === row.metadata?.instance?.name
      );
      return instanceConfig?.getOptionalString("frontendUrl") ?? instanceConfig?.getOptionalString("url");
    }
    return baseUrl;
  };
  const columns = [
    {
      title: "Name",
      highlight: true,
      field: "name",
      render: (row) => DetailsDrawerComponent(row, getBaseUrl(row)),
      customSort: (a, b) => a.metadata.name.localeCompare(b.metadata.name)
    },
    {
      title: "Sync Status",
      field: "syncStatus",
      render: (row) => /* @__PURE__ */ React.createElement(
        State,
        {
          value: row.status.sync.status,
          conditions: row.status.conditions
        }
      ),
      customSort: (a, b) => a.status.sync.status.localeCompare(b.status.sync.status)
    },
    {
      title: "Health Status",
      field: "healthStatus",
      render: (row) => /* @__PURE__ */ React.createElement(State, { value: row.status.health.status, conditions: void 0 }),
      customSort: (a, b) => a.status.health.status.localeCompare(b.status.health.status)
    },
    {
      title: "Last Synced",
      defaultSort: "desc",
      field: "lastSynced",
      render: (row) => row.status.operationState ? getLastSyncState(row.status.operationState) : "",
      customSort: (a, b) => {
        return DateTime.fromISO(
          a.status.operationState?.finishedAt || "3000-01-01T00:00:00.000Z"
        ).toMillis() - DateTime.fromISO(
          b.status.operationState?.finishedAt || "3000-01-01T00:00:00.000Z"
        ).toMillis();
      }
    }
  ];
  if (supportsMultipleArgoInstances) {
    columns.splice(1, 0, {
      title: "Instance",
      field: "instance",
      render: (row) => row.metadata?.instance?.name,
      customSort: (a, b) => a.metadata?.instance?.name.localeCompare(b.metadata?.instance?.name)
    });
  }
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      title: "ArgoCD overview",
      options: {
        paging: true,
        search: false,
        sorting: true,
        draggable: false,
        padding: "dense"
      },
      data: data.items || [],
      columns: columns.concat(extraColumns),
      actions: [
        {
          icon: () => /* @__PURE__ */ React.createElement(SyncIcon, null),
          tooltip: "Refresh",
          isFreeAction: true,
          onClick: () => retry()
        }
      ]
    }
  );
};
const ArgoCDDetails = ({
  entity,
  extraColumns
}) => {
  const { url, appName, appSelector, appNamespace, projectName } = useArgoCDAppData({
    entity
  });
  const { loading, value, error, retry } = useAppDetails({
    url,
    appName,
    appSelector,
    appNamespace,
    projectName
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { title: "ArgoCD overview" }, /* @__PURE__ */ React.createElement(LinearProgress, null));
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(InfoCard, { title: "ArgoCD overview" }, "Error occurred while fetching data. ", error.name, ": ", error.message);
  }
  if (value) {
    if (value.items !== void 0) {
      return /* @__PURE__ */ React.createElement(
        OverviewComponent,
        {
          data: value,
          retry,
          extraColumns
        }
      );
    }
    if (Array.isArray(value)) {
      const wrapped2 = {
        items: value
      };
      return /* @__PURE__ */ React.createElement(
        OverviewComponent,
        {
          data: wrapped2,
          retry,
          extraColumns
        }
      );
    }
    const wrapped = {
      items: [value]
    };
    return /* @__PURE__ */ React.createElement(
      OverviewComponent,
      {
        data: wrapped,
        retry,
        extraColumns
      }
    );
  }
  return null;
};
const ArgoCDDetailsCard = (props) => {
  const { entity } = useEntity();
  return !isArgocdAvailable(entity) ? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: ARGOCD_ANNOTATION_APP_NAME }) : /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(ArgoCDDetails, { entity, extraColumns: props.extraColumns || [] }));
};

export { ArgoCDDetailsCard };
//# sourceMappingURL=ArgoCDDetailsCard.esm.js.map
