{"version":3,"file":"ArgoCDDetailsCard.esm.js","sources":["../../src/components/ArgoCDDetailsCard.tsx"],"sourcesContent":["/*\n * Copyright 2021 Larder Software Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  LinearProgress,\n  List,\n  ListItem,\n  Tooltip,\n  Button,\n} from '@material-ui/core';\nimport { Entity } from '@backstage/catalog-model';\nimport { DateTime } from 'luxon';\nimport {\n  ARGOCD_ANNOTATION_APP_NAME,\n  useArgoCDAppData,\n} from './useArgoCDAppData';\nimport {\n  ErrorBoundary,\n  InfoCard,\n  Table,\n  TableColumn,\n} from '@backstage/core-components';\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\nimport { isArgocdAvailable } from '../conditions';\nimport { ArgoCDAppDetails, ArgoCDAppList } from '../types';\nimport { useAppDetails } from './useAppDetails';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport {\n  MissingAnnotationEmptyState,\n  useEntity,\n} from '@backstage/plugin-catalog-react';\nimport { DetailsDrawerComponent as detailsDrawerComponent } from './DetailsDrawer';\n\ninterface Condition {\n  message?: string;\n  lastTransitionTime?: string;\n  type: string;\n}\n\ninterface ConditionRow extends Condition {\n  key: string;\n}\n\nconst MessageComponent = ({\n  conditions,\n}: {\n  conditions: Condition[] | undefined;\n}) => {\n  const [mapped, setMapped] = useState<ConditionRow[]>([]);\n\n  useEffect(() => {\n    setMapped(\n      conditions?.map((condition: Condition) => {\n        return {\n          key: `${condition.lastTransitionTime}-${condition.type}`,\n          ...condition,\n        };\n      }) || [],\n    );\n  }, [conditions]);\n\n  return (\n    <>\n      {mapped ? (\n        <List dense>\n          {mapped.map((condition: ConditionRow) => (\n            <ListItem style={{ padding: 0 }} key={condition.key}>\n              {condition.message}\n            </ListItem>\n          ))}\n        </List>\n      ) : null}\n    </>\n  );\n};\n\nconst getElapsedTime = (start: string) => {\n  return DateTime.fromISO(start).toRelative();\n};\n\nconst getLastSyncState = (operationState: any) => {\n  return operationState.finishedAt\n    ? getElapsedTime(operationState.finishedAt!)\n    : operationState.phase;\n};\n\nconst State = ({\n  value,\n  conditions,\n}: {\n  value: string;\n  conditions: Condition[] | undefined;\n}) => {\n  const colorMap: Record<string, string> = {\n    Pending: '#dcbc21',\n    Synced: 'green',\n    Healthy: 'green',\n    Inactive: 'black',\n    Failed: 'red',\n  };\n  if (conditions !== undefined) {\n    return (\n      <Tooltip\n        title={<MessageComponent conditions={conditions} />}\n        placement=\"bottom-start\"\n      >\n        <Box display=\"flex\" alignItems=\"center\">\n          <Button style={{ paddingLeft: '0px' }}>\n            <span\n              style={{\n                display: 'block',\n                width: '8px',\n                height: '8px',\n                borderRadius: '50%',\n                backgroundColor: colorMap[value] || '#dcbc21',\n                marginRight: '5px',\n              }}\n            />\n            {value}\n          </Button>\n        </Box>\n      </Tooltip>\n    );\n  }\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <span\n        style={{\n          display: 'block',\n          width: '8px',\n          height: '8px',\n          borderRadius: '50%',\n          backgroundColor: colorMap[value] || '#dcbc21',\n          marginRight: '5px',\n        }}\n      />\n      {value}\n    </Box>\n  );\n};\n\ntype OverviewComponentProps = {\n  data: ArgoCDAppList;\n  extraColumns: TableColumn[];\n  retry: () => void;\n};\n\nconst OverviewComponent = ({\n  data,\n  extraColumns,\n  retry,\n}: OverviewComponentProps) => {\n  const configApi = useApi(configApiRef);\n  const baseUrl = configApi.getOptionalString('argocd.baseUrl');\n  const supportsMultipleArgoInstances: boolean = Boolean(\n    configApi.getOptionalConfigArray('argocd.appLocatorMethods')?.length,\n  );\n\n  const getBaseUrl = (row: any): string | undefined => {\n    if (supportsMultipleArgoInstances && !baseUrl) {\n      const instanceConfig = configApi\n        .getConfigArray('argocd.appLocatorMethods')\n        .find(value => value.getOptionalString('type') === 'config')\n        ?.getOptionalConfigArray('instances')\n        ?.find(\n          value =>\n            value.getOptionalString('name') === row.metadata?.instance?.name,\n        );\n      return (\n        instanceConfig?.getOptionalString('frontendUrl') ??\n        instanceConfig?.getOptionalString('url')\n      );\n    }\n    return baseUrl;\n  };\n\n  const columns: TableColumn[] = [\n    {\n      title: 'Name',\n      highlight: true,\n      field: 'name',\n      render: (row: any): React.ReactNode =>\n        detailsDrawerComponent(row, getBaseUrl(row)),\n      customSort: (a: any, b: any) =>\n        a.metadata.name.localeCompare(b.metadata.name),\n    },\n    {\n      title: 'Sync Status',\n      field: 'syncStatus',\n      render: (row: any): React.ReactNode => (\n        <State\n          value={row.status.sync.status}\n          conditions={row.status.conditions}\n        />\n      ),\n      customSort: (a: any, b: any) =>\n        a.status.sync.status.localeCompare(b.status.sync.status),\n    },\n    {\n      title: 'Health Status',\n      field: 'healthStatus',\n      render: (row: any): React.ReactNode => (\n        <State value={row.status.health.status} conditions={undefined} />\n      ),\n      customSort: (a: any, b: any) =>\n        a.status.health.status.localeCompare(b.status.health.status),\n    },\n    {\n      title: 'Last Synced',\n      defaultSort: 'desc',\n      field: 'lastSynced',\n      render: (row: any): React.ReactNode =>\n        row.status.operationState\n          ? getLastSyncState(row.status.operationState)\n          : '',\n      customSort: (a: any, b: any) => {\n        return (\n          DateTime.fromISO(\n            a.status.operationState?.finishedAt || '3000-01-01T00:00:00.000Z',\n          ).toMillis() -\n          DateTime.fromISO(\n            b.status.operationState?.finishedAt || '3000-01-01T00:00:00.000Z',\n          ).toMillis()\n        );\n      },\n    },\n  ];\n\n  if (supportsMultipleArgoInstances) {\n    columns.splice(1, 0, {\n      title: 'Instance',\n      field: 'instance',\n      render: (row: any): React.ReactNode => row.metadata?.instance?.name,\n      customSort: (a: any, b: any) =>\n        a.metadata?.instance?.name.localeCompare(b.metadata?.instance?.name),\n    });\n  }\n\n  return (\n    <Table\n      title=\"ArgoCD overview\"\n      options={{\n        paging: true,\n        search: false,\n        sorting: true,\n        draggable: false,\n        padding: 'dense',\n      }}\n      data={data.items || []}\n      columns={columns.concat(extraColumns)}\n      actions={[\n        {\n          icon: () => <SyncIcon />,\n          tooltip: 'Refresh',\n          isFreeAction: true,\n          onClick: () => retry(),\n        },\n      ]}\n    />\n  );\n};\n\nconst ArgoCDDetails = ({\n  entity,\n  extraColumns,\n}: {\n  entity: Entity;\n  extraColumns: TableColumn[];\n}) => {\n  const { url, appName, appSelector, appNamespace, projectName } =\n    useArgoCDAppData({\n      entity,\n    });\n  const { loading, value, error, retry } = useAppDetails({\n    url,\n    appName,\n    appSelector,\n    appNamespace,\n    projectName,\n  });\n  if (loading) {\n    return (\n      <InfoCard title=\"ArgoCD overview\">\n        <LinearProgress />\n      </InfoCard>\n    );\n  }\n  if (error) {\n    return (\n      <InfoCard title=\"ArgoCD overview\">\n        Error occurred while fetching data. {error.name}: {error.message}\n      </InfoCard>\n    );\n  }\n  if (value) {\n    if ((value as ArgoCDAppList).items !== undefined) {\n      return (\n        <OverviewComponent\n          data={value as ArgoCDAppList}\n          retry={retry}\n          extraColumns={extraColumns}\n        />\n      );\n    }\n    if (Array.isArray(value)) {\n      const wrapped: ArgoCDAppList = {\n        items: value as Array<ArgoCDAppDetails>,\n      };\n      return (\n        <OverviewComponent\n          data={wrapped}\n          retry={retry}\n          extraColumns={extraColumns}\n        />\n      );\n    }\n    const wrapped: ArgoCDAppList = {\n      items: [value as ArgoCDAppDetails],\n    };\n    return (\n      <OverviewComponent\n        data={wrapped}\n        retry={retry}\n        extraColumns={extraColumns}\n      />\n    );\n  }\n  return null;\n};\n\ntype Props = {\n  /** @deprecated The entity is now grabbed from context instead */\n  entity?: Entity;\n  extraColumns?: TableColumn[];\n};\n\nexport const ArgoCDDetailsCard = (props: Props) => {\n  const { entity } = useEntity();\n  return !isArgocdAvailable(entity) ? (\n    <MissingAnnotationEmptyState annotation={ARGOCD_ANNOTATION_APP_NAME} />\n  ) : (\n    <ErrorBoundary>\n      <ArgoCDDetails entity={entity} extraColumns={props.extraColumns || []} />\n    </ErrorBoundary>\n  );\n};\n"],"names":["detailsDrawerComponent","wrapped"],"mappings":";;;;;;;;;;;;AA0DA,MAAM,mBAAmB,CAAC;AAAA,EACxB;AACF,CAEM,KAAA;AACJ,EAAA,MAAM,CAAC,MAAQ,EAAA,SAAS,CAAI,GAAA,QAAA,CAAyB,EAAE,CAAA;AAEvD,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,SAAA;AAAA,MACE,UAAA,EAAY,GAAI,CAAA,CAAC,SAAyB,KAAA;AACxC,QAAO,OAAA;AAAA,UACL,KAAK,CAAG,EAAA,SAAA,CAAU,kBAAkB,CAAA,CAAA,EAAI,UAAU,IAAI,CAAA,CAAA;AAAA,UACtD,GAAG;AAAA,SACL;AAAA,OACD,KAAK;AAAC,KACT;AAAA,GACF,EAAG,CAAC,UAAU,CAAC,CAAA;AAEf,EACE,uBAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,MACC,mBAAA,KAAA,CAAA,aAAA,CAAC,IAAK,EAAA,EAAA,KAAA,EAAK,QACR,MAAO,CAAA,GAAA,CAAI,CAAC,SAAA,qBACV,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,EAAS,OAAO,EAAE,OAAA,EAAS,CAAE,EAAA,EAAG,GAAK,EAAA,SAAA,CAAU,GAC7C,EAAA,EAAA,SAAA,CAAU,OACb,CACD,CACH,CAAA,GACE,IACN,CAAA;AAEJ,CAAA;AAEA,MAAM,cAAA,GAAiB,CAAC,KAAkB,KAAA;AACxC,EAAA,OAAO,QAAS,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAE,UAAW,EAAA;AAC5C,CAAA;AAEA,MAAM,gBAAA,GAAmB,CAAC,cAAwB,KAAA;AAChD,EAAA,OAAO,eAAe,UAClB,GAAA,cAAA,CAAe,cAAe,CAAA,UAAW,IACzC,cAAe,CAAA,KAAA;AACrB,CAAA;AAEA,MAAM,QAAQ,CAAC;AAAA,EACb,KAAA;AAAA,EACA;AACF,CAGM,KAAA;AACJ,EAAA,MAAM,QAAmC,GAAA;AAAA,IACvC,OAAS,EAAA,SAAA;AAAA,IACT,MAAQ,EAAA,OAAA;AAAA,IACR,OAAS,EAAA,OAAA;AAAA,IACT,QAAU,EAAA,OAAA;AAAA,IACV,MAAQ,EAAA;AAAA,GACV;AACA,EAAA,IAAI,eAAe,KAAW,CAAA,EAAA;AAC5B,IACE,uBAAA,KAAA,CAAA,aAAA;AAAA,MAAC,OAAA;AAAA,MAAA;AAAA,QACC,KAAA,kBAAQ,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,EAAiB,UAAwB,EAAA,CAAA;AAAA,QACjD,SAAU,EAAA;AAAA,OAAA;AAAA,sBAET,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,EAAI,OAAQ,EAAA,MAAA,EAAO,UAAW,EAAA,QAAA,EAAA,kBAC5B,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAO,KAAO,EAAA,EAAE,WAAa,EAAA,KAAA,EAC5B,EAAA,kBAAA,KAAA,CAAA,aAAA;AAAA,QAAC,MAAA;AAAA,QAAA;AAAA,UACC,KAAO,EAAA;AAAA,YACL,OAAS,EAAA,OAAA;AAAA,YACT,KAAO,EAAA,KAAA;AAAA,YACP,MAAQ,EAAA,KAAA;AAAA,YACR,YAAc,EAAA,KAAA;AAAA,YACd,eAAA,EAAiB,QAAS,CAAA,KAAK,CAAK,IAAA,SAAA;AAAA,YACpC,WAAa,EAAA;AAAA;AACf;AAAA,OACF,EACC,KACH,CACF;AAAA,KACF;AAAA;AAGJ,EAAA,uBACG,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,EAAI,OAAQ,EAAA,MAAA,EAAO,YAAW,QAC7B,EAAA,kBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,MAAA;AAAA,IAAA;AAAA,MACC,KAAO,EAAA;AAAA,QACL,OAAS,EAAA,OAAA;AAAA,QACT,KAAO,EAAA,KAAA;AAAA,QACP,MAAQ,EAAA,KAAA;AAAA,QACR,YAAc,EAAA,KAAA;AAAA,QACd,eAAA,EAAiB,QAAS,CAAA,KAAK,CAAK,IAAA,SAAA;AAAA,QACpC,WAAa,EAAA;AAAA;AACf;AAAA,KAED,KACH,CAAA;AAEJ,CAAA;AAQA,MAAM,oBAAoB,CAAC;AAAA,EACzB,IAAA;AAAA,EACA,YAAA;AAAA,EACA;AACF,CAA8B,KAAA;AAC5B,EAAM,MAAA,SAAA,GAAY,OAAO,YAAY,CAAA;AACrC,EAAM,MAAA,OAAA,GAAU,SAAU,CAAA,iBAAA,CAAkB,gBAAgB,CAAA;AAC5D,EAAA,MAAM,6BAAyC,GAAA,OAAA;AAAA,IAC7C,SAAA,CAAU,sBAAuB,CAAA,0BAA0B,CAAG,EAAA;AAAA,GAChE;AAEA,EAAM,MAAA,UAAA,GAAa,CAAC,GAAiC,KAAA;AACnD,IAAI,IAAA,6BAAA,IAAiC,CAAC,OAAS,EAAA;AAC7C,MAAA,MAAM,cAAiB,GAAA,SAAA,CACpB,cAAe,CAAA,0BAA0B,EACzC,IAAK,CAAA,CAAA,KAAA,KAAS,KAAM,CAAA,iBAAA,CAAkB,MAAM,CAAM,KAAA,QAAQ,CACzD,EAAA,sBAAA,CAAuB,WAAW,CAClC,EAAA,IAAA;AAAA,QACA,WACE,KAAM,CAAA,iBAAA,CAAkB,MAAM,CAAM,KAAA,GAAA,CAAI,UAAU,QAAU,EAAA;AAAA,OAChE;AACF,MAAA,OACE,gBAAgB,iBAAkB,CAAA,aAAa,CAC/C,IAAA,cAAA,EAAgB,kBAAkB,KAAK,CAAA;AAAA;AAG3C,IAAO,OAAA,OAAA;AAAA,GACT;AAEA,EAAA,MAAM,OAAyB,GAAA;AAAA,IAC7B;AAAA,MACE,KAAO,EAAA,MAAA;AAAA,MACP,SAAW,EAAA,IAAA;AAAA,MACX,KAAO,EAAA,MAAA;AAAA,MACP,QAAQ,CAAC,GAAA,KACPA,uBAAuB,GAAK,EAAA,UAAA,CAAW,GAAG,CAAC,CAAA;AAAA,MAC7C,UAAA,EAAY,CAAC,CAAA,EAAQ,CACnB,KAAA,CAAA,CAAE,SAAS,IAAK,CAAA,aAAA,CAAc,CAAE,CAAA,QAAA,CAAS,IAAI;AAAA,KACjD;AAAA,IACA;AAAA,MACE,KAAO,EAAA,aAAA;AAAA,MACP,KAAO,EAAA,YAAA;AAAA,MACP,MAAA,EAAQ,CAAC,GACP,qBAAA,KAAA,CAAA,aAAA;AAAA,QAAC,KAAA;AAAA,QAAA;AAAA,UACC,KAAA,EAAO,GAAI,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA;AAAA,UACvB,UAAA,EAAY,IAAI,MAAO,CAAA;AAAA;AAAA,OACzB;AAAA,MAEF,UAAY,EAAA,CAAC,CAAQ,EAAA,CAAA,KACnB,CAAE,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,aAAc,CAAA,CAAA,CAAE,MAAO,CAAA,IAAA,CAAK,MAAM;AAAA,KAC3D;AAAA,IACA;AAAA,MACE,KAAO,EAAA,eAAA;AAAA,MACP,KAAO,EAAA,cAAA;AAAA,MACP,MAAA,EAAQ,CAAC,GAAA,qBACN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAM,KAAO,EAAA,GAAA,CAAI,MAAO,CAAA,MAAA,CAAO,MAAQ,EAAA,UAAA,EAAY,KAAW,CAAA,EAAA,CAAA;AAAA,MAEjE,UAAY,EAAA,CAAC,CAAQ,EAAA,CAAA,KACnB,CAAE,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,aAAc,CAAA,CAAA,CAAE,MAAO,CAAA,MAAA,CAAO,MAAM;AAAA,KAC/D;AAAA,IACA;AAAA,MACE,KAAO,EAAA,aAAA;AAAA,MACP,WAAa,EAAA,MAAA;AAAA,MACb,KAAO,EAAA,YAAA;AAAA,MACP,MAAA,EAAQ,CAAC,GAAA,KACP,GAAI,CAAA,MAAA,CAAO,iBACP,gBAAiB,CAAA,GAAA,CAAI,MAAO,CAAA,cAAc,CAC1C,GAAA,EAAA;AAAA,MACN,UAAA,EAAY,CAAC,CAAA,EAAQ,CAAW,KAAA;AAC9B,QAAA,OACE,QAAS,CAAA,OAAA;AAAA,UACP,CAAA,CAAE,MAAO,CAAA,cAAA,EAAgB,UAAc,IAAA;AAAA,SACzC,CAAE,QAAS,EAAA,GACX,QAAS,CAAA,OAAA;AAAA,UACP,CAAA,CAAE,MAAO,CAAA,cAAA,EAAgB,UAAc,IAAA;AAAA,UACvC,QAAS,EAAA;AAAA;AAEf;AACF,GACF;AAEA,EAAA,IAAI,6BAA+B,EAAA;AACjC,IAAQ,OAAA,CAAA,MAAA,CAAO,GAAG,CAAG,EAAA;AAAA,MACnB,KAAO,EAAA,UAAA;AAAA,MACP,KAAO,EAAA,UAAA;AAAA,MACP,MAAQ,EAAA,CAAC,GAA8B,KAAA,GAAA,CAAI,UAAU,QAAU,EAAA,IAAA;AAAA,MAC/D,UAAY,EAAA,CAAC,CAAQ,EAAA,CAAA,KACnB,CAAE,CAAA,QAAA,EAAU,QAAU,EAAA,IAAA,CAAK,aAAc,CAAA,CAAA,CAAE,QAAU,EAAA,QAAA,EAAU,IAAI;AAAA,KACtE,CAAA;AAAA;AAGH,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,KAAA;AAAA,IAAA;AAAA,MACC,KAAM,EAAA,iBAAA;AAAA,MACN,OAAS,EAAA;AAAA,QACP,MAAQ,EAAA,IAAA;AAAA,QACR,MAAQ,EAAA,KAAA;AAAA,QACR,OAAS,EAAA,IAAA;AAAA,QACT,SAAW,EAAA,KAAA;AAAA,QACX,OAAS,EAAA;AAAA,OACX;AAAA,MACA,IAAA,EAAM,IAAK,CAAA,KAAA,IAAS,EAAC;AAAA,MACrB,OAAA,EAAS,OAAQ,CAAA,MAAA,CAAO,YAAY,CAAA;AAAA,MACpC,OAAS,EAAA;AAAA,QACP;AAAA,UACE,IAAA,EAAM,sBAAM,KAAA,CAAA,aAAA,CAAC,QAAS,EAAA,IAAA,CAAA;AAAA,UACtB,OAAS,EAAA,SAAA;AAAA,UACT,YAAc,EAAA,IAAA;AAAA,UACd,OAAA,EAAS,MAAM,KAAM;AAAA;AACvB;AACF;AAAA,GACF;AAEJ,CAAA;AAEA,MAAM,gBAAgB,CAAC;AAAA,EACrB,MAAA;AAAA,EACA;AACF,CAGM,KAAA;AACJ,EAAA,MAAM,EAAE,GAAK,EAAA,OAAA,EAAS,aAAa,YAAc,EAAA,WAAA,KAC/C,gBAAiB,CAAA;AAAA,IACf;AAAA,GACD,CAAA;AACH,EAAA,MAAM,EAAE,OAAS,EAAA,KAAA,EAAO,KAAO,EAAA,KAAA,KAAU,aAAc,CAAA;AAAA,IACrD,GAAA;AAAA,IACA,OAAA;AAAA,IACA,WAAA;AAAA,IACA,YAAA;AAAA,IACA;AAAA,GACD,CAAA;AACD,EAAA,IAAI,OAAS,EAAA;AACX,IAAA,2CACG,QAAS,EAAA,EAAA,KAAA,EAAM,iBACd,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,oBAAe,CAClB,CAAA;AAAA;AAGJ,EAAA,IAAI,KAAO,EAAA;AACT,IACE,uBAAA,KAAA,CAAA,aAAA,CAAC,YAAS,KAAM,EAAA,iBAAA,EAAA,EAAkB,wCACK,KAAM,CAAA,IAAA,EAAK,IAAG,EAAA,KAAA,CAAM,OAC3D,CAAA;AAAA;AAGJ,EAAA,IAAI,KAAO,EAAA;AACT,IAAK,IAAA,KAAA,CAAwB,UAAU,KAAW,CAAA,EAAA;AAChD,MACE,uBAAA,KAAA,CAAA,aAAA;AAAA,QAAC,iBAAA;AAAA,QAAA;AAAA,UACC,IAAM,EAAA,KAAA;AAAA,UACN,KAAA;AAAA,UACA;AAAA;AAAA,OACF;AAAA;AAGJ,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAG,EAAA;AACxB,MAAA,MAAMC,QAAyB,GAAA;AAAA,QAC7B,KAAO,EAAA;AAAA,OACT;AACA,MACE,uBAAA,KAAA,CAAA,aAAA;AAAA,QAAC,iBAAA;AAAA,QAAA;AAAA,UACC,IAAMA,EAAAA,QAAAA;AAAA,UACN,KAAA;AAAA,UACA;AAAA;AAAA,OACF;AAAA;AAGJ,IAAA,MAAM,OAAyB,GAAA;AAAA,MAC7B,KAAA,EAAO,CAAC,KAAyB;AAAA,KACnC;AACA,IACE,uBAAA,KAAA,CAAA,aAAA;AAAA,MAAC,iBAAA;AAAA,MAAA;AAAA,QACC,IAAM,EAAA,OAAA;AAAA,QACN,KAAA;AAAA,QACA;AAAA;AAAA,KACF;AAAA;AAGJ,EAAO,OAAA,IAAA;AACT,CAAA;AAQa,MAAA,iBAAA,GAAoB,CAAC,KAAiB,KAAA;AACjD,EAAM,MAAA,EAAE,MAAO,EAAA,GAAI,SAAU,EAAA;AAC7B,EAAA,OAAO,CAAC,iBAAkB,CAAA,MAAM,oBAC7B,KAAA,CAAA,aAAA,CAAA,2BAAA,EAAA,EAA4B,YAAY,0BAA4B,EAAA,CAAA,uCAEpE,aACC,EAAA,IAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,iBAAc,MAAgB,EAAA,YAAA,EAAc,MAAM,YAAgB,IAAA,IAAI,CACzE,CAAA;AAEJ;;;;"}