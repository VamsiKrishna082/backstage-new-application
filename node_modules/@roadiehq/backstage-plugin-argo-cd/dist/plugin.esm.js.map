{"version":3,"file":"plugin.esm.js","sources":["../src/plugin.ts"],"sourcesContent":["import {\n  configApiRef,\n  createApiFactory,\n  createComponentExtension,\n  createPlugin,\n  createRoutableExtension,\n  createRouteRef,\n  discoveryApiRef,\n  identityApiRef,\n} from '@backstage/core-plugin-api';\nimport { ArgoCDApiClient, argoCDApiRef } from './api';\n\nexport const entityContentRouteRef = createRouteRef({\n  id: 'ArgoCD Entity Content',\n});\n\nexport const argocdPlugin = createPlugin({\n  id: 'argocd',\n  apis: [\n    createApiFactory({\n      api: argoCDApiRef,\n      deps: {\n        discoveryApi: discoveryApiRef,\n        identityApi: identityApiRef,\n        configApi: configApiRef,\n      },\n      factory: ({ discoveryApi, identityApi, configApi }) =>\n        new ArgoCDApiClient({\n          discoveryApi,\n          identityApi,\n          backendBaseUrl: configApi.getString('backend.baseUrl'),\n          useNamespacedApps: Boolean(\n            configApi.getOptionalBoolean('argocd.namespacedApps'),\n          ),\n          searchInstances: Boolean(\n            configApi.getOptionalConfigArray('argocd.appLocatorMethods')\n              ?.length,\n          ),\n        }),\n    }),\n  ],\n  routes: {\n    entityContent: entityContentRouteRef,\n  },\n});\n\nexport const EntityArgoCDContent = argocdPlugin.provide(\n  createRoutableExtension({\n    name: 'EntityArgoCDContent',\n    component: () => import('./Router').then(m => m.Router),\n    mountPoint: entityContentRouteRef,\n  }),\n);\n\nexport const EntityArgoCDOverviewCard = argocdPlugin.provide(\n  createComponentExtension({\n    name: 'EntityArgoCDOverviewCard',\n    component: {\n      lazy: () =>\n        import('./components/ArgoCDDetailsCard').then(m => m.ArgoCDDetailsCard),\n    },\n  }),\n);\n\nexport const EntityArgoCDHistoryCard = argocdPlugin.provide(\n  createComponentExtension({\n    name: 'EntityArgoCDHistoryCard',\n    component: {\n      lazy: () =>\n        import('./components/ArgoCDHistoryCard').then(m => m.ArgoCDHistoryCard),\n    },\n  }),\n);\n"],"names":[],"mappings":";;;AAYO,MAAM,wBAAwB,cAAe,CAAA;AAAA,EAClD,EAAI,EAAA;AACN,CAAC;AAEM,MAAM,eAAe,YAAa,CAAA;AAAA,EACvC,EAAI,EAAA,QAAA;AAAA,EACJ,IAAM,EAAA;AAAA,IACJ,gBAAiB,CAAA;AAAA,MACf,GAAK,EAAA,YAAA;AAAA,MACL,IAAM,EAAA;AAAA,QACJ,YAAc,EAAA,eAAA;AAAA,QACd,WAAa,EAAA,cAAA;AAAA,QACb,SAAW,EAAA;AAAA,OACb;AAAA,MACA,OAAA,EAAS,CAAC,EAAE,YAAA,EAAc,aAAa,SAAU,EAAA,KAC/C,IAAI,eAAgB,CAAA;AAAA,QAClB,YAAA;AAAA,QACA,WAAA;AAAA,QACA,cAAA,EAAgB,SAAU,CAAA,SAAA,CAAU,iBAAiB,CAAA;AAAA,QACrD,iBAAmB,EAAA,OAAA;AAAA,UACjB,SAAA,CAAU,mBAAmB,uBAAuB;AAAA,SACtD;AAAA,QACA,eAAiB,EAAA,OAAA;AAAA,UACf,SAAA,CAAU,sBAAuB,CAAA,0BAA0B,CACvD,EAAA;AAAA;AACN,OACD;AAAA,KACJ;AAAA,GACH;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,aAAe,EAAA;AAAA;AAEnB,CAAC;AAEM,MAAM,sBAAsB,YAAa,CAAA,OAAA;AAAA,EAC9C,uBAAwB,CAAA;AAAA,IACtB,IAAM,EAAA,qBAAA;AAAA,IACN,SAAA,EAAW,MAAM,OAAO,iBAAU,EAAE,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,MAAM,CAAA;AAAA,IACtD,UAAY,EAAA;AAAA,GACb;AACH;AAEO,MAAM,2BAA2B,YAAa,CAAA,OAAA;AAAA,EACnD,wBAAyB,CAAA;AAAA,IACvB,IAAM,EAAA,0BAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACT,IAAA,EAAM,MACJ,OAAO,uCAAgC,EAAE,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,iBAAiB;AAAA;AAC1E,GACD;AACH;AAEO,MAAM,0BAA0B,YAAa,CAAA,OAAA;AAAA,EAClD,wBAAyB,CAAA;AAAA,IACvB,IAAM,EAAA,yBAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACT,IAAA,EAAM,MACJ,OAAO,uCAAgC,EAAE,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,iBAAiB;AAAA;AAC1E,GACD;AACH;;;;"}