{"version":3,"file":"static/669.36ee0fa9.chunk.js","mappings":"sRAWA,MAAMA,EAAkB,CAAC,CACvB,OAAAC,EACA,WAAAC,EACA,KAAAC,CACF,IAAM,CACJ,MAAMC,EAAU,CACd,CACE,MAAO,QACP,MAAO,QACP,OAASC,GAAwB,gBAAoB,KAAM,CAAE,GAAIA,EAAI,IAAK,OAAQ,SAAU,IAAK,UAAW,EAAGA,EAAI,KAAK,CAC1H,EACA,CACE,MAAO,SACP,MAAO,cACP,OAASA,GAAwB,gBAAoB,KAAM,CAAE,GAAIA,EAAI,UAAW,OAAQ,SAAU,IAAK,UAAW,EAAGA,EAAI,WAAW,CACtI,CACF,EACMC,EAA2B,gBAC/BC,EAAA,GACA,CACE,MAAO,qCAAkC,MACvCN,CACF,CAAC,2BACH,EACgB,gBAAoBO,EAAA,EAAY,KAAML,EAAK,OAAS,YAAY,CAClF,EACA,OAAuB,gBACrB,IACA,CACE,MAAOG,EACP,QAAS,CACP,OAAQH,EAAK,OAAS,GACtB,SAAUA,EAAK,UAAY,EAC3B,OAAQA,EAAK,YAAc,GAC3B,oBAAqB,GACrB,QAASA,EAAK,UAAY,GAC1B,UAAW,GACX,QAAS,OACX,EACA,KAAMD,EACN,QAAAE,CACF,CACF,CACF,EACMK,EAAa,CAAC,CAClB,OAAAR,EACA,KAAAE,CACF,IAAM,CACJ,MAAMO,KAAa,MAAO,IAAa,EACjC,CAAE,MAAAC,EAAO,QAAAC,EAAS,MAAAC,CAAM,KAAIC,EAAA,GAAS,SAAY,CACrD,MAAMZ,EAAa,MAAMQ,EAAW,kBAClC,MAA4BT,CAAM,CACpC,EACA,OAAIE,GAAM,sBACRD,EAAW,KAAK,GAAGC,EAAK,qBAAqBF,CAAM,CAAC,EAE/CC,CACT,CAAC,EACD,OAAIU,EACqB,gBAAoB,IAAU,IAAI,EAChDC,EACc,gBAAoBE,EAAA,EAAO,CAAE,SAAU,OAAQ,EAAGF,EAAM,OAAO,EAEjE,gBAAoBb,EAAiB,CAAE,OAAAC,EAAQ,WAAYU,GAAS,CAAC,EAAG,KAAAR,CAAK,CAAC,CACvG,EACMa,EAAkBb,GAAS,CAC/B,KAAM,CAAE,OAAAF,CAAO,KAAI,MAAU,EAC7B,SAAQ,MAA6BA,CAAM,EAKvB,gBAAoBQ,EAAY,CAAE,OAAAR,EAAQ,KAAME,GAAQ,CAAC,CAAE,CAAC,EALjB,gBAC7D,IACA,CACE,WAAY,IACd,CACF,CACF,C","sources":["webpack://app/../../node_modules/@backstage-community/plugin-grafana/dist/components/DashboardsCard/DashboardsCard.esm.js"],"sourcesContent":["import React from 'react';\nimport { Progress, Table, Link } from '@backstage/core-components';\nimport { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { grafanaApiRef } from '../../api.esm.js';\nimport useAsync from 'react-use/lib/useAsync';\nimport Alert from '@material-ui/lab/Alert';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { isDashboardSelectorAvailable, GRAFANA_ANNOTATION_DASHBOARD_SELECTOR, dashboardSelectorFromEntity } from '../../constants.esm.js';\n\nconst DashboardsTable = ({\n  entity,\n  dashboards,\n  opts\n}) => {\n  const columns = [\n    {\n      title: \"Title\",\n      field: \"title\",\n      render: (row) => /* @__PURE__ */ React.createElement(Link, { to: row.url, target: \"_blank\", rel: \"noopener\" }, row.title)\n    },\n    {\n      title: \"Folder\",\n      field: \"folderTitle\",\n      render: (row) => /* @__PURE__ */ React.createElement(Link, { to: row.folderUrl, target: \"_blank\", rel: \"noopener\" }, row.folderTitle)\n    }\n  ];\n  const titleElm = /* @__PURE__ */ React.createElement(\n    Tooltip,\n    {\n      title: `Note: only dashboard with the \"${dashboardSelectorFromEntity(\n        entity\n      )}\" selector are displayed.`\n    },\n    /* @__PURE__ */ React.createElement(Typography, null, opts.title || \"Dashboards\")\n  );\n  return /* @__PURE__ */ React.createElement(\n    Table,\n    {\n      title: titleElm,\n      options: {\n        paging: opts.paged ?? false,\n        pageSize: opts.pageSize ?? 5,\n        search: opts.searchable ?? false,\n        emptyRowsWhenPaging: false,\n        sorting: opts.sortable ?? false,\n        draggable: false,\n        padding: \"dense\"\n      },\n      data: dashboards,\n      columns\n    }\n  );\n};\nconst Dashboards = ({\n  entity,\n  opts\n}) => {\n  const grafanaApi = useApi(grafanaApiRef);\n  const { value, loading, error } = useAsync(async () => {\n    const dashboards = await grafanaApi.listDashboards(\n      dashboardSelectorFromEntity(entity)\n    );\n    if (opts?.additionalDashboards) {\n      dashboards.push(...opts.additionalDashboards(entity));\n    }\n    return dashboards;\n  });\n  if (loading) {\n    return /* @__PURE__ */ React.createElement(Progress, null);\n  } else if (error) {\n    return /* @__PURE__ */ React.createElement(Alert, { severity: \"error\" }, error.message);\n  }\n  return /* @__PURE__ */ React.createElement(DashboardsTable, { entity, dashboards: value || [], opts });\n};\nconst DashboardsCard = (opts) => {\n  const { entity } = useEntity();\n  return !isDashboardSelectorAvailable(entity) ? /* @__PURE__ */ React.createElement(\n    MissingAnnotationEmptyState,\n    {\n      annotation: GRAFANA_ANNOTATION_DASHBOARD_SELECTOR\n    }\n  ) : /* @__PURE__ */ React.createElement(Dashboards, { entity, opts: opts || {} });\n};\n\nexport { DashboardsCard, DashboardsTable };\n//# sourceMappingURL=DashboardsCard.esm.js.map\n"],"names":["DashboardsTable","entity","dashboards","opts","columns","row","titleElm","Tooltip","Typography","Dashboards","grafanaApi","value","loading","error","useAsync","Alert","DashboardsCard"],"sourceRoot":""}